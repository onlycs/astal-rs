// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../../gir/gir-files
// DO NOT EDIT

use crate::{ffi,Device,Endpoint,Wp};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "AstalWpAudio")]
    pub struct Audio(Object<ffi::AstalWpAudio, ffi::AstalWpAudioClass>);

    match fn {
        type_ => || ffi::astal_wp_audio_get_type(),
    }
}

impl Audio {
    #[doc(alias = "astal_wp_audio_new")]
    pub fn new(wp: &Wp) -> Audio {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(ffi::astal_wp_audio_new(wp.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_wp_audio_get_default_microphone")]
    #[doc(alias = "get_default_microphone")]
    #[doc(alias = "default-microphone")]
    pub fn default_microphone(&self) -> Option<Endpoint> {
        unsafe {
            from_glib_none(ffi::astal_wp_audio_get_default_microphone(self.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_wp_audio_get_default_speaker")]
    #[doc(alias = "get_default_speaker")]
    #[doc(alias = "default-speaker")]
    pub fn default_speaker(&self) -> Option<Endpoint> {
        unsafe {
            from_glib_none(ffi::astal_wp_audio_get_default_speaker(self.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_wp_audio_get_device")]
    #[doc(alias = "get_device")]
    pub fn device(&self, id: u32) -> Option<Device> {
        unsafe {
            from_glib_none(ffi::astal_wp_audio_get_device(self.to_glib_none().0, id))
        }
    }

    #[doc(alias = "astal_wp_audio_get_devices")]
    #[doc(alias = "get_devices")]
    pub fn devices(&self) -> Vec<Device> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::astal_wp_audio_get_devices(self.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_wp_audio_get_endpoint")]
    #[doc(alias = "get_endpoint")]
    pub fn endpoint(&self, id: u32) -> Option<Endpoint> {
        unsafe {
            from_glib_none(ffi::astal_wp_audio_get_endpoint(self.to_glib_none().0, id))
        }
    }

    #[doc(alias = "astal_wp_audio_get_microphone")]
    #[doc(alias = "get_microphone")]
    pub fn microphone(&self, id: u32) -> Option<Endpoint> {
        unsafe {
            from_glib_none(ffi::astal_wp_audio_get_microphone(self.to_glib_none().0, id))
        }
    }

    #[doc(alias = "astal_wp_audio_get_microphones")]
    #[doc(alias = "get_microphones")]
    pub fn microphones(&self) -> Vec<Endpoint> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::astal_wp_audio_get_microphones(self.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_wp_audio_get_recorder")]
    #[doc(alias = "get_recorder")]
    pub fn recorder(&self, id: u32) -> Option<Endpoint> {
        unsafe {
            from_glib_none(ffi::astal_wp_audio_get_recorder(self.to_glib_none().0, id))
        }
    }

    #[doc(alias = "astal_wp_audio_get_recorders")]
    #[doc(alias = "get_recorders")]
    pub fn recorders(&self) -> Vec<Endpoint> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::astal_wp_audio_get_recorders(self.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_wp_audio_get_speaker")]
    #[doc(alias = "get_speaker")]
    pub fn speaker(&self, id: u32) -> Option<Endpoint> {
        unsafe {
            from_glib_none(ffi::astal_wp_audio_get_speaker(self.to_glib_none().0, id))
        }
    }

    #[doc(alias = "astal_wp_audio_get_speakers")]
    #[doc(alias = "get_speakers")]
    pub fn speakers(&self) -> Vec<Endpoint> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::astal_wp_audio_get_speakers(self.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_wp_audio_get_stream")]
    #[doc(alias = "get_stream")]
    pub fn stream(&self, id: u32) -> Option<Endpoint> {
        unsafe {
            from_glib_none(ffi::astal_wp_audio_get_stream(self.to_glib_none().0, id))
        }
    }

    #[doc(alias = "astal_wp_audio_get_streams")]
    #[doc(alias = "get_streams")]
    pub fn streams(&self) -> Vec<Endpoint> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::astal_wp_audio_get_streams(self.to_glib_none().0))
        }
    }

    #[doc(alias = "device-added")]
    pub fn connect_device_added<F: Fn(&Self, &Device) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn device_added_trampoline<F: Fn(&Audio, &Device) + 'static>(this: *mut ffi::AstalWpAudio, object: *mut ffi::AstalWpDevice, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(object))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"device-added\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(device_added_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "device-removed")]
    pub fn connect_device_removed<F: Fn(&Self, &Device) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn device_removed_trampoline<F: Fn(&Audio, &Device) + 'static>(this: *mut ffi::AstalWpAudio, object: *mut ffi::AstalWpDevice, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(object))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"device-removed\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(device_removed_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "microphone-added")]
    pub fn connect_microphone_added<F: Fn(&Self, &Endpoint) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn microphone_added_trampoline<F: Fn(&Audio, &Endpoint) + 'static>(this: *mut ffi::AstalWpAudio, object: *mut ffi::AstalWpEndpoint, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(object))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"microphone-added\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(microphone_added_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "microphone-removed")]
    pub fn connect_microphone_removed<F: Fn(&Self, &Endpoint) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn microphone_removed_trampoline<F: Fn(&Audio, &Endpoint) + 'static>(this: *mut ffi::AstalWpAudio, object: *mut ffi::AstalWpEndpoint, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(object))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"microphone-removed\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(microphone_removed_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "recorder-added")]
    pub fn connect_recorder_added<F: Fn(&Self, &Endpoint) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn recorder_added_trampoline<F: Fn(&Audio, &Endpoint) + 'static>(this: *mut ffi::AstalWpAudio, object: *mut ffi::AstalWpEndpoint, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(object))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"recorder-added\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(recorder_added_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "recorder-removed")]
    pub fn connect_recorder_removed<F: Fn(&Self, &Endpoint) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn recorder_removed_trampoline<F: Fn(&Audio, &Endpoint) + 'static>(this: *mut ffi::AstalWpAudio, object: *mut ffi::AstalWpEndpoint, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(object))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"recorder-removed\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(recorder_removed_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "speaker-added")]
    pub fn connect_speaker_added<F: Fn(&Self, &Endpoint) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn speaker_added_trampoline<F: Fn(&Audio, &Endpoint) + 'static>(this: *mut ffi::AstalWpAudio, object: *mut ffi::AstalWpEndpoint, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(object))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"speaker-added\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(speaker_added_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "speaker-removed")]
    pub fn connect_speaker_removed<F: Fn(&Self, &Endpoint) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn speaker_removed_trampoline<F: Fn(&Audio, &Endpoint) + 'static>(this: *mut ffi::AstalWpAudio, object: *mut ffi::AstalWpEndpoint, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(object))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"speaker-removed\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(speaker_removed_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "stream-added")]
    pub fn connect_stream_added<F: Fn(&Self, &Endpoint) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn stream_added_trampoline<F: Fn(&Audio, &Endpoint) + 'static>(this: *mut ffi::AstalWpAudio, object: *mut ffi::AstalWpEndpoint, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(object))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"stream-added\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(stream_added_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "stream-removed")]
    pub fn connect_stream_removed<F: Fn(&Self, &Endpoint) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn stream_removed_trampoline<F: Fn(&Audio, &Endpoint) + 'static>(this: *mut ffi::AstalWpAudio, object: *mut ffi::AstalWpEndpoint, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(object))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"stream-removed\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(stream_removed_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "default-microphone")]
    pub fn connect_default_microphone_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_default_microphone_trampoline<F: Fn(&Audio) + 'static>(this: *mut ffi::AstalWpAudio, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::default-microphone\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_default_microphone_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "default-speaker")]
    pub fn connect_default_speaker_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_default_speaker_trampoline<F: Fn(&Audio) + 'static>(this: *mut ffi::AstalWpAudio, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::default-speaker\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_default_speaker_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "devices")]
    pub fn connect_devices_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_devices_trampoline<F: Fn(&Audio) + 'static>(this: *mut ffi::AstalWpAudio, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::devices\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_devices_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "microphones")]
    pub fn connect_microphones_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_microphones_trampoline<F: Fn(&Audio) + 'static>(this: *mut ffi::AstalWpAudio, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::microphones\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_microphones_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "recorders")]
    pub fn connect_recorders_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_recorders_trampoline<F: Fn(&Audio) + 'static>(this: *mut ffi::AstalWpAudio, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::recorders\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_recorders_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "speakers")]
    pub fn connect_speakers_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_speakers_trampoline<F: Fn(&Audio) + 'static>(this: *mut ffi::AstalWpAudio, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::speakers\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_speakers_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "streams")]
    pub fn connect_streams_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_streams_trampoline<F: Fn(&Audio) + 'static>(this: *mut ffi::AstalWpAudio, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::streams\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_streams_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}
