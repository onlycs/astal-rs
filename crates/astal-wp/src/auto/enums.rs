// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../../gir/gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{translate::*};

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AstalWpDeviceType")]
pub enum DeviceType {
    #[doc(alias = "ASTAL_WP_DEVICE_TYPE_AUDIO")]
    Audio,
    #[doc(alias = "ASTAL_WP_DEVICE_TYPE_VIDEO")]
    Video,
#[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for DeviceType {
    type GlibType = ffi::AstalWpDeviceType;

    #[inline]
fn into_glib(self) -> ffi::AstalWpDeviceType {
match self {
            Self::Audio => ffi::ASTAL_WP_DEVICE_TYPE_AUDIO,
            Self::Video => ffi::ASTAL_WP_DEVICE_TYPE_VIDEO,
            Self::__Unknown(value) => value,
}
}
}

#[doc(hidden)]
impl FromGlib<ffi::AstalWpDeviceType> for DeviceType {
    #[inline]
unsafe fn from_glib(value: ffi::AstalWpDeviceType) -> Self {
        skip_assert_initialized!();
        
match value {
            ffi::ASTAL_WP_DEVICE_TYPE_AUDIO => Self::Audio,
            ffi::ASTAL_WP_DEVICE_TYPE_VIDEO => Self::Video,
            value => Self::__Unknown(value),
}
}
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AstalWpMediaClass")]
pub enum MediaClass {
    #[doc(alias = "ASTAL_WP_MEDIA_CLASS_AUDIO_MICROPHONE")]
    AudioMicrophone,
    #[doc(alias = "ASTAL_WP_MEDIA_CLASS_AUDIO_SPEAKER")]
    AudioSpeaker,
    #[doc(alias = "ASTAL_WP_MEDIA_CLASS_AUDIO_RECORDER")]
    AudioRecorder,
    #[doc(alias = "ASTAL_WP_MEDIA_CLASS_AUDIO_STREAM")]
    AudioStream,
    #[doc(alias = "ASTAL_WP_MEDIA_CLASS_VIDEO_SOURCE")]
    VideoSource,
    #[doc(alias = "ASTAL_WP_MEDIA_CLASS_VIDEO_SINK")]
    VideoSink,
    #[doc(alias = "ASTAL_WP_MEDIA_CLASS_VIDEO_RECORDER")]
    VideoRecorder,
    #[doc(alias = "ASTAL_WP_MEDIA_CLASS_VIDEO_STREAM")]
    VideoStream,
#[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for MediaClass {
    type GlibType = ffi::AstalWpMediaClass;

    #[inline]
fn into_glib(self) -> ffi::AstalWpMediaClass {
match self {
            Self::AudioMicrophone => ffi::ASTAL_WP_MEDIA_CLASS_AUDIO_MICROPHONE,
            Self::AudioSpeaker => ffi::ASTAL_WP_MEDIA_CLASS_AUDIO_SPEAKER,
            Self::AudioRecorder => ffi::ASTAL_WP_MEDIA_CLASS_AUDIO_RECORDER,
            Self::AudioStream => ffi::ASTAL_WP_MEDIA_CLASS_AUDIO_STREAM,
            Self::VideoSource => ffi::ASTAL_WP_MEDIA_CLASS_VIDEO_SOURCE,
            Self::VideoSink => ffi::ASTAL_WP_MEDIA_CLASS_VIDEO_SINK,
            Self::VideoRecorder => ffi::ASTAL_WP_MEDIA_CLASS_VIDEO_RECORDER,
            Self::VideoStream => ffi::ASTAL_WP_MEDIA_CLASS_VIDEO_STREAM,
            Self::__Unknown(value) => value,
}
}
}

#[doc(hidden)]
impl FromGlib<ffi::AstalWpMediaClass> for MediaClass {
    #[inline]
unsafe fn from_glib(value: ffi::AstalWpMediaClass) -> Self {
        skip_assert_initialized!();
        
match value {
            ffi::ASTAL_WP_MEDIA_CLASS_AUDIO_MICROPHONE => Self::AudioMicrophone,
            ffi::ASTAL_WP_MEDIA_CLASS_AUDIO_SPEAKER => Self::AudioSpeaker,
            ffi::ASTAL_WP_MEDIA_CLASS_AUDIO_RECORDER => Self::AudioRecorder,
            ffi::ASTAL_WP_MEDIA_CLASS_AUDIO_STREAM => Self::AudioStream,
            ffi::ASTAL_WP_MEDIA_CLASS_VIDEO_SOURCE => Self::VideoSource,
            ffi::ASTAL_WP_MEDIA_CLASS_VIDEO_SINK => Self::VideoSink,
            ffi::ASTAL_WP_MEDIA_CLASS_VIDEO_RECORDER => Self::VideoRecorder,
            ffi::ASTAL_WP_MEDIA_CLASS_VIDEO_STREAM => Self::VideoStream,
            value => Self::__Unknown(value),
}
}
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AstalWpScale")]
pub enum Scale {
    #[doc(alias = "ASTAL_WP_SCALE_LINEAR")]
    Linear,
    #[doc(alias = "ASTAL_WP_SCALE_CUBIC")]
    Cubic,
#[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for Scale {
    type GlibType = ffi::AstalWpScale;

    #[inline]
fn into_glib(self) -> ffi::AstalWpScale {
match self {
            Self::Linear => ffi::ASTAL_WP_SCALE_LINEAR,
            Self::Cubic => ffi::ASTAL_WP_SCALE_CUBIC,
            Self::__Unknown(value) => value,
}
}
}

#[doc(hidden)]
impl FromGlib<ffi::AstalWpScale> for Scale {
    #[inline]
unsafe fn from_glib(value: ffi::AstalWpScale) -> Self {
        skip_assert_initialized!();
        
match value {
            ffi::ASTAL_WP_SCALE_LINEAR => Self::Linear,
            ffi::ASTAL_WP_SCALE_CUBIC => Self::Cubic,
            value => Self::__Unknown(value),
}
}
}

