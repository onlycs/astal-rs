// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../../gir/gir-files
// DO NOT EDIT

use crate::{ffi,MediaClass};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "AstalWpEndpoint")]
    pub struct Endpoint(Object<ffi::AstalWpEndpoint, ffi::AstalWpEndpointClass>);

    match fn {
        type_ => || ffi::astal_wp_endpoint_get_type(),
    }
}

impl Endpoint {
            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Endpoint`] objects.
            ///
            /// This method returns an instance of [`EndpointBuilder`](crate::builders::EndpointBuilder) which can be used to create [`Endpoint`] objects.
            pub fn builder() -> EndpointBuilder {
                EndpointBuilder::new()
            }
        

    #[doc(alias = "astal_wp_endpoint_get_description")]
    #[doc(alias = "get_description")]
    pub fn description(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_wp_endpoint_get_description(self.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_wp_endpoint_get_icon")]
    #[doc(alias = "get_icon")]
    pub fn icon(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_wp_endpoint_get_icon(self.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_wp_endpoint_get_id")]
    #[doc(alias = "get_id")]
    pub fn id(&self) -> u32 {
        unsafe {
            ffi::astal_wp_endpoint_get_id(self.to_glib_none().0)
        }
    }

    #[doc(alias = "astal_wp_endpoint_get_is_default")]
    #[doc(alias = "get_is_default")]
    #[doc(alias = "is-default")]
    pub fn is_default(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_wp_endpoint_get_is_default(self.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_wp_endpoint_get_lock_channels")]
    #[doc(alias = "get_lock_channels")]
    #[doc(alias = "lock-channels")]
    pub fn is_lock_channels(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_wp_endpoint_get_lock_channels(self.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_wp_endpoint_get_media_class")]
    #[doc(alias = "get_media_class")]
    #[doc(alias = "media-class")]
    pub fn media_class(&self) -> MediaClass {
        unsafe {
            from_glib(ffi::astal_wp_endpoint_get_media_class(self.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_wp_endpoint_get_mute")]
    #[doc(alias = "get_mute")]
    #[doc(alias = "mute")]
    pub fn is_muted(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_wp_endpoint_get_mute(self.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_wp_endpoint_get_name")]
    #[doc(alias = "get_name")]
    pub fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_wp_endpoint_get_name(self.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_wp_endpoint_get_volume")]
    #[doc(alias = "get_volume")]
    pub fn volume(&self) -> f64 {
        unsafe {
            ffi::astal_wp_endpoint_get_volume(self.to_glib_none().0)
        }
    }

    #[doc(alias = "astal_wp_endpoint_get_volume_icon")]
    #[doc(alias = "get_volume_icon")]
    #[doc(alias = "volume-icon")]
    pub fn volume_icon(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_wp_endpoint_get_volume_icon(self.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_wp_endpoint_set_is_default")]
    #[doc(alias = "is-default")]
    pub fn set_is_default(&self, is_default: bool) {
        unsafe {
            ffi::astal_wp_endpoint_set_is_default(self.to_glib_none().0, is_default.into_glib());
        }
    }

    #[doc(alias = "astal_wp_endpoint_set_lock_channels")]
    #[doc(alias = "lock-channels")]
    pub fn set_lock_channels(&self, lock_channels: bool) {
        unsafe {
            ffi::astal_wp_endpoint_set_lock_channels(self.to_glib_none().0, lock_channels.into_glib());
        }
    }

    #[doc(alias = "astal_wp_endpoint_set_mute")]
    #[doc(alias = "mute")]
    pub fn set_mute(&self, mute: bool) {
        unsafe {
            ffi::astal_wp_endpoint_set_mute(self.to_glib_none().0, mute.into_glib());
        }
    }

    #[doc(alias = "astal_wp_endpoint_set_volume")]
    #[doc(alias = "volume")]
    pub fn set_volume(&self, volume: f64) {
        unsafe {
            ffi::astal_wp_endpoint_set_volume(self.to_glib_none().0, volume);
        }
    }

    #[doc(alias = "description")]
    pub fn connect_description_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_description_trampoline<F: Fn(&Endpoint) + 'static>(this: *mut ffi::AstalWpEndpoint, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::description\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_description_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "id")]
    pub fn connect_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_id_trampoline<F: Fn(&Endpoint) + 'static>(this: *mut ffi::AstalWpEndpoint, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::id\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_id_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "is-default")]
    pub fn connect_is_default_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_is_default_trampoline<F: Fn(&Endpoint) + 'static>(this: *mut ffi::AstalWpEndpoint, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::is-default\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_is_default_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "lock-channels")]
    pub fn connect_lock_channels_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_lock_channels_trampoline<F: Fn(&Endpoint) + 'static>(this: *mut ffi::AstalWpEndpoint, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::lock-channels\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_lock_channels_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "media-class")]
    pub fn connect_media_class_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_media_class_trampoline<F: Fn(&Endpoint) + 'static>(this: *mut ffi::AstalWpEndpoint, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::media-class\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_media_class_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "mute")]
    pub fn connect_mute_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mute_trampoline<F: Fn(&Endpoint) + 'static>(this: *mut ffi::AstalWpEndpoint, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::mute\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_mute_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "name")]
    pub fn connect_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_trampoline<F: Fn(&Endpoint) + 'static>(this: *mut ffi::AstalWpEndpoint, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::name\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_name_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "volume")]
    pub fn connect_volume_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_volume_trampoline<F: Fn(&Endpoint) + 'static>(this: *mut ffi::AstalWpEndpoint, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::volume\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_volume_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "volume-icon")]
    pub fn connect_volume_icon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_volume_icon_trampoline<F: Fn(&Endpoint) + 'static>(this: *mut ffi::AstalWpEndpoint, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::volume-icon\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_volume_icon_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Endpoint`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct EndpointBuilder {
            builder: glib::object::ObjectBuilder<'static, Endpoint>,
        }

        impl EndpointBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn icon(self, icon: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("icon", icon.into()), }
                        }

                            pub fn is_default(self, is_default: bool) -> Self {
                            
                            Self { builder: self.builder.property("is-default", is_default), }
                        }

                            pub fn lock_channels(self, lock_channels: bool) -> Self {
                            
                            Self { builder: self.builder.property("lock-channels", lock_channels), }
                        }

                            pub fn mute(self, mute: bool) -> Self {
                            
                            Self { builder: self.builder.property("mute", mute), }
                        }

                            pub fn volume(self, volume: f64) -> Self {
                            
                            Self { builder: self.builder.property("volume", volume), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`Endpoint`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Endpoint {
assert_initialized_main_thread!();
    self.builder.build() }
}
