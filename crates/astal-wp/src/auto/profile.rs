// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../../gir/gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{prelude::*,translate::*};

glib::wrapper! {
    #[doc(alias = "AstalWpProfile")]
    pub struct Profile(Object<ffi::AstalWpProfile, ffi::AstalWpProfileClass>);

    match fn {
        type_ => || ffi::astal_wp_profile_get_type(),
    }
}

impl Profile {
            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Profile`] objects.
            ///
            /// This method returns an instance of [`ProfileBuilder`](crate::builders::ProfileBuilder) which can be used to create [`Profile`] objects.
            pub fn builder() -> ProfileBuilder {
                ProfileBuilder::new()
            }
        

    #[doc(alias = "astal_wp_profile_get_description")]
    #[doc(alias = "get_description")]
    pub fn description(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_wp_profile_get_description(self.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_wp_profile_get_index")]
    #[doc(alias = "get_index")]
    pub fn index(&self) -> i32 {
        unsafe {
            ffi::astal_wp_profile_get_index(self.to_glib_none().0)
        }
    }
}

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Profile`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct ProfileBuilder {
            builder: glib::object::ObjectBuilder<'static, Profile>,
        }

        impl ProfileBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn description(self, description: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("description", description.into()), }
                        }

                            pub fn index(self, index: i32) -> Self {
                            
                            Self { builder: self.builder.property("index", index), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`Profile`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Profile {
assert_initialized_main_thread!();
    self.builder.build() }
}
