// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../../gir/gir-files
// DO NOT EDIT

use crate::{ffi,DeviceType,Profile};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "AstalWpDevice")]
    pub struct Device(Object<ffi::AstalWpDevice, ffi::AstalWpDeviceClass>);

    match fn {
        type_ => || ffi::astal_wp_device_get_type(),
    }
}

impl Device {
            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Device`] objects.
            ///
            /// This method returns an instance of [`DeviceBuilder`](crate::builders::DeviceBuilder) which can be used to create [`Device`] objects.
            pub fn builder() -> DeviceBuilder {
                DeviceBuilder::new()
            }
        

    #[doc(alias = "astal_wp_device_get_active_profile")]
    #[doc(alias = "get_active_profile")]
    pub fn active_profile(&self) -> i32 {
        unsafe {
            ffi::astal_wp_device_get_active_profile(self.to_glib_none().0)
        }
    }

    #[doc(alias = "astal_wp_device_get_description")]
    #[doc(alias = "get_description")]
    pub fn description(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_wp_device_get_description(self.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_wp_device_get_device_type")]
    #[doc(alias = "get_device_type")]
    #[doc(alias = "device-type")]
    pub fn device_type(&self) -> DeviceType {
        unsafe {
            from_glib(ffi::astal_wp_device_get_device_type(self.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_wp_device_get_icon")]
    #[doc(alias = "get_icon")]
    pub fn icon(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_wp_device_get_icon(self.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_wp_device_get_id")]
    #[doc(alias = "get_id")]
    pub fn id(&self) -> u32 {
        unsafe {
            ffi::astal_wp_device_get_id(self.to_glib_none().0)
        }
    }

    #[doc(alias = "astal_wp_device_get_profile")]
    #[doc(alias = "get_profile")]
    pub fn profile(&self, id: i32) -> Option<Profile> {
        unsafe {
            from_glib_none(ffi::astal_wp_device_get_profile(self.to_glib_none().0, id))
        }
    }

    #[doc(alias = "astal_wp_device_get_profiles")]
    #[doc(alias = "get_profiles")]
    pub fn profiles(&self) -> Vec<Profile> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::astal_wp_device_get_profiles(self.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_wp_device_set_active_profile")]
    pub fn set_active_profile(&self, profile_id: i32) {
        unsafe {
            ffi::astal_wp_device_set_active_profile(self.to_glib_none().0, profile_id);
        }
    }

    #[doc(alias = "active-profile-id")]
    pub fn active_profile_id(&self) -> i32 {
        ObjectExt::property(self, "active-profile-id")
    }

    #[doc(alias = "active-profile-id")]
    pub fn set_active_profile_id(&self, active_profile_id: i32) {
        ObjectExt::set_property(self,"active-profile-id", active_profile_id)
    }

    #[doc(alias = "active-profile-id")]
    pub fn connect_active_profile_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_active_profile_id_trampoline<F: Fn(&Device) + 'static>(this: *mut ffi::AstalWpDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::active-profile-id\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_active_profile_id_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "description")]
    pub fn connect_description_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_description_trampoline<F: Fn(&Device) + 'static>(this: *mut ffi::AstalWpDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::description\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_description_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "device-type")]
    pub fn connect_device_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_device_type_trampoline<F: Fn(&Device) + 'static>(this: *mut ffi::AstalWpDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::device-type\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_device_type_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "icon")]
    pub fn connect_icon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_icon_trampoline<F: Fn(&Device) + 'static>(this: *mut ffi::AstalWpDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::icon\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_icon_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "id")]
    pub fn connect_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_id_trampoline<F: Fn(&Device) + 'static>(this: *mut ffi::AstalWpDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::id\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_id_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "profiles")]
    pub fn connect_profiles_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_profiles_trampoline<F: Fn(&Device) + 'static>(this: *mut ffi::AstalWpDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::profiles\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_profiles_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Device`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct DeviceBuilder {
            builder: glib::object::ObjectBuilder<'static, Device>,
        }

        impl DeviceBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn active_profile_id(self, active_profile_id: i32) -> Self {
                            
                            Self { builder: self.builder.property("active-profile-id", active_profile_id), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`Device`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Device {
assert_initialized_main_thread!();
    self.builder.build() }
}
