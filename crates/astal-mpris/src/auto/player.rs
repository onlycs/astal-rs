// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../../gir/gir-files
// DO NOT EDIT

use crate::{ffi,Loop,PlaybackStatus,Shuffle};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "AstalMprisPlayer")]
    pub struct Player(Object<ffi::AstalMprisPlayer, ffi::AstalMprisPlayerClass>);

    match fn {
        type_ => || ffi::astal_mpris_player_get_type(),
    }
}

impl Player {
        pub const NONE: Option<&'static Player> = None;
    

    #[doc(alias = "astal_mpris_player_new")]
    pub fn new(name: &str) -> Player {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::astal_mpris_player_new(name.to_glib_none().0))
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Player`] objects.
            ///
            /// This method returns an instance of [`PlayerBuilder`](crate::builders::PlayerBuilder) which can be used to create [`Player`] objects.
            pub fn builder() -> PlayerBuilder {
                PlayerBuilder::new()
            }
        
}

impl Default for Player {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Player`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct PlayerBuilder {
            builder: glib::object::ObjectBuilder<'static, Player>,
        }

        impl PlayerBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn bus_name(self, bus_name: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("bus-name", bus_name.into()), }
                        }

                            pub fn available(self, available: bool) -> Self {
                            
                            Self { builder: self.builder.property("available", available), }
                        }

                            pub fn can_quit(self, can_quit: bool) -> Self {
                            
                            Self { builder: self.builder.property("can-quit", can_quit), }
                        }

                            pub fn fullscreen(self, fullscreen: bool) -> Self {
                            
                            Self { builder: self.builder.property("fullscreen", fullscreen), }
                        }

                            pub fn can_set_fullscreen(self, can_set_fullscreen: bool) -> Self {
                            
                            Self { builder: self.builder.property("can-set-fullscreen", can_set_fullscreen), }
                        }

                            pub fn can_raise(self, can_raise: bool) -> Self {
                            
                            Self { builder: self.builder.property("can-raise", can_raise), }
                        }

                            pub fn has_track_list(self, has_track_list: bool) -> Self {
                            
                            Self { builder: self.builder.property("has-track-list", has_track_list), }
                        }

                            pub fn identity(self, identity: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("identity", identity.into()), }
                        }

                            pub fn entry(self, entry: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("entry", entry.into()), }
                        }

                            pub fn supported_uri_schemas(self, supported_uri_schemas: impl Into<glib::StrV>) -> Self {
                            
                            Self { builder: self.builder.property("supported-uri-schemas", supported_uri_schemas.into()), }
                        }

                            pub fn supported_mime_types(self, supported_mime_types: impl Into<glib::StrV>) -> Self {
                            
                            Self { builder: self.builder.property("supported-mime-types", supported_mime_types.into()), }
                        }

                            pub fn loop_status(self, loop_status: Loop) -> Self {
                            
                            Self { builder: self.builder.property("loop-status", loop_status), }
                        }

                            pub fn rate(self, rate: f64) -> Self {
                            
                            Self { builder: self.builder.property("rate", rate), }
                        }

                            pub fn shuffle_status(self, shuffle_status: Shuffle) -> Self {
                            
                            Self { builder: self.builder.property("shuffle-status", shuffle_status), }
                        }

                            pub fn volume(self, volume: f64) -> Self {
                            
                            Self { builder: self.builder.property("volume", volume), }
                        }

                            pub fn position(self, position: f64) -> Self {
                            
                            Self { builder: self.builder.property("position", position), }
                        }

                            pub fn playback_status(self, playback_status: PlaybackStatus) -> Self {
                            
                            Self { builder: self.builder.property("playback-status", playback_status), }
                        }

                            pub fn minimum_rate(self, minimum_rate: f64) -> Self {
                            
                            Self { builder: self.builder.property("minimum-rate", minimum_rate), }
                        }

                            pub fn maximum_rate(self, maximum_rate: f64) -> Self {
                            
                            Self { builder: self.builder.property("maximum-rate", maximum_rate), }
                        }

                            pub fn can_go_next(self, can_go_next: bool) -> Self {
                            
                            Self { builder: self.builder.property("can-go-next", can_go_next), }
                        }

                            pub fn can_go_previous(self, can_go_previous: bool) -> Self {
                            
                            Self { builder: self.builder.property("can-go-previous", can_go_previous), }
                        }

                            pub fn can_play(self, can_play: bool) -> Self {
                            
                            Self { builder: self.builder.property("can-play", can_play), }
                        }

                            pub fn can_pause(self, can_pause: bool) -> Self {
                            
                            Self { builder: self.builder.property("can-pause", can_pause), }
                        }

                            pub fn can_seek(self, can_seek: bool) -> Self {
                            
                            Self { builder: self.builder.property("can-seek", can_seek), }
                        }

                            pub fn can_control(self, can_control: bool) -> Self {
                            
                            Self { builder: self.builder.property("can-control", can_control), }
                        }

                            //pub fn metadata(self, metadata: /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 2, id: 226 }) -> Self {
                        //    
                        //    Self { builder: self.builder.property("metadata", metadata), }
                        //}

                            pub fn trackid(self, trackid: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("trackid", trackid.into()), }
                        }

                            pub fn length(self, length: f64) -> Self {
                            
                            Self { builder: self.builder.property("length", length), }
                        }

                            pub fn art_url(self, art_url: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("art-url", art_url.into()), }
                        }

                            pub fn album(self, album: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("album", album.into()), }
                        }

                            pub fn album_artist(self, album_artist: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("album-artist", album_artist.into()), }
                        }

                            pub fn artist(self, artist: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("artist", artist.into()), }
                        }

                            pub fn lyrics(self, lyrics: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("lyrics", lyrics.into()), }
                        }

                            pub fn title(self, title: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("title", title.into()), }
                        }

                            pub fn composer(self, composer: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("composer", composer.into()), }
                        }

                            pub fn comments(self, comments: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("comments", comments.into()), }
                        }

                            pub fn cover_art(self, cover_art: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("cover-art", cover_art.into()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`Player`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Player {
assert_initialized_main_thread!();
    self.builder.build() }
}

pub trait PlayerExt: IsA<Player> + 'static {
    #[doc(alias = "astal_mpris_player_raise")]
    fn raise(&self) {
        unsafe {
            ffi::astal_mpris_player_raise(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "astal_mpris_player_quit")]
    fn quit(&self) {
        unsafe {
            ffi::astal_mpris_player_quit(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "astal_mpris_player_toggle_fullscreen")]
    fn toggle_fullscreen(&self) {
        unsafe {
            ffi::astal_mpris_player_toggle_fullscreen(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "astal_mpris_player_next")]
    fn next(&self) {
        unsafe {
            ffi::astal_mpris_player_next(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "astal_mpris_player_previous")]
    fn previous(&self) {
        unsafe {
            ffi::astal_mpris_player_previous(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "astal_mpris_player_pause")]
    fn pause(&self) {
        unsafe {
            ffi::astal_mpris_player_pause(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "astal_mpris_player_play_pause")]
    fn play_pause(&self) {
        unsafe {
            ffi::astal_mpris_player_play_pause(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "astal_mpris_player_stop")]
    fn stop(&self) {
        unsafe {
            ffi::astal_mpris_player_stop(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "astal_mpris_player_play")]
    fn play(&self) {
        unsafe {
            ffi::astal_mpris_player_play(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "astal_mpris_player_open_uri")]
    fn open_uri(&self, uri: &str) {
        unsafe {
            ffi::astal_mpris_player_open_uri(self.as_ref().to_glib_none().0, uri.to_glib_none().0);
        }
    }

    #[doc(alias = "astal_mpris_player_loop")]
    #[doc(alias = "loop")]
    fn loop_(&self) {
        unsafe {
            ffi::astal_mpris_player_loop(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "astal_mpris_player_shuffle")]
    fn shuffle(&self) {
        unsafe {
            ffi::astal_mpris_player_shuffle(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "_astal_mpris_player_get_position")]
    fn _get_position(&self) -> f64 {
        unsafe {
            ffi::_astal_mpris_player_get_position(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_mpris_player_get_meta")]
    #[doc(alias = "get_meta")]
    fn meta(&self, key: &str) -> Option<glib::Variant> {
        unsafe {
            from_glib_full(ffi::astal_mpris_player_get_meta(self.as_ref().to_glib_none().0, key.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_mpris_player_try_proxy")]
    fn try_proxy(&self) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let _ = ffi::astal_mpris_player_try_proxy(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "astal_mpris_player_get_bus_name")]
    #[doc(alias = "get_bus_name")]
    fn bus_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_mpris_player_get_bus_name(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_mpris_player_set_bus_name")]
    fn set_bus_name(&self, value: &str) {
        unsafe {
            ffi::astal_mpris_player_set_bus_name(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "astal_mpris_player_get_available")]
    #[doc(alias = "get_available")]
    fn is_available(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_mpris_player_get_available(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_mpris_player_get_can_quit")]
    #[doc(alias = "get_can_quit")]
    fn can_quit(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_mpris_player_get_can_quit(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_mpris_player_get_fullscreen")]
    #[doc(alias = "get_fullscreen")]
    fn is_fullscreen(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_mpris_player_get_fullscreen(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_mpris_player_get_can_set_fullscreen")]
    #[doc(alias = "get_can_set_fullscreen")]
    fn can_set_fullscreen(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_mpris_player_get_can_set_fullscreen(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_mpris_player_get_can_raise")]
    #[doc(alias = "get_can_raise")]
    fn can_raise(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_mpris_player_get_can_raise(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_mpris_player_get_has_track_list")]
    #[doc(alias = "get_has_track_list")]
    fn has_track_list(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_mpris_player_get_has_track_list(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_mpris_player_get_identity")]
    #[doc(alias = "get_identity")]
    fn identity(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_mpris_player_get_identity(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_mpris_player_get_entry")]
    #[doc(alias = "get_entry")]
    fn entry(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_mpris_player_get_entry(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_mpris_player_get_supported_uri_schemas")]
    #[doc(alias = "get_supported_uri_schemas")]
    fn supported_uri_schemas(&self) -> Vec<glib::GString> {
        unsafe {
            let mut result_length1 = std::mem::MaybeUninit::uninit();
            let ret = FromGlibContainer::from_glib_full_num(ffi::astal_mpris_player_get_supported_uri_schemas(self.as_ref().to_glib_none().0, result_length1.as_mut_ptr()), result_length1.assume_init() as _);
            ret
        }
    }

    #[doc(alias = "astal_mpris_player_get_supported_mime_types")]
    #[doc(alias = "get_supported_mime_types")]
    fn supported_mime_types(&self) -> Vec<glib::GString> {
        unsafe {
            let mut result_length1 = std::mem::MaybeUninit::uninit();
            let ret = FromGlibContainer::from_glib_full_num(ffi::astal_mpris_player_get_supported_mime_types(self.as_ref().to_glib_none().0, result_length1.as_mut_ptr()), result_length1.assume_init() as _);
            ret
        }
    }

    #[doc(alias = "astal_mpris_player_get_loop_status")]
    #[doc(alias = "get_loop_status")]
    fn loop_status(&self) -> Loop {
        unsafe {
            from_glib(ffi::astal_mpris_player_get_loop_status(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_mpris_player_set_loop_status")]
    fn set_loop_status(&self, value: Loop) {
        unsafe {
            ffi::astal_mpris_player_set_loop_status(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "astal_mpris_player_get_rate")]
    #[doc(alias = "get_rate")]
    fn rate(&self) -> f64 {
        unsafe {
            ffi::astal_mpris_player_get_rate(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_mpris_player_set_rate")]
    fn set_rate(&self, value: f64) {
        unsafe {
            ffi::astal_mpris_player_set_rate(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "astal_mpris_player_get_shuffle_status")]
    #[doc(alias = "get_shuffle_status")]
    fn shuffle_status(&self) -> Shuffle {
        unsafe {
            from_glib(ffi::astal_mpris_player_get_shuffle_status(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_mpris_player_set_shuffle_status")]
    fn set_shuffle_status(&self, value: Shuffle) {
        unsafe {
            ffi::astal_mpris_player_set_shuffle_status(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "astal_mpris_player_get_volume")]
    #[doc(alias = "get_volume")]
    fn volume(&self) -> f64 {
        unsafe {
            ffi::astal_mpris_player_get_volume(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_mpris_player_set_volume")]
    fn set_volume(&self, value: f64) {
        unsafe {
            ffi::astal_mpris_player_set_volume(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "astal_mpris_player_get_position")]
    #[doc(alias = "get_position")]
    fn position(&self) -> f64 {
        unsafe {
            ffi::astal_mpris_player_get_position(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_mpris_player_set_position")]
    fn set_position(&self, value: f64) {
        unsafe {
            ffi::astal_mpris_player_set_position(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "astal_mpris_player_get_playback_status")]
    #[doc(alias = "get_playback_status")]
    fn playback_status(&self) -> PlaybackStatus {
        unsafe {
            from_glib(ffi::astal_mpris_player_get_playback_status(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_mpris_player_get_minimum_rate")]
    #[doc(alias = "get_minimum_rate")]
    fn minimum_rate(&self) -> f64 {
        unsafe {
            ffi::astal_mpris_player_get_minimum_rate(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_mpris_player_get_maximum_rate")]
    #[doc(alias = "get_maximum_rate")]
    fn maximum_rate(&self) -> f64 {
        unsafe {
            ffi::astal_mpris_player_get_maximum_rate(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_mpris_player_get_can_go_next")]
    #[doc(alias = "get_can_go_next")]
    fn can_go_next(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_mpris_player_get_can_go_next(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_mpris_player_get_can_go_previous")]
    #[doc(alias = "get_can_go_previous")]
    fn can_go_previous(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_mpris_player_get_can_go_previous(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_mpris_player_get_can_play")]
    #[doc(alias = "get_can_play")]
    fn can_play(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_mpris_player_get_can_play(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_mpris_player_get_can_pause")]
    #[doc(alias = "get_can_pause")]
    fn can_pause(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_mpris_player_get_can_pause(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_mpris_player_get_can_seek")]
    #[doc(alias = "get_can_seek")]
    fn can_seek(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_mpris_player_get_can_seek(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_mpris_player_get_can_control")]
    #[doc(alias = "get_can_control")]
    fn can_control(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_mpris_player_get_can_control(self.as_ref().to_glib_none().0))
        }
    }

    //#[doc(alias = "astal_mpris_player_get_metadata")]
    //#[doc(alias = "get_metadata")]
    //fn metadata(&self) -> /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 2, id: 226 } {
    //    unsafe { TODO: call ffi:astal_mpris_player_get_metadata() }
    //}

    #[doc(alias = "astal_mpris_player_get_trackid")]
    #[doc(alias = "get_trackid")]
    fn trackid(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_mpris_player_get_trackid(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_mpris_player_get_length")]
    #[doc(alias = "get_length")]
    fn length(&self) -> f64 {
        unsafe {
            ffi::astal_mpris_player_get_length(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_mpris_player_get_art_url")]
    #[doc(alias = "get_art_url")]
    fn art_url(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_mpris_player_get_art_url(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_mpris_player_get_album")]
    #[doc(alias = "get_album")]
    fn album(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_mpris_player_get_album(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_mpris_player_get_album_artist")]
    #[doc(alias = "get_album_artist")]
    fn album_artist(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_mpris_player_get_album_artist(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_mpris_player_get_artist")]
    #[doc(alias = "get_artist")]
    fn artist(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_mpris_player_get_artist(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_mpris_player_get_lyrics")]
    #[doc(alias = "get_lyrics")]
    fn lyrics(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_mpris_player_get_lyrics(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_mpris_player_get_title")]
    #[doc(alias = "get_title")]
    fn title(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_mpris_player_get_title(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_mpris_player_get_composer")]
    #[doc(alias = "get_composer")]
    fn composer(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_mpris_player_get_composer(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_mpris_player_get_comments")]
    #[doc(alias = "get_comments")]
    fn comments(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_mpris_player_get_comments(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_mpris_player_get_cover_art")]
    #[doc(alias = "get_cover_art")]
    fn cover_art(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_mpris_player_get_cover_art(self.as_ref().to_glib_none().0))
        }
    }

    fn set_available(&self, available: bool) {
        ObjectExt::set_property(self.as_ref(),"available", available)
    }

    #[doc(alias = "can-quit")]
    fn set_can_quit(&self, can_quit: bool) {
        ObjectExt::set_property(self.as_ref(),"can-quit", can_quit)
    }

    fn set_fullscreen(&self, fullscreen: bool) {
        ObjectExt::set_property(self.as_ref(),"fullscreen", fullscreen)
    }

    #[doc(alias = "can-set-fullscreen")]
    fn set_can_set_fullscreen(&self, can_set_fullscreen: bool) {
        ObjectExt::set_property(self.as_ref(),"can-set-fullscreen", can_set_fullscreen)
    }

    #[doc(alias = "can-raise")]
    fn set_can_raise(&self, can_raise: bool) {
        ObjectExt::set_property(self.as_ref(),"can-raise", can_raise)
    }

    #[doc(alias = "has-track-list")]
    fn set_has_track_list(&self, has_track_list: bool) {
        ObjectExt::set_property(self.as_ref(),"has-track-list", has_track_list)
    }

    fn set_identity(&self, identity: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"identity", identity)
    }

    fn set_entry(&self, entry: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"entry", entry)
    }

    #[doc(alias = "supported-uri-schemas")]
    fn set_supported_uri_schemas(&self, supported_uri_schemas: &[&str]) {
        ObjectExt::set_property(self.as_ref(),"supported-uri-schemas", supported_uri_schemas)
    }

    #[doc(alias = "supported-mime-types")]
    fn set_supported_mime_types(&self, supported_mime_types: &[&str]) {
        ObjectExt::set_property(self.as_ref(),"supported-mime-types", supported_mime_types)
    }

    #[doc(alias = "playback-status")]
    fn set_playback_status(&self, playback_status: PlaybackStatus) {
        ObjectExt::set_property(self.as_ref(),"playback-status", playback_status)
    }

    #[doc(alias = "minimum-rate")]
    fn set_minimum_rate(&self, minimum_rate: f64) {
        ObjectExt::set_property(self.as_ref(),"minimum-rate", minimum_rate)
    }

    #[doc(alias = "maximum-rate")]
    fn set_maximum_rate(&self, maximum_rate: f64) {
        ObjectExt::set_property(self.as_ref(),"maximum-rate", maximum_rate)
    }

    #[doc(alias = "can-go-next")]
    fn set_can_go_next(&self, can_go_next: bool) {
        ObjectExt::set_property(self.as_ref(),"can-go-next", can_go_next)
    }

    #[doc(alias = "can-go-previous")]
    fn set_can_go_previous(&self, can_go_previous: bool) {
        ObjectExt::set_property(self.as_ref(),"can-go-previous", can_go_previous)
    }

    #[doc(alias = "can-play")]
    fn set_can_play(&self, can_play: bool) {
        ObjectExt::set_property(self.as_ref(),"can-play", can_play)
    }

    #[doc(alias = "can-pause")]
    fn set_can_pause(&self, can_pause: bool) {
        ObjectExt::set_property(self.as_ref(),"can-pause", can_pause)
    }

    #[doc(alias = "can-seek")]
    fn set_can_seek(&self, can_seek: bool) {
        ObjectExt::set_property(self.as_ref(),"can-seek", can_seek)
    }

    #[doc(alias = "can-control")]
    fn set_can_control(&self, can_control: bool) {
        ObjectExt::set_property(self.as_ref(),"can-control", can_control)
    }

    //fn set_metadata(&self, metadata: /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 2, id: 226 }) {
    //    ObjectExt::set_property(self.as_ref(),"metadata", metadata)
    //}

    fn set_trackid(&self, trackid: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"trackid", trackid)
    }

    fn set_length(&self, length: f64) {
        ObjectExt::set_property(self.as_ref(),"length", length)
    }

    #[doc(alias = "art-url")]
    fn set_art_url(&self, art_url: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"art-url", art_url)
    }

    fn set_album(&self, album: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"album", album)
    }

    #[doc(alias = "album-artist")]
    fn set_album_artist(&self, album_artist: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"album-artist", album_artist)
    }

    fn set_artist(&self, artist: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"artist", artist)
    }

    fn set_lyrics(&self, lyrics: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"lyrics", lyrics)
    }

    fn set_title(&self, title: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"title", title)
    }

    fn set_composer(&self, composer: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"composer", composer)
    }

    fn set_comments(&self, comments: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"comments", comments)
    }

    #[doc(alias = "cover-art")]
    fn set_cover_art(&self, cover_art: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"cover-art", cover_art)
    }

    #[doc(alias = "appeared")]
    fn connect_appeared<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn appeared_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"appeared\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(appeared_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "closed")]
    fn connect_closed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn closed_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"closed\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(closed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "seeked")]
    fn connect_seeked<F: Fn(&Self, i64) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn seeked_trampoline<P: IsA<Player>, F: Fn(&P, i64) + 'static>(this: *mut ffi::AstalMprisPlayer, position: i64, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref(), position)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"seeked\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(seeked_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "bus-name")]
    fn connect_bus_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_bus_name_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::bus-name\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_bus_name_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "available")]
    fn connect_available_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_available_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::available\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_available_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "can-quit")]
    fn connect_can_quit_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_can_quit_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::can-quit\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_can_quit_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "fullscreen")]
    fn connect_fullscreen_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_fullscreen_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::fullscreen\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_fullscreen_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "can-set-fullscreen")]
    fn connect_can_set_fullscreen_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_can_set_fullscreen_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::can-set-fullscreen\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_can_set_fullscreen_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "can-raise")]
    fn connect_can_raise_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_can_raise_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::can-raise\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_can_raise_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "has-track-list")]
    fn connect_has_track_list_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_has_track_list_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::has-track-list\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_has_track_list_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "identity")]
    fn connect_identity_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_identity_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::identity\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_identity_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "entry")]
    fn connect_entry_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_entry_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::entry\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_entry_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "supported-uri-schemas")]
    fn connect_supported_uri_schemas_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_supported_uri_schemas_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::supported-uri-schemas\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_supported_uri_schemas_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "supported-mime-types")]
    fn connect_supported_mime_types_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_supported_mime_types_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::supported-mime-types\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_supported_mime_types_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "loop-status")]
    fn connect_loop_status_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_loop_status_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::loop-status\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_loop_status_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "rate")]
    fn connect_rate_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_rate_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::rate\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_rate_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "shuffle-status")]
    fn connect_shuffle_status_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_shuffle_status_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::shuffle-status\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_shuffle_status_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "volume")]
    fn connect_volume_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_volume_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::volume\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_volume_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "position")]
    fn connect_position_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_position_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::position\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_position_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "playback-status")]
    fn connect_playback_status_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_playback_status_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::playback-status\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_playback_status_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "minimum-rate")]
    fn connect_minimum_rate_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_minimum_rate_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::minimum-rate\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_minimum_rate_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "maximum-rate")]
    fn connect_maximum_rate_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_maximum_rate_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::maximum-rate\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_maximum_rate_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "can-go-next")]
    fn connect_can_go_next_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_can_go_next_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::can-go-next\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_can_go_next_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "can-go-previous")]
    fn connect_can_go_previous_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_can_go_previous_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::can-go-previous\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_can_go_previous_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "can-play")]
    fn connect_can_play_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_can_play_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::can-play\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_can_play_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "can-pause")]
    fn connect_can_pause_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_can_pause_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::can-pause\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_can_pause_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "can-seek")]
    fn connect_can_seek_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_can_seek_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::can-seek\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_can_seek_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "can-control")]
    fn connect_can_control_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_can_control_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::can-control\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_can_control_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "metadata")]
    fn connect_metadata_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_metadata_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::metadata\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_metadata_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "trackid")]
    fn connect_trackid_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_trackid_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::trackid\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_trackid_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "length")]
    fn connect_length_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_length_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::length\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_length_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "art-url")]
    fn connect_art_url_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_art_url_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::art-url\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_art_url_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "album")]
    fn connect_album_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_album_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::album\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_album_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "album-artist")]
    fn connect_album_artist_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_album_artist_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::album-artist\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_album_artist_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "artist")]
    fn connect_artist_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_artist_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::artist\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_artist_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "lyrics")]
    fn connect_lyrics_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_lyrics_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::lyrics\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_lyrics_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "title")]
    fn connect_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_title_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::title\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_title_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "composer")]
    fn connect_composer_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_composer_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::composer\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_composer_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "comments")]
    fn connect_comments_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_comments_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::comments\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_comments_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "cover-art")]
    fn connect_cover_art_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cover_art_trampoline<P: IsA<Player>, F: Fn(&P) + 'static>(this: *mut ffi::AstalMprisPlayer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Player::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::cover-art\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_cover_art_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Player>> PlayerExt for O {}
