// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../../gir/gir-files
// DO NOT EDIT

use crate::{ffi,Workspace};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "AstalHyprlandMonitor")]
    pub struct Monitor(Object<ffi::AstalHyprlandMonitor, ffi::AstalHyprlandMonitorClass>);

    match fn {
        type_ => || ffi::astal_hyprland_monitor_get_type(),
    }
}

impl Monitor {
        pub const NONE: Option<&'static Monitor> = None;
    

    #[doc(alias = "astal_hyprland_monitor_new")]
    pub fn new() -> Monitor {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::astal_hyprland_monitor_new())
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Monitor`] objects.
            ///
            /// This method returns an instance of [`MonitorBuilder`](crate::builders::MonitorBuilder) which can be used to create [`Monitor`] objects.
            pub fn builder() -> MonitorBuilder {
                MonitorBuilder::new()
            }
        
}

impl Default for Monitor {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Monitor`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct MonitorBuilder {
            builder: glib::object::ObjectBuilder<'static, Monitor>,
        }

        impl MonitorBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn id(self, id: i32) -> Self {
                            
                            Self { builder: self.builder.property("id", id), }
                        }

                            pub fn name(self, name: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("name", name.into()), }
                        }

                            pub fn description(self, description: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("description", description.into()), }
                        }

                            pub fn make(self, make: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("make", make.into()), }
                        }

                            pub fn model(self, model: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("model", model.into()), }
                        }

                            pub fn serial(self, serial: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("serial", serial.into()), }
                        }

                            pub fn width(self, width: i32) -> Self {
                            
                            Self { builder: self.builder.property("width", width), }
                        }

                            pub fn height(self, height: i32) -> Self {
                            
                            Self { builder: self.builder.property("height", height), }
                        }

                            pub fn refresh_rate(self, refresh_rate: f64) -> Self {
                            
                            Self { builder: self.builder.property("refresh-rate", refresh_rate), }
                        }

                            pub fn x(self, x: i32) -> Self {
                            
                            Self { builder: self.builder.property("x", x), }
                        }

                            pub fn y(self, y: i32) -> Self {
                            
                            Self { builder: self.builder.property("y", y), }
                        }

                            pub fn active_workspace(self, active_workspace: &impl IsA<Workspace>) -> Self {
                            
                            Self { builder: self.builder.property("active-workspace", active_workspace.clone().upcast()), }
                        }

                            pub fn special_workspace(self, special_workspace: &impl IsA<Workspace>) -> Self {
                            
                            Self { builder: self.builder.property("special-workspace", special_workspace.clone().upcast()), }
                        }

                            pub fn reserved_top(self, reserved_top: i32) -> Self {
                            
                            Self { builder: self.builder.property("reserved-top", reserved_top), }
                        }

                            pub fn reserved_bottom(self, reserved_bottom: i32) -> Self {
                            
                            Self { builder: self.builder.property("reserved-bottom", reserved_bottom), }
                        }

                            pub fn reserved_left(self, reserved_left: i32) -> Self {
                            
                            Self { builder: self.builder.property("reserved-left", reserved_left), }
                        }

                            pub fn reserved_right(self, reserved_right: i32) -> Self {
                            
                            Self { builder: self.builder.property("reserved-right", reserved_right), }
                        }

                            pub fn scale(self, scale: f64) -> Self {
                            
                            Self { builder: self.builder.property("scale", scale), }
                        }

                            pub fn focused(self, focused: bool) -> Self {
                            
                            Self { builder: self.builder.property("focused", focused), }
                        }

                            pub fn dpms_status(self, dpms_status: bool) -> Self {
                            
                            Self { builder: self.builder.property("dpms-status", dpms_status), }
                        }

                            pub fn vrr(self, vrr: bool) -> Self {
                            
                            Self { builder: self.builder.property("vrr", vrr), }
                        }

                            pub fn actively_tearing(self, actively_tearing: bool) -> Self {
                            
                            Self { builder: self.builder.property("actively-tearing", actively_tearing), }
                        }

                            pub fn disabled(self, disabled: bool) -> Self {
                            
                            Self { builder: self.builder.property("disabled", disabled), }
                        }

                            pub fn current_format(self, current_format: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("current-format", current_format.into()), }
                        }

                            //pub fn available_modes(self, available_modes: /*Unimplemented*/Array TypeId { ns_id: 0, id: 28 }) -> Self {
                        //    
                        //    Self { builder: self.builder.property("available-modes", available_modes), }
                        //}

    // rustdoc-stripper-ignore-next
    /// Build the [`Monitor`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Monitor {
assert_initialized_main_thread!();
    self.builder.build() }
}

pub trait MonitorExt: IsA<Monitor> + 'static {
    #[doc(alias = "astal_hyprland_monitor_focus")]
    fn focus(&self) {
        unsafe {
            ffi::astal_hyprland_monitor_focus(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "astal_hyprland_monitor_get_id")]
    #[doc(alias = "get_id")]
    fn id(&self) -> i32 {
        unsafe {
            ffi::astal_hyprland_monitor_get_id(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_hyprland_monitor_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_hyprland_monitor_get_name(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_monitor_get_description")]
    #[doc(alias = "get_description")]
    fn description(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_hyprland_monitor_get_description(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_monitor_get_make")]
    #[doc(alias = "get_make")]
    fn make(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_hyprland_monitor_get_make(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_monitor_get_model")]
    #[doc(alias = "get_model")]
    fn model(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_hyprland_monitor_get_model(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_monitor_get_serial")]
    #[doc(alias = "get_serial")]
    fn serial(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_hyprland_monitor_get_serial(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_monitor_get_width")]
    #[doc(alias = "get_width")]
    fn width(&self) -> i32 {
        unsafe {
            ffi::astal_hyprland_monitor_get_width(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_hyprland_monitor_get_height")]
    #[doc(alias = "get_height")]
    fn height(&self) -> i32 {
        unsafe {
            ffi::astal_hyprland_monitor_get_height(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_hyprland_monitor_get_refresh_rate")]
    #[doc(alias = "get_refresh_rate")]
    fn refresh_rate(&self) -> f64 {
        unsafe {
            ffi::astal_hyprland_monitor_get_refresh_rate(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_hyprland_monitor_get_x")]
    #[doc(alias = "get_x")]
    fn x(&self) -> i32 {
        unsafe {
            ffi::astal_hyprland_monitor_get_x(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_hyprland_monitor_get_y")]
    #[doc(alias = "get_y")]
    fn y(&self) -> i32 {
        unsafe {
            ffi::astal_hyprland_monitor_get_y(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_hyprland_monitor_get_active_workspace")]
    #[doc(alias = "get_active_workspace")]
    fn active_workspace(&self) -> Option<Workspace> {
        unsafe {
            from_glib_none(ffi::astal_hyprland_monitor_get_active_workspace(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_monitor_get_special_workspace")]
    #[doc(alias = "get_special_workspace")]
    fn special_workspace(&self) -> Option<Workspace> {
        unsafe {
            from_glib_none(ffi::astal_hyprland_monitor_get_special_workspace(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_monitor_get_reserved_top")]
    #[doc(alias = "get_reserved_top")]
    fn reserved_top(&self) -> i32 {
        unsafe {
            ffi::astal_hyprland_monitor_get_reserved_top(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_hyprland_monitor_get_reserved_bottom")]
    #[doc(alias = "get_reserved_bottom")]
    fn reserved_bottom(&self) -> i32 {
        unsafe {
            ffi::astal_hyprland_monitor_get_reserved_bottom(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_hyprland_monitor_get_reserved_left")]
    #[doc(alias = "get_reserved_left")]
    fn reserved_left(&self) -> i32 {
        unsafe {
            ffi::astal_hyprland_monitor_get_reserved_left(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_hyprland_monitor_get_reserved_right")]
    #[doc(alias = "get_reserved_right")]
    fn reserved_right(&self) -> i32 {
        unsafe {
            ffi::astal_hyprland_monitor_get_reserved_right(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_hyprland_monitor_get_scale")]
    #[doc(alias = "get_scale")]
    fn scale(&self) -> f64 {
        unsafe {
            ffi::astal_hyprland_monitor_get_scale(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_hyprland_monitor_get_focused")]
    #[doc(alias = "get_focused")]
    fn is_focused(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_hyprland_monitor_get_focused(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_monitor_get_dpms_status")]
    #[doc(alias = "get_dpms_status")]
    fn is_dpms_status(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_hyprland_monitor_get_dpms_status(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_monitor_get_vrr")]
    #[doc(alias = "get_vrr")]
    fn is_vrr(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_hyprland_monitor_get_vrr(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_monitor_get_actively_tearing")]
    #[doc(alias = "get_actively_tearing")]
    fn is_actively_tearing(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_hyprland_monitor_get_actively_tearing(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_monitor_get_disabled")]
    #[doc(alias = "get_disabled")]
    fn is_disabled(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_hyprland_monitor_get_disabled(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_monitor_get_current_format")]
    #[doc(alias = "get_current_format")]
    fn current_format(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_hyprland_monitor_get_current_format(self.as_ref().to_glib_none().0))
        }
    }

    //#[doc(alias = "astal_hyprland_monitor_get_available_modes")]
    //#[doc(alias = "get_available_modes")]
    //fn available_modes(&self) -> /*Unknown conversion*//*Unimplemented*/Array TypeId { ns_id: 0, id: 28 } {
    //    unsafe { TODO: call ffi:astal_hyprland_monitor_get_available_modes() }
    //}

    fn set_id(&self, id: i32) {
        ObjectExt::set_property(self.as_ref(),"id", id)
    }

    fn set_name(&self, name: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"name", name)
    }

    fn set_description(&self, description: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"description", description)
    }

    fn set_make(&self, make: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"make", make)
    }

    fn set_model(&self, model: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"model", model)
    }

    fn set_serial(&self, serial: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"serial", serial)
    }

    fn set_width(&self, width: i32) {
        ObjectExt::set_property(self.as_ref(),"width", width)
    }

    fn set_height(&self, height: i32) {
        ObjectExt::set_property(self.as_ref(),"height", height)
    }

    #[doc(alias = "refresh-rate")]
    fn set_refresh_rate(&self, refresh_rate: f64) {
        ObjectExt::set_property(self.as_ref(),"refresh-rate", refresh_rate)
    }

    fn set_x(&self, x: i32) {
        ObjectExt::set_property(self.as_ref(),"x", x)
    }

    fn set_y(&self, y: i32) {
        ObjectExt::set_property(self.as_ref(),"y", y)
    }

    #[doc(alias = "active-workspace")]
    fn set_active_workspace<P: IsA<Workspace>>(&self, active_workspace: Option<&P>) {
        ObjectExt::set_property(self.as_ref(),"active-workspace", active_workspace)
    }

    #[doc(alias = "special-workspace")]
    fn set_special_workspace<P: IsA<Workspace>>(&self, special_workspace: Option<&P>) {
        ObjectExt::set_property(self.as_ref(),"special-workspace", special_workspace)
    }

    #[doc(alias = "reserved-top")]
    fn set_reserved_top(&self, reserved_top: i32) {
        ObjectExt::set_property(self.as_ref(),"reserved-top", reserved_top)
    }

    #[doc(alias = "reserved-bottom")]
    fn set_reserved_bottom(&self, reserved_bottom: i32) {
        ObjectExt::set_property(self.as_ref(),"reserved-bottom", reserved_bottom)
    }

    #[doc(alias = "reserved-left")]
    fn set_reserved_left(&self, reserved_left: i32) {
        ObjectExt::set_property(self.as_ref(),"reserved-left", reserved_left)
    }

    #[doc(alias = "reserved-right")]
    fn set_reserved_right(&self, reserved_right: i32) {
        ObjectExt::set_property(self.as_ref(),"reserved-right", reserved_right)
    }

    fn set_scale(&self, scale: f64) {
        ObjectExt::set_property(self.as_ref(),"scale", scale)
    }

    fn set_focused(&self, focused: bool) {
        ObjectExt::set_property(self.as_ref(),"focused", focused)
    }

    #[doc(alias = "dpms-status")]
    fn set_dpms_status(&self, dpms_status: bool) {
        ObjectExt::set_property(self.as_ref(),"dpms-status", dpms_status)
    }

    fn set_vrr(&self, vrr: bool) {
        ObjectExt::set_property(self.as_ref(),"vrr", vrr)
    }

    #[doc(alias = "actively-tearing")]
    fn set_actively_tearing(&self, actively_tearing: bool) {
        ObjectExt::set_property(self.as_ref(),"actively-tearing", actively_tearing)
    }

    fn set_disabled(&self, disabled: bool) {
        ObjectExt::set_property(self.as_ref(),"disabled", disabled)
    }

    #[doc(alias = "current-format")]
    fn set_current_format(&self, current_format: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"current-format", current_format)
    }

    //#[doc(alias = "available-modes")]
    //fn set_available_modes(&self, available_modes: /*Unimplemented*/Array TypeId { ns_id: 0, id: 28 }) {
    //    ObjectExt::set_property(self.as_ref(),"available-modes", available_modes)
    //}

    #[doc(alias = "removed")]
    fn connect_removed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn removed_trampoline<P: IsA<Monitor>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandMonitor, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Monitor::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"removed\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(removed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "id")]
    fn connect_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_id_trampoline<P: IsA<Monitor>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandMonitor, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Monitor::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::id\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_id_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "name")]
    fn connect_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_trampoline<P: IsA<Monitor>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandMonitor, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Monitor::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::name\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_name_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "description")]
    fn connect_description_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_description_trampoline<P: IsA<Monitor>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandMonitor, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Monitor::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::description\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_description_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "make")]
    fn connect_make_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_make_trampoline<P: IsA<Monitor>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandMonitor, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Monitor::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::make\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_make_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "model")]
    fn connect_model_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_model_trampoline<P: IsA<Monitor>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandMonitor, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Monitor::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::model\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_model_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "serial")]
    fn connect_serial_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_serial_trampoline<P: IsA<Monitor>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandMonitor, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Monitor::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::serial\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_serial_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "width")]
    fn connect_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_width_trampoline<P: IsA<Monitor>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandMonitor, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Monitor::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::width\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_width_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "height")]
    fn connect_height_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_height_trampoline<P: IsA<Monitor>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandMonitor, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Monitor::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::height\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_height_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "refresh-rate")]
    fn connect_refresh_rate_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_refresh_rate_trampoline<P: IsA<Monitor>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandMonitor, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Monitor::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::refresh-rate\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_refresh_rate_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "x")]
    fn connect_x_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_x_trampoline<P: IsA<Monitor>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandMonitor, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Monitor::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::x\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_x_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "y")]
    fn connect_y_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_y_trampoline<P: IsA<Monitor>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandMonitor, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Monitor::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::y\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_y_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "active-workspace")]
    fn connect_active_workspace_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_active_workspace_trampoline<P: IsA<Monitor>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandMonitor, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Monitor::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::active-workspace\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_active_workspace_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "special-workspace")]
    fn connect_special_workspace_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_special_workspace_trampoline<P: IsA<Monitor>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandMonitor, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Monitor::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::special-workspace\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_special_workspace_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "reserved-top")]
    fn connect_reserved_top_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_reserved_top_trampoline<P: IsA<Monitor>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandMonitor, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Monitor::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::reserved-top\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_reserved_top_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "reserved-bottom")]
    fn connect_reserved_bottom_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_reserved_bottom_trampoline<P: IsA<Monitor>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandMonitor, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Monitor::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::reserved-bottom\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_reserved_bottom_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "reserved-left")]
    fn connect_reserved_left_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_reserved_left_trampoline<P: IsA<Monitor>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandMonitor, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Monitor::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::reserved-left\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_reserved_left_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "reserved-right")]
    fn connect_reserved_right_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_reserved_right_trampoline<P: IsA<Monitor>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandMonitor, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Monitor::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::reserved-right\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_reserved_right_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "scale")]
    fn connect_scale_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_scale_trampoline<P: IsA<Monitor>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandMonitor, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Monitor::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::scale\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_scale_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "focused")]
    fn connect_focused_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_focused_trampoline<P: IsA<Monitor>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandMonitor, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Monitor::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::focused\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_focused_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "dpms-status")]
    fn connect_dpms_status_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_dpms_status_trampoline<P: IsA<Monitor>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandMonitor, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Monitor::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::dpms-status\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_dpms_status_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "vrr")]
    fn connect_vrr_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_vrr_trampoline<P: IsA<Monitor>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandMonitor, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Monitor::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::vrr\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_vrr_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "actively-tearing")]
    fn connect_actively_tearing_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_actively_tearing_trampoline<P: IsA<Monitor>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandMonitor, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Monitor::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::actively-tearing\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_actively_tearing_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "disabled")]
    fn connect_disabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_disabled_trampoline<P: IsA<Monitor>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandMonitor, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Monitor::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::disabled\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_disabled_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "current-format")]
    fn connect_current_format_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_current_format_trampoline<P: IsA<Monitor>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandMonitor, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Monitor::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::current-format\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_current_format_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "available-modes")]
    fn connect_available_modes_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_available_modes_trampoline<P: IsA<Monitor>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandMonitor, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Monitor::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::available-modes\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_available_modes_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Monitor>> MonitorExt for O {}
