// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../../gir/gir-files
// DO NOT EDIT

use crate::{ffi,Bind,Client,Monitor,Position,Workspace};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "AstalHyprlandHyprland")]
    pub struct Hyprland(Object<ffi::AstalHyprlandHyprland, ffi::AstalHyprlandHyprlandClass>);

    match fn {
        type_ => || ffi::astal_hyprland_hyprland_get_type(),
    }
}

impl Hyprland {
        pub const NONE: Option<&'static Hyprland> = None;
    

    #[doc(alias = "astal_hyprland_hyprland_new")]
    pub fn new() -> Hyprland {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::astal_hyprland_hyprland_new())
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Hyprland`] objects.
            ///
            /// This method returns an instance of [`HyprlandBuilder`](crate::builders::HyprlandBuilder) which can be used to create [`Hyprland`] objects.
            pub fn builder() -> HyprlandBuilder {
                HyprlandBuilder::new()
            }
        

    #[doc(alias = "astal_hyprland_hyprland_get_default")]
    #[doc(alias = "get_default")]
    #[allow(clippy::should_implement_trait)]    pub fn default() -> Option<Hyprland> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::astal_hyprland_hyprland_get_default())
        }
    }
}

impl Default for Hyprland {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Hyprland`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct HyprlandBuilder {
            builder: glib::object::ObjectBuilder<'static, Hyprland>,
        }

        impl HyprlandBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn focused_workspace(self, focused_workspace: &impl IsA<Workspace>) -> Self {
                            
                            Self { builder: self.builder.property("focused-workspace", focused_workspace.clone().upcast()), }
                        }

                            pub fn focused_monitor(self, focused_monitor: &impl IsA<Monitor>) -> Self {
                            
                            Self { builder: self.builder.property("focused-monitor", focused_monitor.clone().upcast()), }
                        }

                            pub fn focused_client(self, focused_client: &impl IsA<Client>) -> Self {
                            
                            Self { builder: self.builder.property("focused-client", focused_client.clone().upcast()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`Hyprland`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Hyprland {
assert_initialized_main_thread!();
    self.builder.build() }
}

pub trait HyprlandExt: IsA<Hyprland> + 'static {
    #[doc(alias = "astal_hyprland_hyprland_get_monitor")]
    #[doc(alias = "get_monitor")]
    fn monitor(&self, id: i32) -> Option<Monitor> {
        unsafe {
            from_glib_full(ffi::astal_hyprland_hyprland_get_monitor(self.as_ref().to_glib_none().0, id))
        }
    }

    #[doc(alias = "astal_hyprland_hyprland_get_workspace")]
    #[doc(alias = "get_workspace")]
    fn workspace(&self, id: i32) -> Option<Workspace> {
        unsafe {
            from_glib_full(ffi::astal_hyprland_hyprland_get_workspace(self.as_ref().to_glib_none().0, id))
        }
    }

    #[doc(alias = "astal_hyprland_hyprland_get_client")]
    #[doc(alias = "get_client")]
    fn client(&self, address: &str) -> Option<Client> {
        unsafe {
            from_glib_full(ffi::astal_hyprland_hyprland_get_client(self.as_ref().to_glib_none().0, address.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_hyprland_get_monitor_by_name")]
    #[doc(alias = "get_monitor_by_name")]
    fn monitor_by_name(&self, name: &str) -> Option<Monitor> {
        unsafe {
            from_glib_full(ffi::astal_hyprland_hyprland_get_monitor_by_name(self.as_ref().to_glib_none().0, name.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_hyprland_get_workspace_by_name")]
    #[doc(alias = "get_workspace_by_name")]
    fn workspace_by_name(&self, name: &str) -> Option<Workspace> {
        unsafe {
            from_glib_full(ffi::astal_hyprland_hyprland_get_workspace_by_name(self.as_ref().to_glib_none().0, name.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_hyprland_message")]
    fn message(&self, message: &str) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_hyprland_hyprland_message(self.as_ref().to_glib_none().0, message.to_glib_none().0))
        }
    }

    //#[doc(alias = "astal_hyprland_hyprland_message_async")]
    //fn message_async(&self, message: &str, _callback_: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:astal_hyprland_hyprland_message_async() }
    //}

    #[doc(alias = "astal_hyprland_hyprland_dispatch")]
    fn dispatch(&self, dispatcher: &str, args: &str) {
        unsafe {
            ffi::astal_hyprland_hyprland_dispatch(self.as_ref().to_glib_none().0, dispatcher.to_glib_none().0, args.to_glib_none().0);
        }
    }

    #[doc(alias = "astal_hyprland_hyprland_move_cursor")]
    fn move_cursor(&self, x: i32, y: i32) {
        unsafe {
            ffi::astal_hyprland_hyprland_move_cursor(self.as_ref().to_glib_none().0, x, y);
        }
    }

    //#[doc(alias = "astal_hyprland_hyprland_sync_monitors")]
    //fn sync_monitors(&self, _callback_: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:astal_hyprland_hyprland_sync_monitors() }
    //}

    //#[doc(alias = "astal_hyprland_hyprland_sync_workspaces")]
    //fn sync_workspaces(&self, _callback_: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:astal_hyprland_hyprland_sync_workspaces() }
    //}

    //#[doc(alias = "astal_hyprland_hyprland_sync_clients")]
    //fn sync_clients(&self, _callback_: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:astal_hyprland_hyprland_sync_clients() }
    //}

    #[doc(alias = "astal_hyprland_hyprland_get_monitors")]
    #[doc(alias = "get_monitors")]
    fn monitors(&self) -> Vec<Monitor> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::astal_hyprland_hyprland_get_monitors(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_hyprland_get_workspaces")]
    #[doc(alias = "get_workspaces")]
    fn workspaces(&self) -> Vec<Workspace> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::astal_hyprland_hyprland_get_workspaces(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_hyprland_get_clients")]
    #[doc(alias = "get_clients")]
    fn clients(&self) -> Vec<Client> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::astal_hyprland_hyprland_get_clients(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_hyprland_get_focused_workspace")]
    #[doc(alias = "get_focused_workspace")]
    fn focused_workspace(&self) -> Option<Workspace> {
        unsafe {
            from_glib_none(ffi::astal_hyprland_hyprland_get_focused_workspace(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_hyprland_get_focused_monitor")]
    #[doc(alias = "get_focused_monitor")]
    fn focused_monitor(&self) -> Option<Monitor> {
        unsafe {
            from_glib_none(ffi::astal_hyprland_hyprland_get_focused_monitor(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_hyprland_get_focused_client")]
    #[doc(alias = "get_focused_client")]
    fn focused_client(&self) -> Option<Client> {
        unsafe {
            from_glib_none(ffi::astal_hyprland_hyprland_get_focused_client(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_hyprland_get_binds")]
    #[doc(alias = "get_binds")]
    fn binds(&self) -> Vec<Bind> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::astal_hyprland_hyprland_get_binds(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_hyprland_get_cursor_position")]
    #[doc(alias = "get_cursor_position")]
    fn cursor_position(&self) -> Option<Position> {
        unsafe {
            from_glib_full(ffi::astal_hyprland_hyprland_get_cursor_position(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "focused-workspace")]
    fn set_focused_workspace<P: IsA<Workspace>>(&self, focused_workspace: Option<&P>) {
        ObjectExt::set_property(self.as_ref(),"focused-workspace", focused_workspace)
    }

    #[doc(alias = "focused-monitor")]
    fn set_focused_monitor<P: IsA<Monitor>>(&self, focused_monitor: Option<&P>) {
        ObjectExt::set_property(self.as_ref(),"focused-monitor", focused_monitor)
    }

    #[doc(alias = "focused-client")]
    fn set_focused_client<P: IsA<Client>>(&self, focused_client: Option<&P>) {
        ObjectExt::set_property(self.as_ref(),"focused-client", focused_client)
    }

    #[doc(alias = "event")]
    fn connect_event<F: Fn(&Self, &str, &str) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn event_trampoline<P: IsA<Hyprland>, F: Fn(&P, &str, &str) + 'static>(this: *mut ffi::AstalHyprlandHyprland, event: *const std::ffi::c_char, args: *const std::ffi::c_char, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Hyprland::from_glib_borrow(this).unsafe_cast_ref(), &glib::GString::from_glib_borrow(event), &glib::GString::from_glib_borrow(args))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"event\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(event_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "minimize")]
    fn connect_minimize<F: Fn(&Self, &Client, bool) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn minimize_trampoline<P: IsA<Hyprland>, F: Fn(&P, &Client, bool) + 'static>(this: *mut ffi::AstalHyprlandHyprland, client: *mut ffi::AstalHyprlandClient, minimize: glib::ffi::gboolean, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Hyprland::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(client), from_glib(minimize))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"minimize\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(minimize_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "floating")]
    fn connect_floating<F: Fn(&Self, &Client, bool) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn floating_trampoline<P: IsA<Hyprland>, F: Fn(&P, &Client, bool) + 'static>(this: *mut ffi::AstalHyprlandHyprland, client: *mut ffi::AstalHyprlandClient, floating: glib::ffi::gboolean, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Hyprland::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(client), from_glib(floating))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"floating\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(floating_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "urgent")]
    fn connect_urgent<F: Fn(&Self, &Client) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn urgent_trampoline<P: IsA<Hyprland>, F: Fn(&P, &Client) + 'static>(this: *mut ffi::AstalHyprlandHyprland, client: *mut ffi::AstalHyprlandClient, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Hyprland::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(client))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"urgent\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(urgent_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "client-moved")]
    fn connect_client_moved<F: Fn(&Self, &Client, &Workspace) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn client_moved_trampoline<P: IsA<Hyprland>, F: Fn(&P, &Client, &Workspace) + 'static>(this: *mut ffi::AstalHyprlandHyprland, client: *mut ffi::AstalHyprlandClient, ws: *mut ffi::AstalHyprlandWorkspace, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Hyprland::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(client), &from_glib_borrow(ws))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"client-moved\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(client_moved_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "submap")]
    fn connect_submap<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn submap_trampoline<P: IsA<Hyprland>, F: Fn(&P, &str) + 'static>(this: *mut ffi::AstalHyprlandHyprland, name: *const std::ffi::c_char, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Hyprland::from_glib_borrow(this).unsafe_cast_ref(), &glib::GString::from_glib_borrow(name))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"submap\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(submap_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "keyboard-layout")]
    fn connect_keyboard_layout<F: Fn(&Self, &str, &str) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn keyboard_layout_trampoline<P: IsA<Hyprland>, F: Fn(&P, &str, &str) + 'static>(this: *mut ffi::AstalHyprlandHyprland, keyboard: *const std::ffi::c_char, layout: *const std::ffi::c_char, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Hyprland::from_glib_borrow(this).unsafe_cast_ref(), &glib::GString::from_glib_borrow(keyboard), &glib::GString::from_glib_borrow(layout))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"keyboard-layout\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(keyboard_layout_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "config-reloaded")]
    fn connect_config_reloaded<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn config_reloaded_trampoline<P: IsA<Hyprland>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandHyprland, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Hyprland::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"config-reloaded\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(config_reloaded_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "client-added")]
    fn connect_client_added<F: Fn(&Self, &Client) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn client_added_trampoline<P: IsA<Hyprland>, F: Fn(&P, &Client) + 'static>(this: *mut ffi::AstalHyprlandHyprland, client: *mut ffi::AstalHyprlandClient, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Hyprland::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(client))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"client-added\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(client_added_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "client-removed")]
    fn connect_client_removed<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn client_removed_trampoline<P: IsA<Hyprland>, F: Fn(&P, &str) + 'static>(this: *mut ffi::AstalHyprlandHyprland, address: *const std::ffi::c_char, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Hyprland::from_glib_borrow(this).unsafe_cast_ref(), &glib::GString::from_glib_borrow(address))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"client-removed\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(client_removed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "workspace-added")]
    fn connect_workspace_added<F: Fn(&Self, &Workspace) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn workspace_added_trampoline<P: IsA<Hyprland>, F: Fn(&P, &Workspace) + 'static>(this: *mut ffi::AstalHyprlandHyprland, workspace: *mut ffi::AstalHyprlandWorkspace, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Hyprland::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(workspace))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"workspace-added\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(workspace_added_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "workspace-removed")]
    fn connect_workspace_removed<F: Fn(&Self, i32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn workspace_removed_trampoline<P: IsA<Hyprland>, F: Fn(&P, i32) + 'static>(this: *mut ffi::AstalHyprlandHyprland, id: std::ffi::c_int, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Hyprland::from_glib_borrow(this).unsafe_cast_ref(), id)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"workspace-removed\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(workspace_removed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "monitor-added")]
    fn connect_monitor_added<F: Fn(&Self, &Monitor) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn monitor_added_trampoline<P: IsA<Hyprland>, F: Fn(&P, &Monitor) + 'static>(this: *mut ffi::AstalHyprlandHyprland, monitor: *mut ffi::AstalHyprlandMonitor, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Hyprland::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(monitor))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"monitor-added\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(monitor_added_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "monitor-removed")]
    fn connect_monitor_removed<F: Fn(&Self, i32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn monitor_removed_trampoline<P: IsA<Hyprland>, F: Fn(&P, i32) + 'static>(this: *mut ffi::AstalHyprlandHyprland, id: std::ffi::c_int, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Hyprland::from_glib_borrow(this).unsafe_cast_ref(), id)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"monitor-removed\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(monitor_removed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "monitors")]
    fn connect_monitors_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_monitors_trampoline<P: IsA<Hyprland>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandHyprland, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Hyprland::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::monitors\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_monitors_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "workspaces")]
    fn connect_workspaces_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_workspaces_trampoline<P: IsA<Hyprland>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandHyprland, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Hyprland::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::workspaces\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_workspaces_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "clients")]
    fn connect_clients_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_clients_trampoline<P: IsA<Hyprland>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandHyprland, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Hyprland::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::clients\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_clients_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "focused-workspace")]
    fn connect_focused_workspace_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_focused_workspace_trampoline<P: IsA<Hyprland>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandHyprland, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Hyprland::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::focused-workspace\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_focused_workspace_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "focused-monitor")]
    fn connect_focused_monitor_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_focused_monitor_trampoline<P: IsA<Hyprland>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandHyprland, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Hyprland::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::focused-monitor\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_focused_monitor_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "focused-client")]
    fn connect_focused_client_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_focused_client_trampoline<P: IsA<Hyprland>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandHyprland, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Hyprland::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::focused-client\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_focused_client_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "binds")]
    fn connect_binds_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_binds_trampoline<P: IsA<Hyprland>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandHyprland, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Hyprland::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::binds\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_binds_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "cursor-position")]
    fn connect_cursor_position_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cursor_position_trampoline<P: IsA<Hyprland>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandHyprland, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Hyprland::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::cursor-position\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_cursor_position_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Hyprland>> HyprlandExt for O {}
