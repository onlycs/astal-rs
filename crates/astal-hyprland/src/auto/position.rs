// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../../gir/gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "AstalHyprlandPosition")]
    pub struct Position(Object<ffi::AstalHyprlandPosition, ffi::AstalHyprlandPositionClass>);

    match fn {
        type_ => || ffi::astal_hyprland_position_get_type(),
    }
}

impl Position {
        pub const NONE: Option<&'static Position> = None;
    

    #[doc(alias = "astal_hyprland_position_new")]
    pub fn new() -> Position {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::astal_hyprland_position_new())
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Position`] objects.
            ///
            /// This method returns an instance of [`PositionBuilder`](crate::builders::PositionBuilder) which can be used to create [`Position`] objects.
            pub fn builder() -> PositionBuilder {
                PositionBuilder::new()
            }
        
}

impl Default for Position {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Position`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct PositionBuilder {
            builder: glib::object::ObjectBuilder<'static, Position>,
        }

        impl PositionBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn x(self, x: i32) -> Self {
                            
                            Self { builder: self.builder.property("x", x), }
                        }

                            pub fn y(self, y: i32) -> Self {
                            
                            Self { builder: self.builder.property("y", y), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`Position`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Position {
assert_initialized_main_thread!();
    self.builder.build() }
}

pub trait PositionExt: IsA<Position> + 'static {
    #[doc(alias = "astal_hyprland_position_get_x")]
    #[doc(alias = "get_x")]
    fn x(&self) -> i32 {
        unsafe {
            ffi::astal_hyprland_position_get_x(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_hyprland_position_set_x")]
    fn set_x(&self, value: i32) {
        unsafe {
            ffi::astal_hyprland_position_set_x(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "astal_hyprland_position_get_y")]
    #[doc(alias = "get_y")]
    fn y(&self) -> i32 {
        unsafe {
            ffi::astal_hyprland_position_get_y(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_hyprland_position_set_y")]
    fn set_y(&self, value: i32) {
        unsafe {
            ffi::astal_hyprland_position_set_y(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "x")]
    fn connect_x_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_x_trampoline<P: IsA<Position>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandPosition, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Position::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::x\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_x_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "y")]
    fn connect_y_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_y_trampoline<P: IsA<Position>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandPosition, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Position::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::y\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_y_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Position>> PositionExt for O {}
