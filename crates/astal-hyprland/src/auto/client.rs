// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../../gir/gir-files
// DO NOT EDIT

use crate::{ffi,Fullscreen,Monitor,Workspace};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "AstalHyprlandClient")]
    pub struct Client(Object<ffi::AstalHyprlandClient, ffi::AstalHyprlandClientClass>);

    match fn {
        type_ => || ffi::astal_hyprland_client_get_type(),
    }
}

impl Client {
        pub const NONE: Option<&'static Client> = None;
    

    #[doc(alias = "astal_hyprland_client_new")]
    pub fn new() -> Client {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::astal_hyprland_client_new())
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Client`] objects.
            ///
            /// This method returns an instance of [`ClientBuilder`](crate::builders::ClientBuilder) which can be used to create [`Client`] objects.
            pub fn builder() -> ClientBuilder {
                ClientBuilder::new()
            }
        
}

impl Default for Client {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Client`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct ClientBuilder {
            builder: glib::object::ObjectBuilder<'static, Client>,
        }

        impl ClientBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn address(self, address: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("address", address.into()), }
                        }

                            pub fn mapped(self, mapped: bool) -> Self {
                            
                            Self { builder: self.builder.property("mapped", mapped), }
                        }

                            pub fn hidden(self, hidden: bool) -> Self {
                            
                            Self { builder: self.builder.property("hidden", hidden), }
                        }

                            pub fn x(self, x: i32) -> Self {
                            
                            Self { builder: self.builder.property("x", x), }
                        }

                            pub fn y(self, y: i32) -> Self {
                            
                            Self { builder: self.builder.property("y", y), }
                        }

                            pub fn width(self, width: i32) -> Self {
                            
                            Self { builder: self.builder.property("width", width), }
                        }

                            pub fn height(self, height: i32) -> Self {
                            
                            Self { builder: self.builder.property("height", height), }
                        }

                            pub fn workspace(self, workspace: &impl IsA<Workspace>) -> Self {
                            
                            Self { builder: self.builder.property("workspace", workspace.clone().upcast()), }
                        }

                            pub fn floating(self, floating: bool) -> Self {
                            
                            Self { builder: self.builder.property("floating", floating), }
                        }

                            pub fn monitor(self, monitor: &impl IsA<Monitor>) -> Self {
                            
                            Self { builder: self.builder.property("monitor", monitor.clone().upcast()), }
                        }

                            pub fn class(self, class: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("class", class.into()), }
                        }

                            pub fn title(self, title: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("title", title.into()), }
                        }

                            pub fn initial_class(self, initial_class: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("initial-class", initial_class.into()), }
                        }

                            pub fn initial_title(self, initial_title: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("initial-title", initial_title.into()), }
                        }

                            pub fn pid(self, pid: u32) -> Self {
                            
                            Self { builder: self.builder.property("pid", pid), }
                        }

                            pub fn xwayland(self, xwayland: bool) -> Self {
                            
                            Self { builder: self.builder.property("xwayland", xwayland), }
                        }

                            pub fn pinned(self, pinned: bool) -> Self {
                            
                            Self { builder: self.builder.property("pinned", pinned), }
                        }

                            pub fn fullscreen(self, fullscreen: Fullscreen) -> Self {
                            
                            Self { builder: self.builder.property("fullscreen", fullscreen), }
                        }

                            pub fn fullscreen_client(self, fullscreen_client: Fullscreen) -> Self {
                            
                            Self { builder: self.builder.property("fullscreen-client", fullscreen_client), }
                        }

                            pub fn swallowing(self, swallowing: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("swallowing", swallowing.into()), }
                        }

                            pub fn focus_history_id(self, focus_history_id: i32) -> Self {
                            
                            Self { builder: self.builder.property("focus-history-id", focus_history_id), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`Client`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Client {
assert_initialized_main_thread!();
    self.builder.build() }
}

pub trait ClientExt: IsA<Client> + 'static {
    #[doc(alias = "astal_hyprland_client_kill")]
    fn kill(&self) {
        unsafe {
            ffi::astal_hyprland_client_kill(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "astal_hyprland_client_focus")]
    fn focus(&self) {
        unsafe {
            ffi::astal_hyprland_client_focus(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "astal_hyprland_client_move_to")]
    fn move_to(&self, ws: &impl IsA<Workspace>) {
        unsafe {
            ffi::astal_hyprland_client_move_to(self.as_ref().to_glib_none().0, ws.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "astal_hyprland_client_toggle_floating")]
    fn toggle_floating(&self) {
        unsafe {
            ffi::astal_hyprland_client_toggle_floating(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "astal_hyprland_client_get_address")]
    #[doc(alias = "get_address")]
    fn address(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_hyprland_client_get_address(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_client_get_mapped")]
    #[doc(alias = "get_mapped")]
    fn is_mapped(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_hyprland_client_get_mapped(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_client_get_hidden")]
    #[doc(alias = "get_hidden")]
    fn is_hidden(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_hyprland_client_get_hidden(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_client_get_x")]
    #[doc(alias = "get_x")]
    fn x(&self) -> i32 {
        unsafe {
            ffi::astal_hyprland_client_get_x(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_hyprland_client_get_y")]
    #[doc(alias = "get_y")]
    fn y(&self) -> i32 {
        unsafe {
            ffi::astal_hyprland_client_get_y(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_hyprland_client_get_width")]
    #[doc(alias = "get_width")]
    fn width(&self) -> i32 {
        unsafe {
            ffi::astal_hyprland_client_get_width(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_hyprland_client_get_height")]
    #[doc(alias = "get_height")]
    fn height(&self) -> i32 {
        unsafe {
            ffi::astal_hyprland_client_get_height(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_hyprland_client_get_workspace")]
    #[doc(alias = "get_workspace")]
    fn workspace(&self) -> Option<Workspace> {
        unsafe {
            from_glib_none(ffi::astal_hyprland_client_get_workspace(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_client_get_floating")]
    #[doc(alias = "get_floating")]
    fn is_floating(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_hyprland_client_get_floating(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_client_get_monitor")]
    #[doc(alias = "get_monitor")]
    fn monitor(&self) -> Option<Monitor> {
        unsafe {
            from_glib_none(ffi::astal_hyprland_client_get_monitor(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_client_get_class")]
    #[doc(alias = "get_class")]
    fn class(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_hyprland_client_get_class(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_client_get_title")]
    #[doc(alias = "get_title")]
    fn title(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_hyprland_client_get_title(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_client_get_initial_class")]
    #[doc(alias = "get_initial_class")]
    fn initial_class(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_hyprland_client_get_initial_class(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_client_get_initial_title")]
    #[doc(alias = "get_initial_title")]
    fn initial_title(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_hyprland_client_get_initial_title(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_client_get_pid")]
    #[doc(alias = "get_pid")]
    fn pid(&self) -> u32 {
        unsafe {
            ffi::astal_hyprland_client_get_pid(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_hyprland_client_get_xwayland")]
    #[doc(alias = "get_xwayland")]
    fn is_xwayland(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_hyprland_client_get_xwayland(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_client_get_pinned")]
    #[doc(alias = "get_pinned")]
    fn is_pinned(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_hyprland_client_get_pinned(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_client_get_fullscreen")]
    #[doc(alias = "get_fullscreen")]
    fn fullscreen(&self) -> Fullscreen {
        unsafe {
            from_glib(ffi::astal_hyprland_client_get_fullscreen(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_client_get_fullscreen_client")]
    #[doc(alias = "get_fullscreen_client")]
    fn fullscreen_client(&self) -> Fullscreen {
        unsafe {
            from_glib(ffi::astal_hyprland_client_get_fullscreen_client(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_client_get_swallowing")]
    #[doc(alias = "get_swallowing")]
    fn swallowing(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_hyprland_client_get_swallowing(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_hyprland_client_get_focus_history_id")]
    #[doc(alias = "get_focus_history_id")]
    fn focus_history_id(&self) -> i32 {
        unsafe {
            ffi::astal_hyprland_client_get_focus_history_id(self.as_ref().to_glib_none().0)
        }
    }

    fn set_address(&self, address: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"address", address)
    }

    fn set_mapped(&self, mapped: bool) {
        ObjectExt::set_property(self.as_ref(),"mapped", mapped)
    }

    fn set_hidden(&self, hidden: bool) {
        ObjectExt::set_property(self.as_ref(),"hidden", hidden)
    }

    fn set_x(&self, x: i32) {
        ObjectExt::set_property(self.as_ref(),"x", x)
    }

    fn set_y(&self, y: i32) {
        ObjectExt::set_property(self.as_ref(),"y", y)
    }

    fn set_width(&self, width: i32) {
        ObjectExt::set_property(self.as_ref(),"width", width)
    }

    fn set_height(&self, height: i32) {
        ObjectExt::set_property(self.as_ref(),"height", height)
    }

    fn set_workspace<P: IsA<Workspace>>(&self, workspace: Option<&P>) {
        ObjectExt::set_property(self.as_ref(),"workspace", workspace)
    }

    fn set_floating(&self, floating: bool) {
        ObjectExt::set_property(self.as_ref(),"floating", floating)
    }

    fn set_monitor<P: IsA<Monitor>>(&self, monitor: Option<&P>) {
        ObjectExt::set_property(self.as_ref(),"monitor", monitor)
    }

    fn set_class(&self, class: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"class", class)
    }

    fn set_title(&self, title: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"title", title)
    }

    #[doc(alias = "initial-class")]
    fn set_initial_class(&self, initial_class: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"initial-class", initial_class)
    }

    #[doc(alias = "initial-title")]
    fn set_initial_title(&self, initial_title: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"initial-title", initial_title)
    }

    fn set_pid(&self, pid: u32) {
        ObjectExt::set_property(self.as_ref(),"pid", pid)
    }

    fn set_xwayland(&self, xwayland: bool) {
        ObjectExt::set_property(self.as_ref(),"xwayland", xwayland)
    }

    fn set_pinned(&self, pinned: bool) {
        ObjectExt::set_property(self.as_ref(),"pinned", pinned)
    }

    fn set_fullscreen(&self, fullscreen: Fullscreen) {
        ObjectExt::set_property(self.as_ref(),"fullscreen", fullscreen)
    }

    #[doc(alias = "fullscreen-client")]
    fn set_fullscreen_client(&self, fullscreen_client: Fullscreen) {
        ObjectExt::set_property(self.as_ref(),"fullscreen-client", fullscreen_client)
    }

    fn set_swallowing(&self, swallowing: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"swallowing", swallowing)
    }

    #[doc(alias = "focus-history-id")]
    fn set_focus_history_id(&self, focus_history_id: i32) {
        ObjectExt::set_property(self.as_ref(),"focus-history-id", focus_history_id)
    }

    #[doc(alias = "removed")]
    fn connect_removed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn removed_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandClient, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"removed\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(removed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "moved-to")]
    fn connect_moved_to<F: Fn(&Self, &Workspace) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn moved_to_trampoline<P: IsA<Client>, F: Fn(&P, &Workspace) + 'static>(this: *mut ffi::AstalHyprlandClient, workspace: *mut ffi::AstalHyprlandWorkspace, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(workspace))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"moved-to\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(moved_to_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "address")]
    fn connect_address_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_address_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::address\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_address_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "mapped")]
    fn connect_mapped_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mapped_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::mapped\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_mapped_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "hidden")]
    fn connect_hidden_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_hidden_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::hidden\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_hidden_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "x")]
    fn connect_x_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_x_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::x\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_x_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "y")]
    fn connect_y_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_y_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::y\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_y_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "width")]
    fn connect_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_width_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::width\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_width_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "height")]
    fn connect_height_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_height_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::height\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_height_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "workspace")]
    fn connect_workspace_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_workspace_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::workspace\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_workspace_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "floating")]
    fn connect_floating_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_floating_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::floating\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_floating_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "monitor")]
    fn connect_monitor_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_monitor_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::monitor\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_monitor_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "class")]
    fn connect_class_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_class_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::class\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_class_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "title")]
    fn connect_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_title_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::title\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_title_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "initial-class")]
    fn connect_initial_class_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_initial_class_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::initial-class\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_initial_class_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "initial-title")]
    fn connect_initial_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_initial_title_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::initial-title\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_initial_title_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "pid")]
    fn connect_pid_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_pid_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::pid\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_pid_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "xwayland")]
    fn connect_xwayland_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_xwayland_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::xwayland\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_xwayland_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "pinned")]
    fn connect_pinned_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_pinned_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::pinned\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_pinned_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "fullscreen")]
    fn connect_fullscreen_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_fullscreen_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::fullscreen\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_fullscreen_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "fullscreen-client")]
    fn connect_fullscreen_client_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_fullscreen_client_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::fullscreen-client\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_fullscreen_client_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "swallowing")]
    fn connect_swallowing_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_swallowing_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::swallowing\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_swallowing_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "focus-history-id")]
    fn connect_focus_history_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_focus_history_id_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::AstalHyprlandClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::focus-history-id\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_focus_history_id_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Client>> ClientExt for O {}
