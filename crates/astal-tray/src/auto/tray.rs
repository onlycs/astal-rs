// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../../gir/gir-files
// DO NOT EDIT

use crate::{ffi,TrayItem};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "AstalTrayTray")]
    pub struct Tray(Object<ffi::AstalTrayTray, ffi::AstalTrayTrayClass>);

    match fn {
        type_ => || ffi::astal_tray_tray_get_type(),
    }
}

impl Tray {
        pub const NONE: Option<&'static Tray> = None;
    

    #[doc(alias = "astal_tray_tray_new")]
    pub fn new() -> Tray {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::astal_tray_tray_new())
        }
    }

    #[doc(alias = "astal_tray_tray_get_default")]
    #[doc(alias = "get_default")]
    #[allow(clippy::should_implement_trait)]    pub fn default() -> Option<Tray> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::astal_tray_tray_get_default())
        }
    }
}

impl Default for Tray {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

pub trait TrayExt: IsA<Tray> + 'static {
    #[doc(alias = "astal_tray_tray_get_item")]
    #[doc(alias = "get_item")]
    fn item(&self, item_id: &str) -> Option<TrayItem> {
        unsafe {
            from_glib_full(ffi::astal_tray_tray_get_item(self.as_ref().to_glib_none().0, item_id.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_tray_tray_get_items")]
    #[doc(alias = "get_items")]
    fn items(&self) -> Vec<TrayItem> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::astal_tray_tray_get_items(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "item-added")]
    fn connect_item_added<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn item_added_trampoline<P: IsA<Tray>, F: Fn(&P, &str) + 'static>(this: *mut ffi::AstalTrayTray, item_id: *const std::ffi::c_char, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Tray::from_glib_borrow(this).unsafe_cast_ref(), &glib::GString::from_glib_borrow(item_id))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"item-added\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(item_added_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "item-removed")]
    fn connect_item_removed<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn item_removed_trampoline<P: IsA<Tray>, F: Fn(&P, &str) + 'static>(this: *mut ffi::AstalTrayTray, item_id: *const std::ffi::c_char, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Tray::from_glib_borrow(this).unsafe_cast_ref(), &glib::GString::from_glib_borrow(item_id))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"item-removed\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(item_removed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "items")]
    fn connect_items_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_items_trampoline<P: IsA<Tray>, F: Fn(&P) + 'static>(this: *mut ffi::AstalTrayTray, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Tray::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::items\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_items_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Tray>> TrayExt for O {}
