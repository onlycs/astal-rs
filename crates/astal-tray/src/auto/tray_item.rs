// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../../gir/gir-files
// DO NOT EDIT

use crate::{ffi,Category,Status,Tooltip};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "AstalTrayTrayItem")]
    pub struct TrayItem(Object<ffi::AstalTrayTrayItem, ffi::AstalTrayTrayItemClass>);

    match fn {
        type_ => || ffi::astal_tray_tray_item_get_type(),
    }
}

impl TrayItem {
        pub const NONE: Option<&'static TrayItem> = None;
    

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`TrayItem`] objects.
            ///
            /// This method returns an instance of [`TrayItemBuilder`](crate::builders::TrayItemBuilder) which can be used to create [`TrayItem`] objects.
            pub fn builder() -> TrayItemBuilder {
                TrayItemBuilder::new()
            }
        
}

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`TrayItem`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct TrayItemBuilder {
            builder: glib::object::ObjectBuilder<'static, TrayItem>,
        }

        impl TrayItemBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn gicon(self, gicon: &impl IsA<gio::Icon>) -> Self {
                            
                            Self { builder: self.builder.property("gicon", gicon.clone().upcast()), }
                        }

                            pub fn item_id(self, item_id: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("item-id", item_id.into()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`TrayItem`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> TrayItem {
assert_initialized_main_thread!();
    self.builder.build() }
}

pub trait TrayItemExt: IsA<TrayItem> + 'static {
    #[doc(alias = "astal_tray_tray_item_about_to_show")]
    fn about_to_show(&self) {
        unsafe {
            ffi::astal_tray_tray_item_about_to_show(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "astal_tray_tray_item_activate")]
    fn activate(&self, x: i32, y: i32) {
        unsafe {
            ffi::astal_tray_tray_item_activate(self.as_ref().to_glib_none().0, x, y);
        }
    }

    #[doc(alias = "astal_tray_tray_item_secondary_activate")]
    fn secondary_activate(&self, x: i32, y: i32) {
        unsafe {
            ffi::astal_tray_tray_item_secondary_activate(self.as_ref().to_glib_none().0, x, y);
        }
    }

    #[doc(alias = "astal_tray_tray_item_scroll")]
    fn scroll(&self, delta: i32, orientation: &str) {
        unsafe {
            ffi::astal_tray_tray_item_scroll(self.as_ref().to_glib_none().0, delta, orientation.to_glib_none().0);
        }
    }

    #[doc(alias = "astal_tray_tray_item_to_json_string")]
    fn to_json_string(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_tray_tray_item_to_json_string(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_tray_tray_item_get_title")]
    #[doc(alias = "get_title")]
    fn title(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_tray_tray_item_get_title(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_tray_tray_item_get_category")]
    #[doc(alias = "get_category")]
    fn category(&self) -> Category {
        unsafe {
            from_glib(ffi::astal_tray_tray_item_get_category(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_tray_tray_item_get_status")]
    #[doc(alias = "get_status")]
    fn status(&self) -> Status {
        unsafe {
            from_glib(ffi::astal_tray_tray_item_get_status(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_tray_tray_item_get_tooltip")]
    #[doc(alias = "get_tooltip")]
    fn tooltip(&self) -> Option<Tooltip> {
        unsafe {
            from_glib_full(ffi::astal_tray_tray_item_get_tooltip(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_tray_tray_item_get_tooltip_markup")]
    #[doc(alias = "get_tooltip_markup")]
    fn tooltip_markup(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_tray_tray_item_get_tooltip_markup(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_tray_tray_item_get_id")]
    #[doc(alias = "get_id")]
    fn id(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_tray_tray_item_get_id(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_tray_tray_item_get_is_menu")]
    #[doc(alias = "get_is_menu")]
    fn is_menu(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_tray_tray_item_get_is_menu(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_tray_tray_item_get_icon_theme_path")]
    #[doc(alias = "get_icon_theme_path")]
    fn icon_theme_path(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_tray_tray_item_get_icon_theme_path(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_tray_tray_item_get_icon_name")]
    #[doc(alias = "get_icon_name")]
    fn icon_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_tray_tray_item_get_icon_name(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_tray_tray_item_get_icon_pixbuf")]
    #[doc(alias = "get_icon_pixbuf")]
    fn icon_pixbuf(&self) -> Option<gdk_pixbuf::Pixbuf> {
        unsafe {
            from_glib_full(ffi::astal_tray_tray_item_get_icon_pixbuf(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_tray_tray_item_get_gicon")]
    #[doc(alias = "get_gicon")]
    fn gicon(&self) -> Option<gio::Icon> {
        unsafe {
            from_glib_none(ffi::astal_tray_tray_item_get_gicon(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_tray_tray_item_get_item_id")]
    #[doc(alias = "get_item_id")]
    fn item_id(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_tray_tray_item_get_item_id(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_tray_tray_item_get_menu_model")]
    #[doc(alias = "get_menu_model")]
    fn menu_model(&self) -> Option<gio::MenuModel> {
        unsafe {
            from_glib_full(ffi::astal_tray_tray_item_get_menu_model(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_tray_tray_item_get_action_group")]
    #[doc(alias = "get_action_group")]
    fn action_group(&self) -> Option<gio::ActionGroup> {
        unsafe {
            from_glib_full(ffi::astal_tray_tray_item_get_action_group(self.as_ref().to_glib_none().0))
        }
    }

    fn set_gicon<P: IsA<gio::Icon>>(&self, gicon: Option<&P>) {
        ObjectExt::set_property(self.as_ref(),"gicon", gicon)
    }

    #[doc(alias = "item-id")]
    fn set_item_id(&self, item_id: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"item-id", item_id)
    }

    #[doc(alias = "changed")]
    fn connect_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn changed_trampoline<P: IsA<TrayItem>, F: Fn(&P) + 'static>(this: *mut ffi::AstalTrayTrayItem, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(TrayItem::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"changed\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(changed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "ready")]
    fn connect_ready<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn ready_trampoline<P: IsA<TrayItem>, F: Fn(&P) + 'static>(this: *mut ffi::AstalTrayTrayItem, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(TrayItem::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"ready\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(ready_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "title")]
    fn connect_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_title_trampoline<P: IsA<TrayItem>, F: Fn(&P) + 'static>(this: *mut ffi::AstalTrayTrayItem, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(TrayItem::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::title\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_title_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "category")]
    fn connect_category_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_category_trampoline<P: IsA<TrayItem>, F: Fn(&P) + 'static>(this: *mut ffi::AstalTrayTrayItem, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(TrayItem::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::category\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_category_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "status")]
    fn connect_status_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_status_trampoline<P: IsA<TrayItem>, F: Fn(&P) + 'static>(this: *mut ffi::AstalTrayTrayItem, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(TrayItem::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::status\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_status_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "tooltip")]
    fn connect_tooltip_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_tooltip_trampoline<P: IsA<TrayItem>, F: Fn(&P) + 'static>(this: *mut ffi::AstalTrayTrayItem, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(TrayItem::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::tooltip\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_tooltip_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "tooltip-markup")]
    fn connect_tooltip_markup_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_tooltip_markup_trampoline<P: IsA<TrayItem>, F: Fn(&P) + 'static>(this: *mut ffi::AstalTrayTrayItem, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(TrayItem::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::tooltip-markup\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_tooltip_markup_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "id")]
    fn connect_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_id_trampoline<P: IsA<TrayItem>, F: Fn(&P) + 'static>(this: *mut ffi::AstalTrayTrayItem, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(TrayItem::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::id\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_id_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "is-menu")]
    fn connect_is_menu_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_is_menu_trampoline<P: IsA<TrayItem>, F: Fn(&P) + 'static>(this: *mut ffi::AstalTrayTrayItem, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(TrayItem::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::is-menu\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_is_menu_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "icon-theme-path")]
    fn connect_icon_theme_path_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_icon_theme_path_trampoline<P: IsA<TrayItem>, F: Fn(&P) + 'static>(this: *mut ffi::AstalTrayTrayItem, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(TrayItem::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::icon-theme-path\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_icon_theme_path_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "icon-name")]
    fn connect_icon_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_icon_name_trampoline<P: IsA<TrayItem>, F: Fn(&P) + 'static>(this: *mut ffi::AstalTrayTrayItem, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(TrayItem::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::icon-name\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_icon_name_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "icon-pixbuf")]
    fn connect_icon_pixbuf_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_icon_pixbuf_trampoline<P: IsA<TrayItem>, F: Fn(&P) + 'static>(this: *mut ffi::AstalTrayTrayItem, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(TrayItem::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::icon-pixbuf\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_icon_pixbuf_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "gicon")]
    fn connect_gicon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_gicon_trampoline<P: IsA<TrayItem>, F: Fn(&P) + 'static>(this: *mut ffi::AstalTrayTrayItem, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(TrayItem::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::gicon\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_gicon_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "item-id")]
    fn connect_item_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_item_id_trampoline<P: IsA<TrayItem>, F: Fn(&P) + 'static>(this: *mut ffi::AstalTrayTrayItem, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(TrayItem::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::item-id\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_item_id_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "menu-model")]
    fn connect_menu_model_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_menu_model_trampoline<P: IsA<TrayItem>, F: Fn(&P) + 'static>(this: *mut ffi::AstalTrayTrayItem, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(TrayItem::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::menu-model\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_menu_model_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "action-group")]
    fn connect_action_group_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_action_group_trampoline<P: IsA<TrayItem>, F: Fn(&P) + 'static>(this: *mut ffi::AstalTrayTrayItem, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(TrayItem::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::action-group\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_action_group_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<TrayItem>> TrayItemExt for O {}
