// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../../gir/gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{prelude::*,translate::*};

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AstalTrayCategory")]
pub enum Category {
    #[doc(alias = "ASTAL_TRAY_CATEGORY_APPLICATION")]
    Application,
    #[doc(alias = "ASTAL_TRAY_CATEGORY_COMMUNICATIONS")]
    Communications,
    #[doc(alias = "ASTAL_TRAY_CATEGORY_SYSTEM")]
    System,
    #[doc(alias = "ASTAL_TRAY_CATEGORY_HARDWARE")]
    Hardware,
#[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for Category {
    type GlibType = ffi::AstalTrayCategory;

    #[inline]
fn into_glib(self) -> ffi::AstalTrayCategory {
match self {
            Self::Application => ffi::ASTAL_TRAY_CATEGORY_APPLICATION,
            Self::Communications => ffi::ASTAL_TRAY_CATEGORY_COMMUNICATIONS,
            Self::System => ffi::ASTAL_TRAY_CATEGORY_SYSTEM,
            Self::Hardware => ffi::ASTAL_TRAY_CATEGORY_HARDWARE,
            Self::__Unknown(value) => value,
}
}
}

#[doc(hidden)]
impl FromGlib<ffi::AstalTrayCategory> for Category {
    #[inline]
unsafe fn from_glib(value: ffi::AstalTrayCategory) -> Self {
        skip_assert_initialized!();
        
match value {
            ffi::ASTAL_TRAY_CATEGORY_APPLICATION => Self::Application,
            ffi::ASTAL_TRAY_CATEGORY_COMMUNICATIONS => Self::Communications,
            ffi::ASTAL_TRAY_CATEGORY_SYSTEM => Self::System,
            ffi::ASTAL_TRAY_CATEGORY_HARDWARE => Self::Hardware,
            value => Self::__Unknown(value),
}
}
}

impl StaticType for Category {
                #[inline]
    #[doc(alias = "astal_tray_category_get_type")]
   fn static_type() -> glib::Type {
                    unsafe { from_glib(ffi::astal_tray_category_get_type()) }
                }
            }

impl glib::HasParamSpec for Category {
                type ParamSpec = glib::ParamSpecEnum;
                type SetValue = Self;
                type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;
    
                fn param_spec_builder() -> Self::BuilderFn {
                    Self::ParamSpec::builder_with_default
                }
}

impl glib::value::ValueType for Category {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for Category {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for Category {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<Category> for glib::Value {
    #[inline]
    fn from(v: Category) -> Self {
        skip_assert_initialized!();
        ToValue::to_value(&v)
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AstalTrayStatus")]
pub enum Status {
    #[doc(alias = "ASTAL_TRAY_STATUS_PASSIVE")]
    Passive,
    #[doc(alias = "ASTAL_TRAY_STATUS_ACTIVE")]
    Active,
    #[doc(alias = "ASTAL_TRAY_STATUS_NEEDS_ATTENTION")]
    NeedsAttention,
#[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for Status {
    type GlibType = ffi::AstalTrayStatus;

    #[inline]
fn into_glib(self) -> ffi::AstalTrayStatus {
match self {
            Self::Passive => ffi::ASTAL_TRAY_STATUS_PASSIVE,
            Self::Active => ffi::ASTAL_TRAY_STATUS_ACTIVE,
            Self::NeedsAttention => ffi::ASTAL_TRAY_STATUS_NEEDS_ATTENTION,
            Self::__Unknown(value) => value,
}
}
}

#[doc(hidden)]
impl FromGlib<ffi::AstalTrayStatus> for Status {
    #[inline]
unsafe fn from_glib(value: ffi::AstalTrayStatus) -> Self {
        skip_assert_initialized!();
        
match value {
            ffi::ASTAL_TRAY_STATUS_PASSIVE => Self::Passive,
            ffi::ASTAL_TRAY_STATUS_ACTIVE => Self::Active,
            ffi::ASTAL_TRAY_STATUS_NEEDS_ATTENTION => Self::NeedsAttention,
            value => Self::__Unknown(value),
}
}
}

impl StaticType for Status {
                #[inline]
    #[doc(alias = "astal_tray_status_get_type")]
   fn static_type() -> glib::Type {
                    unsafe { from_glib(ffi::astal_tray_status_get_type()) }
                }
            }

impl glib::HasParamSpec for Status {
                type ParamSpec = glib::ParamSpecEnum;
                type SetValue = Self;
                type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;
    
                fn param_spec_builder() -> Self::BuilderFn {
                    Self::ParamSpec::builder_with_default
                }
}

impl glib::value::ValueType for Status {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for Status {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for Status {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<Status> for glib::Value {
    #[inline]
    fn from(v: Status) -> Self {
        skip_assert_initialized!();
        ToValue::to_value(&v)
    }
}

