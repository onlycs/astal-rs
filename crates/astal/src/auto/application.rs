// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../../gir/gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

#[cfg(feature = "gio_v2_28")]
#[cfg_attr(docsrs, doc(cfg(feature = "gio_v2_28")))]
glib::wrapper! {
    #[doc(alias = "AstalApplication")]
    pub struct Application(Object<ffi::AstalApplication, ffi::AstalApplicationClass>) @extends gtk::Application, gio::Application, @implements gio::ActionGroup, gio::ActionMap, astal_io::Application;

    match fn {
        type_ => || ffi::astal_application_get_type(),
    }
}

#[cfg(not(any(feature = "gio_v2_28")))]
#[cfg(feature = "gio_v2_32")]
glib::wrapper! {
    #[doc(alias = "AstalApplication")]
    pub struct Application(Object<ffi::AstalApplication, ffi::AstalApplicationClass>) @extends gtk::Application, @implements gio::ActionGroup, gio::ActionMap, astal_io::Application;

    match fn {
        type_ => || ffi::astal_application_get_type(),
    }
}

#[cfg(not(any(feature = "gio_v2_32")))]
glib::wrapper! {
    #[doc(alias = "AstalApplication")]
    pub struct Application(Object<ffi::AstalApplication, ffi::AstalApplicationClass>) @extends gtk::Application, @implements gio::ActionGroup, astal_io::Application;

    match fn {
        type_ => || ffi::astal_application_get_type(),
    }
}

impl Application {
        pub const NONE: Option<&'static Application> = None;
    

    #[doc(alias = "astal_application_new")]
    pub fn new() -> Application {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::astal_application_new())
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Application`] objects.
            ///
            /// This method returns an instance of [`ApplicationBuilder`](crate::builders::ApplicationBuilder) which can be used to create [`Application`] objects.
            pub fn builder() -> ApplicationBuilder {
                ApplicationBuilder::new()
            }
        
}

impl Default for Application {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Application`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct ApplicationBuilder {
            builder: glib::object::ObjectBuilder<'static, Application>,
        }

        impl ApplicationBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn gtk_theme(self, gtk_theme: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("gtk-theme", gtk_theme.into()), }
                        }

                            pub fn icon_theme(self, icon_theme: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("icon-theme", icon_theme.into()), }
                        }

                            pub fn cursor_theme(self, cursor_theme: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("cursor-theme", cursor_theme.into()), }
                        }

                            pub fn app_menu(self, app_menu: &impl IsA<gio::MenuModel>) -> Self {
                            
                            Self { builder: self.builder.property("app-menu", app_menu.clone().upcast()), }
                        }

                            pub fn menubar(self, menubar: &impl IsA<gio::MenuModel>) -> Self {
                            
                            Self { builder: self.builder.property("menubar", menubar.clone().upcast()), }
                        }

                            #[cfg(feature = "gtk_v3_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3_4")))]
    pub fn register_session(self, register_session: bool) -> Self {
                            
                            Self { builder: self.builder.property("register-session", register_session), }
                        }

                            #[cfg(feature = "gio_v2_28")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gio_v2_28")))]
    pub fn application_id(self, application_id: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("application-id", application_id.into()), }
                        }

                            #[cfg(feature = "gio_v2_28")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gio_v2_28")))]
    pub fn flags(self, flags: gio::ApplicationFlags) -> Self {
                            
                            Self { builder: self.builder.property("flags", flags), }
                        }

                            #[cfg(feature = "gio_v2_28")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gio_v2_28")))]
    pub fn inactivity_timeout(self, inactivity_timeout: u32) -> Self {
                            
                            Self { builder: self.builder.property("inactivity-timeout", inactivity_timeout), }
                        }

                            #[cfg(feature = "gio_v2_28")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gio_v2_28")))]
    pub fn resource_base_path(self, resource_base_path: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("resource-base-path", resource_base_path.into()), }
                        }

                            #[cfg(feature = "gio_v2_80")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gio_v2_80")))]
    pub fn version(self, version: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("version", version.into()), }
                        }

                            pub fn instance_name(self, instance_name: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("instance-name", instance_name.into()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`Application`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Application {
assert_initialized_main_thread!();
    self.builder.build() }
}

pub trait ApplicationExt: IsA<Application> + 'static {
    #[doc(alias = "astal_application_reset_css")]
    fn reset_css(&self) {
        unsafe {
            ffi::astal_application_reset_css(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "astal_application_get_window")]
    #[doc(alias = "get_window")]
    fn window(&self, name: &str) -> Option<gtk::Window> {
        unsafe {
            from_glib_full(ffi::astal_application_get_window(self.as_ref().to_glib_none().0, name.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_application_apply_css")]
    fn apply_css(&self, style: &str, reset: bool) {
        unsafe {
            ffi::astal_application_apply_css(self.as_ref().to_glib_none().0, style.to_glib_none().0, reset.into_glib());
        }
    }

    #[doc(alias = "astal_application_add_icons")]
    fn add_icons(&self, path: Option<&str>) {
        unsafe {
            ffi::astal_application_add_icons(self.as_ref().to_glib_none().0, path.to_glib_none().0);
        }
    }

    #[doc(alias = "astal_application_request")]
    fn request(&self, msg: &str, conn: &impl IsA<gio::SocketConnection>) {
        unsafe {
            ffi::astal_application_request(self.as_ref().to_glib_none().0, msg.to_glib_none().0, conn.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "astal_application_get_monitors")]
    #[doc(alias = "get_monitors")]
    fn monitors(&self) -> Vec<gdk::Monitor> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::astal_application_get_monitors(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_application_get_windows")]
    #[doc(alias = "get_windows")]
    fn windows(&self) -> Vec<gtk::Window> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::astal_application_get_windows(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_application_get_gtk_theme")]
    #[doc(alias = "get_gtk_theme")]
    fn gtk_theme(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_application_get_gtk_theme(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_application_set_gtk_theme")]
    fn set_gtk_theme(&self, value: &str) {
        unsafe {
            ffi::astal_application_set_gtk_theme(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "astal_application_get_icon_theme")]
    #[doc(alias = "get_icon_theme")]
    fn icon_theme(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_application_get_icon_theme(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_application_set_icon_theme")]
    fn set_icon_theme(&self, value: &str) {
        unsafe {
            ffi::astal_application_set_icon_theme(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "astal_application_get_cursor_theme")]
    #[doc(alias = "get_cursor_theme")]
    fn cursor_theme(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_application_get_cursor_theme(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_application_set_cursor_theme")]
    fn set_cursor_theme(&self, value: &str) {
        unsafe {
            ffi::astal_application_set_cursor_theme(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "monitor-added")]
    fn connect_monitor_added<F: Fn(&Self, &gdk::Monitor) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn monitor_added_trampoline<P: IsA<Application>, F: Fn(&P, &gdk::Monitor) + 'static>(this: *mut ffi::AstalApplication, monitor: *mut gdk::ffi::GdkMonitor, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Application::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(monitor))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"monitor-added\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(monitor_added_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "monitor-removed")]
    fn connect_monitor_removed<F: Fn(&Self, &gdk::Monitor) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn monitor_removed_trampoline<P: IsA<Application>, F: Fn(&P, &gdk::Monitor) + 'static>(this: *mut ffi::AstalApplication, monitor: *mut gdk::ffi::GdkMonitor, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Application::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(monitor))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"monitor-removed\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(monitor_removed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "window-toggled")]
    fn connect_window_toggled<F: Fn(&Self, &gtk::Window) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn window_toggled_trampoline<P: IsA<Application>, F: Fn(&P, &gtk::Window) + 'static>(this: *mut ffi::AstalApplication, window: *mut gtk::ffi::GtkWindow, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Application::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(window))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"window-toggled\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(window_toggled_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "monitors")]
    fn connect_monitors_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_monitors_trampoline<P: IsA<Application>, F: Fn(&P) + 'static>(this: *mut ffi::AstalApplication, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Application::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::monitors\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_monitors_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "windows")]
    fn connect_windows_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_windows_trampoline<P: IsA<Application>, F: Fn(&P) + 'static>(this: *mut ffi::AstalApplication, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Application::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::windows\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_windows_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "gtk-theme")]
    fn connect_gtk_theme_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_gtk_theme_trampoline<P: IsA<Application>, F: Fn(&P) + 'static>(this: *mut ffi::AstalApplication, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Application::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::gtk-theme\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_gtk_theme_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "icon-theme")]
    fn connect_icon_theme_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_icon_theme_trampoline<P: IsA<Application>, F: Fn(&P) + 'static>(this: *mut ffi::AstalApplication, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Application::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::icon-theme\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_icon_theme_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "cursor-theme")]
    fn connect_cursor_theme_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cursor_theme_trampoline<P: IsA<Application>, F: Fn(&P) + 'static>(this: *mut ffi::AstalApplication, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Application::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::cursor-theme\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_cursor_theme_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Application>> ApplicationExt for O {}
