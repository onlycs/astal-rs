// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../../gir/gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "AstalOverlay")]
    pub struct Overlay(Object<ffi::AstalOverlay, ffi::AstalOverlayClass>) @extends gtk::Overlay, gtk::Bin, gtk::Container, gtk::Widget, gobject::InitiallyUnowned, @implements atk::ImplementorIface, gtk::Buildable;

    match fn {
        type_ => || ffi::astal_overlay_get_type(),
    }
}

impl Overlay {
        pub const NONE: Option<&'static Overlay> = None;
    

    #[doc(alias = "astal_overlay_new")]
    pub fn new() -> Overlay {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::astal_overlay_new())
        }
    }
}

impl Default for Overlay {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

pub trait OverlayExt: IsA<Overlay> + 'static {
    #[doc(alias = "astal_overlay_add_overlay")]
    fn add_overlay(&self, widget: &impl IsA<gtk::Widget>) {
        unsafe {
            ffi::astal_overlay_add_overlay(self.as_ref().to_glib_none().0, widget.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "astal_overlay_get_pass_through")]
    #[doc(alias = "get_pass_through")]
    fn is_pass_through(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_overlay_get_pass_through(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_overlay_set_pass_through")]
    fn set_pass_through(&self, value: bool) {
        unsafe {
            ffi::astal_overlay_set_pass_through(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "astal_overlay_get_overlay")]
    #[doc(alias = "get_overlay")]
    fn overlay(&self) -> Option<gtk::Widget> {
        unsafe {
            from_glib_none(ffi::astal_overlay_get_overlay(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_overlay_set_overlay")]
    fn set_overlay(&self, value: Option<&impl IsA<gtk::Widget>>) {
        unsafe {
            ffi::astal_overlay_set_overlay(self.as_ref().to_glib_none().0, value.map(|p| p.as_ref()).to_glib_none().0);
        }
    }

    #[doc(alias = "astal_overlay_get_overlays")]
    #[doc(alias = "get_overlays")]
    fn overlays(&self) -> Vec<gtk::Widget> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::astal_overlay_get_overlays(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_overlay_set_overlays")]
    fn set_overlays(&self, value: &[gtk::Widget]) {
        unsafe {
            ffi::astal_overlay_set_overlays(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "astal_overlay_get_child")]
    #[doc(alias = "get_child")]
    fn child(&self) -> Option<gtk::Widget> {
        unsafe {
            from_glib_none(ffi::astal_overlay_get_child(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_overlay_set_child")]
    fn set_child(&self, value: Option<&impl IsA<gtk::Widget>>) {
        unsafe {
            ffi::astal_overlay_set_child(self.as_ref().to_glib_none().0, value.map(|p| p.as_ref()).to_glib_none().0);
        }
    }

    #[doc(alias = "pass-through")]
    fn connect_pass_through_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_pass_through_trampoline<P: IsA<Overlay>, F: Fn(&P) + 'static>(this: *mut ffi::AstalOverlay, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Overlay::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::pass-through\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_pass_through_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "overlay")]
    fn connect_overlay_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_overlay_trampoline<P: IsA<Overlay>, F: Fn(&P) + 'static>(this: *mut ffi::AstalOverlay, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Overlay::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::overlay\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_overlay_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "overlays")]
    fn connect_overlays_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_overlays_trampoline<P: IsA<Overlay>, F: Fn(&P) + 'static>(this: *mut ffi::AstalOverlay, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Overlay::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::overlays\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_overlays_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Overlay>> OverlayExt for O {}
