// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../../gir/gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "AstalCenterBox")]
    pub struct CenterBox(Object<ffi::AstalCenterBox, ffi::AstalCenterBoxClass>) @extends gtk::Box, gtk::Container, gtk::Widget, gobject::InitiallyUnowned, @implements atk::ImplementorIface, gtk::Buildable, gtk::Orientable;

    match fn {
        type_ => || ffi::astal_center_box_get_type(),
    }
}

impl CenterBox {
        pub const NONE: Option<&'static CenterBox> = None;
    

    #[doc(alias = "astal_center_box_new")]
    pub fn new() -> CenterBox {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::astal_center_box_new())
        }
    }
}

impl Default for CenterBox {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

pub trait CenterBoxExt: IsA<CenterBox> + 'static {
    #[doc(alias = "astal_center_box_get_vertical")]
    #[doc(alias = "get_vertical")]
    fn is_vertical(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_center_box_get_vertical(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_center_box_set_vertical")]
    fn set_vertical(&self, value: bool) {
        unsafe {
            ffi::astal_center_box_set_vertical(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "astal_center_box_get_start_widget")]
    #[doc(alias = "get_start_widget")]
    fn start_widget(&self) -> Option<gtk::Widget> {
        unsafe {
            from_glib_none(ffi::astal_center_box_get_start_widget(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_center_box_set_start_widget")]
    fn set_start_widget(&self, value: &impl IsA<gtk::Widget>) {
        unsafe {
            ffi::astal_center_box_set_start_widget(self.as_ref().to_glib_none().0, value.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "astal_center_box_get_end_widget")]
    #[doc(alias = "get_end_widget")]
    fn end_widget(&self) -> Option<gtk::Widget> {
        unsafe {
            from_glib_none(ffi::astal_center_box_get_end_widget(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_center_box_set_end_widget")]
    fn set_end_widget(&self, value: &impl IsA<gtk::Widget>) {
        unsafe {
            ffi::astal_center_box_set_end_widget(self.as_ref().to_glib_none().0, value.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "astal_center_box_get_center_widget")]
    #[doc(alias = "get_center_widget")]
    fn center_widget(&self) -> Option<gtk::Widget> {
        unsafe {
            from_glib_none(ffi::astal_center_box_get_center_widget(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_center_box_set_center_widget")]
    fn set_center_widget(&self, value: &impl IsA<gtk::Widget>) {
        unsafe {
            ffi::astal_center_box_set_center_widget(self.as_ref().to_glib_none().0, value.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "vertical")]
    fn connect_vertical_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_vertical_trampoline<P: IsA<CenterBox>, F: Fn(&P) + 'static>(this: *mut ffi::AstalCenterBox, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(CenterBox::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::vertical\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_vertical_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "start-widget")]
    fn connect_start_widget_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_start_widget_trampoline<P: IsA<CenterBox>, F: Fn(&P) + 'static>(this: *mut ffi::AstalCenterBox, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(CenterBox::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::start-widget\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_start_widget_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "end-widget")]
    fn connect_end_widget_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_end_widget_trampoline<P: IsA<CenterBox>, F: Fn(&P) + 'static>(this: *mut ffi::AstalCenterBox, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(CenterBox::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::end-widget\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_end_widget_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "center-widget")]
    fn connect_center_widget_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_center_widget_trampoline<P: IsA<CenterBox>, F: Fn(&P) + 'static>(this: *mut ffi::AstalCenterBox, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(CenterBox::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::center-widget\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_center_widget_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<CenterBox>> CenterBoxExt for O {}
