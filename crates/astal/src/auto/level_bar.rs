// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../../gobject/gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "AstalLevelBar")]
    pub struct LevelBar(Object<ffi::AstalLevelBar, ffi::AstalLevelBarClass>) @extends gtk::LevelBar, gtk::Widget, gobject::InitiallyUnowned, @implements atk::ImplementorIface, gtk::Buildable, gtk::Orientable;

    match fn {
        type_ => || ffi::astal_level_bar_get_type(),
    }
}

impl LevelBar {
        pub const NONE: Option<&'static LevelBar> = None;
    

    #[doc(alias = "astal_level_bar_new")]
    pub fn new() -> LevelBar {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::astal_level_bar_new())
        }
    }
}

impl Default for LevelBar {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

pub trait LevelBarExt: IsA<LevelBar> + 'static {
    #[doc(alias = "astal_level_bar_get_vertical")]
    #[doc(alias = "get_vertical")]
    fn is_vertical(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_level_bar_get_vertical(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_level_bar_set_vertical")]
    fn set_vertical(&self, value: bool) {
        unsafe {
            ffi::astal_level_bar_set_vertical(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "vertical")]
    fn connect_vertical_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_vertical_trampoline<P: IsA<LevelBar>, F: Fn(&P) + 'static>(this: *mut ffi::AstalLevelBar, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(LevelBar::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::vertical\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_vertical_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<LevelBar>> LevelBarExt for O {}
