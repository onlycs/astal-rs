// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../../gobject/gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "AstalIcon")]
    pub struct Icon(Object<ffi::AstalIcon, ffi::AstalIconClass>) @extends gtk::Image, gtk::Misc, gtk::Widget, gobject::InitiallyUnowned, @implements atk::ImplementorIface, gtk::Buildable;

    match fn {
        type_ => || ffi::astal_icon_get_type(),
    }
}

impl Icon {
        pub const NONE: Option<&'static Icon> = None;
    

    #[doc(alias = "astal_icon_new")]
    pub fn new() -> Icon {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::astal_icon_new())
        }
    }

    #[doc(alias = "astal_icon_lookup_icon")]
    pub fn lookup_icon(icon: &str) -> Option<gtk::IconInfo> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::astal_icon_lookup_icon(icon.to_glib_none().0))
        }
    }
}

impl Default for Icon {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

pub trait IconExt: IsA<Icon> + 'static {
    #[doc(alias = "astal_icon_get_pixbuf")]
    #[doc(alias = "get_pixbuf")]
    fn pixbuf(&self) -> Option<gdk_pixbuf::Pixbuf> {
        unsafe {
            from_glib_none(ffi::astal_icon_get_pixbuf(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_icon_set_pixbuf")]
    fn set_pixbuf(&self, value: &gdk_pixbuf::Pixbuf) {
        unsafe {
            ffi::astal_icon_set_pixbuf(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "astal_icon_get_g_icon")]
    #[doc(alias = "get_g_icon")]
    fn g_icon(&self) -> Option<gio::Icon> {
        unsafe {
            from_glib_none(ffi::astal_icon_get_g_icon(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_icon_set_g_icon")]
    fn set_g_icon(&self, value: &impl IsA<gio::Icon>) {
        unsafe {
            ffi::astal_icon_set_g_icon(self.as_ref().to_glib_none().0, value.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "astal_icon_get_icon")]
    #[doc(alias = "get_icon")]
    fn icon(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_icon_get_icon(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_icon_set_icon")]
    fn set_icon(&self, value: &str) {
        unsafe {
            ffi::astal_icon_set_icon(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "g-icon")]
    fn connect_g_icon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_g_icon_trampoline<P: IsA<Icon>, F: Fn(&P) + 'static>(this: *mut ffi::AstalIcon, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Icon::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::g-icon\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_g_icon_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "icon")]
    fn connect_icon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_icon_trampoline<P: IsA<Icon>, F: Fn(&P) + 'static>(this: *mut ffi::AstalIcon, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Icon::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::icon\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_icon_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Icon>> IconExt for O {}
