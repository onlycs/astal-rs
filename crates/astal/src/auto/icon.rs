// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../../gir/gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "AstalIcon")]
    pub struct Icon(Object<ffi::AstalIcon, ffi::AstalIconClass>) @extends gtk::Image, gtk::Misc, gtk::Widget, gobject::InitiallyUnowned, @implements atk::ImplementorIface, gtk::Buildable;

    match fn {
        type_ => || ffi::astal_icon_get_type(),
    }
}

impl Icon {
        pub const NONE: Option<&'static Icon> = None;
    

    #[doc(alias = "astal_icon_new")]
    pub fn new() -> Icon {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::astal_icon_new())
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Icon`] objects.
            ///
            /// This method returns an instance of [`IconBuilder`](crate::builders::IconBuilder) which can be used to create [`Icon`] objects.
            pub fn builder() -> IconBuilder {
                IconBuilder::new()
            }
        

    #[doc(alias = "astal_icon_lookup_icon")]
    pub fn lookup_icon(icon: &str) -> Option<gtk::IconInfo> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::astal_icon_lookup_icon(icon.to_glib_none().0))
        }
    }
}

impl Default for Icon {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Icon`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct IconBuilder {
            builder: glib::object::ObjectBuilder<'static, Icon>,
        }

        impl IconBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn pixbuf(self, pixbuf: &gdk_pixbuf::Pixbuf) -> Self {
                            
                            Self { builder: self.builder.property("pixbuf", pixbuf.clone()), }
                        }

                            pub fn icon(self, icon: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("icon", icon.into()), }
                        }

                            pub fn file(self, file: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("file", file.into()), }
                        }

                            #[cfg(feature = "gtk_v2_14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v2_14")))]
    pub fn gicon(self, gicon: &impl IsA<gio::Icon>) -> Self {
                            
                            Self { builder: self.builder.property("gicon", gicon.clone().upcast()), }
                        }

                            #[cfg(feature = "gtk_v2_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v2_6")))]
    pub fn icon_name(self, icon_name: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("icon-name", icon_name.into()), }
                        }

                        //    #[cfg_attr(feature = "v3_10", deprecated = "Since 3.10")]
    //pub fn icon_set(self, icon_set: /*Ignored*/&gtk::IconSet) -> Self {
                        //    
                        //    Self { builder: self.builder.property("icon-set", icon_set), }
                        //}

                            pub fn icon_size(self, icon_size: i32) -> Self {
                            
                            Self { builder: self.builder.property("icon-size", icon_size), }
                        }

                            pub fn pixbuf_animation(self, pixbuf_animation: &impl IsA<gdk_pixbuf::PixbufAnimation>) -> Self {
                            
                            Self { builder: self.builder.property("pixbuf-animation", pixbuf_animation.clone().upcast()), }
                        }

                            #[cfg(feature = "gtk_v2_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v2_6")))]
    pub fn pixel_size(self, pixel_size: i32) -> Self {
                            
                            Self { builder: self.builder.property("pixel-size", pixel_size), }
                        }

                            #[cfg(feature = "gtk_v3_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3_8")))]
    pub fn resource(self, resource: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("resource", resource.into()), }
                        }

                            #[cfg_attr(feature = "v3_10", deprecated = "Since 3.10")]
    pub fn stock(self, stock: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("stock", stock.into()), }
                        }

                            pub fn surface(self, surface: &cairo::Surface) -> Self {
                            
                            Self { builder: self.builder.property("surface", surface), }
                        }

                            #[cfg(feature = "gtk_v3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3")))]
    pub fn use_fallback(self, use_fallback: bool) -> Self {
                            
                            Self { builder: self.builder.property("use-fallback", use_fallback), }
                        }

                            #[cfg_attr(feature = "v3_14", deprecated = "Since 3.14")]
    pub fn xalign(self, xalign: f32) -> Self {
                            
                            Self { builder: self.builder.property("xalign", xalign), }
                        }

                            #[cfg_attr(feature = "v3_14", deprecated = "Since 3.14")]
    pub fn xpad(self, xpad: i32) -> Self {
                            
                            Self { builder: self.builder.property("xpad", xpad), }
                        }

                            #[cfg_attr(feature = "v3_14", deprecated = "Since 3.14")]
    pub fn yalign(self, yalign: f32) -> Self {
                            
                            Self { builder: self.builder.property("yalign", yalign), }
                        }

                            #[cfg_attr(feature = "v3_14", deprecated = "Since 3.14")]
    pub fn ypad(self, ypad: i32) -> Self {
                            
                            Self { builder: self.builder.property("ypad", ypad), }
                        }

                            pub fn app_paintable(self, app_paintable: bool) -> Self {
                            
                            Self { builder: self.builder.property("app-paintable", app_paintable), }
                        }

                            pub fn can_default(self, can_default: bool) -> Self {
                            
                            Self { builder: self.builder.property("can-default", can_default), }
                        }

                            pub fn can_focus(self, can_focus: bool) -> Self {
                            
                            Self { builder: self.builder.property("can-focus", can_focus), }
                        }

                            #[cfg(feature = "gtk_v2_18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v2_18")))]
    #[cfg_attr(feature = "v3_14", deprecated = "Since 3.14")]
    pub fn double_buffered(self, double_buffered: bool) -> Self {
                            
                            Self { builder: self.builder.property("double-buffered", double_buffered), }
                        }

                            pub fn events(self, events: gdk::EventMask) -> Self {
                            
                            Self { builder: self.builder.property("events", events), }
                        }

                            #[cfg(feature = "gtk_v3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3")))]
    pub fn expand(self, expand: bool) -> Self {
                            
                            Self { builder: self.builder.property("expand", expand), }
                        }

                            #[cfg(feature = "gtk_v3_20")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3_20")))]
    pub fn focus_on_click(self, focus_on_click: bool) -> Self {
                            
                            Self { builder: self.builder.property("focus-on-click", focus_on_click), }
                        }

                            #[cfg(feature = "gtk_v3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3")))]
    pub fn halign(self, halign: gtk::Align) -> Self {
                            
                            Self { builder: self.builder.property("halign", halign), }
                        }

                            pub fn has_default(self, has_default: bool) -> Self {
                            
                            Self { builder: self.builder.property("has-default", has_default), }
                        }

                            pub fn has_focus(self, has_focus: bool) -> Self {
                            
                            Self { builder: self.builder.property("has-focus", has_focus), }
                        }

                            #[cfg(feature = "gtk_v2_12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v2_12")))]
    pub fn has_tooltip(self, has_tooltip: bool) -> Self {
                            
                            Self { builder: self.builder.property("has-tooltip", has_tooltip), }
                        }

                            pub fn height_request(self, height_request: i32) -> Self {
                            
                            Self { builder: self.builder.property("height-request", height_request), }
                        }

                            #[cfg(feature = "gtk_v3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3")))]
    pub fn hexpand(self, hexpand: bool) -> Self {
                            
                            Self { builder: self.builder.property("hexpand", hexpand), }
                        }

                            #[cfg(feature = "gtk_v3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3")))]
    pub fn hexpand_set(self, hexpand_set: bool) -> Self {
                            
                            Self { builder: self.builder.property("hexpand-set", hexpand_set), }
                        }

                            pub fn is_focus(self, is_focus: bool) -> Self {
                            
                            Self { builder: self.builder.property("is-focus", is_focus), }
                        }

                            #[cfg(feature = "gtk_v3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3")))]
    pub fn margin(self, margin: i32) -> Self {
                            
                            Self { builder: self.builder.property("margin", margin), }
                        }

                            #[cfg(feature = "gtk_v3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3")))]
    pub fn margin_bottom(self, margin_bottom: i32) -> Self {
                            
                            Self { builder: self.builder.property("margin-bottom", margin_bottom), }
                        }

                            #[cfg(feature = "gtk_v3_12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3_12")))]
    pub fn margin_end(self, margin_end: i32) -> Self {
                            
                            Self { builder: self.builder.property("margin-end", margin_end), }
                        }

                            #[cfg(feature = "gtk_v3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3")))]
    #[cfg_attr(feature = "v3_12", deprecated = "Since 3.12")]
    pub fn margin_left(self, margin_left: i32) -> Self {
                            
                            Self { builder: self.builder.property("margin-left", margin_left), }
                        }

                            #[cfg(feature = "gtk_v3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3")))]
    #[cfg_attr(feature = "v3_12", deprecated = "Since 3.12")]
    pub fn margin_right(self, margin_right: i32) -> Self {
                            
                            Self { builder: self.builder.property("margin-right", margin_right), }
                        }

                            #[cfg(feature = "gtk_v3_12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3_12")))]
    pub fn margin_start(self, margin_start: i32) -> Self {
                            
                            Self { builder: self.builder.property("margin-start", margin_start), }
                        }

                            #[cfg(feature = "gtk_v3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3")))]
    pub fn margin_top(self, margin_top: i32) -> Self {
                            
                            Self { builder: self.builder.property("margin-top", margin_top), }
                        }

                            pub fn name(self, name: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("name", name.into()), }
                        }

                            pub fn no_show_all(self, no_show_all: bool) -> Self {
                            
                            Self { builder: self.builder.property("no-show-all", no_show_all), }
                        }

                            #[cfg(feature = "gtk_v3_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3_8")))]
    pub fn opacity(self, opacity: f64) -> Self {
                            
                            Self { builder: self.builder.property("opacity", opacity), }
                        }

                            pub fn parent(self, parent: &impl IsA<gtk::Container>) -> Self {
                            
                            Self { builder: self.builder.property("parent", parent.clone().upcast()), }
                        }

                            pub fn receives_default(self, receives_default: bool) -> Self {
                            
                            Self { builder: self.builder.property("receives-default", receives_default), }
                        }

                            pub fn sensitive(self, sensitive: bool) -> Self {
                            
                            Self { builder: self.builder.property("sensitive", sensitive), }
                        }

                            pub fn style(self, style: &impl IsA<gtk::Style>) -> Self {
                            
                            Self { builder: self.builder.property("style", style.clone().upcast()), }
                        }

                            #[cfg(feature = "gtk_v2_12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v2_12")))]
    pub fn tooltip_markup(self, tooltip_markup: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("tooltip-markup", tooltip_markup.into()), }
                        }

                            #[cfg(feature = "gtk_v2_12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v2_12")))]
    pub fn tooltip_text(self, tooltip_text: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("tooltip-text", tooltip_text.into()), }
                        }

                            #[cfg(feature = "gtk_v3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3")))]
    pub fn valign(self, valign: gtk::Align) -> Self {
                            
                            Self { builder: self.builder.property("valign", valign), }
                        }

                            #[cfg(feature = "gtk_v3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3")))]
    pub fn vexpand(self, vexpand: bool) -> Self {
                            
                            Self { builder: self.builder.property("vexpand", vexpand), }
                        }

                            #[cfg(feature = "gtk_v3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3")))]
    pub fn vexpand_set(self, vexpand_set: bool) -> Self {
                            
                            Self { builder: self.builder.property("vexpand-set", vexpand_set), }
                        }

                            pub fn visible(self, visible: bool) -> Self {
                            
                            Self { builder: self.builder.property("visible", visible), }
                        }

                            pub fn width_request(self, width_request: i32) -> Self {
                            
                            Self { builder: self.builder.property("width-request", width_request), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`Icon`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Icon {
assert_initialized_main_thread!();
    self.builder.build() }
}

pub trait IconExt: IsA<Icon> + 'static {
    #[doc(alias = "astal_icon_get_pixbuf")]
    #[doc(alias = "get_pixbuf")]
    fn pixbuf(&self) -> Option<gdk_pixbuf::Pixbuf> {
        unsafe {
            from_glib_none(ffi::astal_icon_get_pixbuf(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_icon_set_pixbuf")]
    fn set_pixbuf(&self, value: &gdk_pixbuf::Pixbuf) {
        unsafe {
            ffi::astal_icon_set_pixbuf(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "astal_icon_get_g_icon")]
    #[doc(alias = "get_g_icon")]
    fn g_icon(&self) -> Option<gio::Icon> {
        unsafe {
            from_glib_full(ffi::astal_icon_get_g_icon(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_icon_set_g_icon")]
    fn set_g_icon(&self, value: &impl IsA<gio::Icon>) {
        unsafe {
            ffi::astal_icon_set_g_icon(self.as_ref().to_glib_none().0, value.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "astal_icon_get_icon")]
    #[doc(alias = "get_icon")]
    fn icon(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_icon_get_icon(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_icon_set_icon")]
    fn set_icon(&self, value: &str) {
        unsafe {
            ffi::astal_icon_set_icon(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "icon")]
    fn connect_icon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_icon_trampoline<P: IsA<Icon>, F: Fn(&P) + 'static>(this: *mut ffi::AstalIcon, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Icon::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::icon\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_icon_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Icon>> IconExt for O {}
