// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../../gir/gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "AstalLabel")]
    pub struct Label(Object<ffi::AstalLabel, ffi::AstalLabelClass>) @extends gtk::Label, gtk::Misc, gtk::Widget, gobject::InitiallyUnowned, @implements atk::ImplementorIface, gtk::Buildable;

    match fn {
        type_ => || ffi::astal_label_get_type(),
    }
}

impl Label {
        pub const NONE: Option<&'static Label> = None;
    

    #[doc(alias = "astal_label_new")]
    pub fn new() -> Label {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::astal_label_new())
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Label`] objects.
            ///
            /// This method returns an instance of [`LabelBuilder`](crate::builders::LabelBuilder) which can be used to create [`Label`] objects.
            pub fn builder() -> LabelBuilder {
                LabelBuilder::new()
            }
        
}

impl Default for Label {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Label`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct LabelBuilder {
            builder: glib::object::ObjectBuilder<'static, Label>,
        }

        impl LabelBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn truncate(self, truncate: bool) -> Self {
                            
                            Self { builder: self.builder.property("truncate", truncate), }
                        }

                            pub fn justify_fill(self, justify_fill: bool) -> Self {
                            
                            Self { builder: self.builder.property("justify-fill", justify_fill), }
                        }

                            #[cfg(feature = "gtk_v2_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v2_6")))]
    pub fn angle(self, angle: f64) -> Self {
                            
                            Self { builder: self.builder.property("angle", angle), }
                        }

                            pub fn attributes(self, attributes: &pango::AttrList) -> Self {
                            
                            Self { builder: self.builder.property("attributes", attributes.clone()), }
                        }

                            #[cfg(feature = "gtk_v2_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v2_6")))]
    pub fn ellipsize(self, ellipsize: pango::EllipsizeMode) -> Self {
                            
                            Self { builder: self.builder.property("ellipsize", ellipsize), }
                        }

                            pub fn justify(self, justify: gtk::Justification) -> Self {
                            
                            Self { builder: self.builder.property("justify", justify), }
                        }

                            pub fn label(self, label: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("label", label.into()), }
                        }

                            #[cfg(feature = "gtk_v3_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3_10")))]
    pub fn lines(self, lines: i32) -> Self {
                            
                            Self { builder: self.builder.property("lines", lines), }
                        }

                            #[cfg(feature = "gtk_v2_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v2_6")))]
    pub fn max_width_chars(self, max_width_chars: i32) -> Self {
                            
                            Self { builder: self.builder.property("max-width-chars", max_width_chars), }
                        }

                            pub fn mnemonic_widget(self, mnemonic_widget: &impl IsA<gtk::Widget>) -> Self {
                            
                            Self { builder: self.builder.property("mnemonic-widget", mnemonic_widget.clone().upcast()), }
                        }

                            pub fn pattern(self, pattern: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("pattern", pattern.into()), }
                        }

                            pub fn selectable(self, selectable: bool) -> Self {
                            
                            Self { builder: self.builder.property("selectable", selectable), }
                        }

                            #[cfg(feature = "gtk_v2_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v2_6")))]
    pub fn single_line_mode(self, single_line_mode: bool) -> Self {
                            
                            Self { builder: self.builder.property("single-line-mode", single_line_mode), }
                        }

                            #[cfg(feature = "gtk_v2_18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v2_18")))]
    pub fn track_visited_links(self, track_visited_links: bool) -> Self {
                            
                            Self { builder: self.builder.property("track-visited-links", track_visited_links), }
                        }

                            pub fn use_markup(self, use_markup: bool) -> Self {
                            
                            Self { builder: self.builder.property("use-markup", use_markup), }
                        }

                            pub fn use_underline(self, use_underline: bool) -> Self {
                            
                            Self { builder: self.builder.property("use-underline", use_underline), }
                        }

                            #[cfg(feature = "gtk_v2_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v2_6")))]
    pub fn width_chars(self, width_chars: i32) -> Self {
                            
                            Self { builder: self.builder.property("width-chars", width_chars), }
                        }

                            pub fn wrap(self, wrap: bool) -> Self {
                            
                            Self { builder: self.builder.property("wrap", wrap), }
                        }

                            #[cfg(feature = "gtk_v2_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v2_10")))]
    pub fn wrap_mode(self, wrap_mode: pango::WrapMode) -> Self {
                            
                            Self { builder: self.builder.property("wrap-mode", wrap_mode), }
                        }

                            #[cfg(feature = "gtk_v3_16")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3_16")))]
    pub fn xalign(self, xalign: f32) -> Self {
                            
                            Self { builder: self.builder.property("xalign", xalign), }
                        }

                            #[cfg(feature = "gtk_v3_16")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3_16")))]
    pub fn yalign(self, yalign: f32) -> Self {
                            
                            Self { builder: self.builder.property("yalign", yalign), }
                        }

                            #[cfg_attr(feature = "v3_14", deprecated = "Since 3.14")]
    pub fn xpad(self, xpad: i32) -> Self {
                            
                            Self { builder: self.builder.property("xpad", xpad), }
                        }

                            #[cfg_attr(feature = "v3_14", deprecated = "Since 3.14")]
    pub fn ypad(self, ypad: i32) -> Self {
                            
                            Self { builder: self.builder.property("ypad", ypad), }
                        }

                            pub fn app_paintable(self, app_paintable: bool) -> Self {
                            
                            Self { builder: self.builder.property("app-paintable", app_paintable), }
                        }

                            pub fn can_default(self, can_default: bool) -> Self {
                            
                            Self { builder: self.builder.property("can-default", can_default), }
                        }

                            pub fn can_focus(self, can_focus: bool) -> Self {
                            
                            Self { builder: self.builder.property("can-focus", can_focus), }
                        }

                            #[cfg(feature = "gtk_v2_18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v2_18")))]
    #[cfg_attr(feature = "v3_14", deprecated = "Since 3.14")]
    pub fn double_buffered(self, double_buffered: bool) -> Self {
                            
                            Self { builder: self.builder.property("double-buffered", double_buffered), }
                        }

                            pub fn events(self, events: gdk::EventMask) -> Self {
                            
                            Self { builder: self.builder.property("events", events), }
                        }

                            #[cfg(feature = "gtk_v3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3")))]
    pub fn expand(self, expand: bool) -> Self {
                            
                            Self { builder: self.builder.property("expand", expand), }
                        }

                            #[cfg(feature = "gtk_v3_20")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3_20")))]
    pub fn focus_on_click(self, focus_on_click: bool) -> Self {
                            
                            Self { builder: self.builder.property("focus-on-click", focus_on_click), }
                        }

                            #[cfg(feature = "gtk_v3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3")))]
    pub fn halign(self, halign: gtk::Align) -> Self {
                            
                            Self { builder: self.builder.property("halign", halign), }
                        }

                            pub fn has_default(self, has_default: bool) -> Self {
                            
                            Self { builder: self.builder.property("has-default", has_default), }
                        }

                            pub fn has_focus(self, has_focus: bool) -> Self {
                            
                            Self { builder: self.builder.property("has-focus", has_focus), }
                        }

                            #[cfg(feature = "gtk_v2_12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v2_12")))]
    pub fn has_tooltip(self, has_tooltip: bool) -> Self {
                            
                            Self { builder: self.builder.property("has-tooltip", has_tooltip), }
                        }

                            pub fn height_request(self, height_request: i32) -> Self {
                            
                            Self { builder: self.builder.property("height-request", height_request), }
                        }

                            #[cfg(feature = "gtk_v3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3")))]
    pub fn hexpand(self, hexpand: bool) -> Self {
                            
                            Self { builder: self.builder.property("hexpand", hexpand), }
                        }

                            #[cfg(feature = "gtk_v3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3")))]
    pub fn hexpand_set(self, hexpand_set: bool) -> Self {
                            
                            Self { builder: self.builder.property("hexpand-set", hexpand_set), }
                        }

                            pub fn is_focus(self, is_focus: bool) -> Self {
                            
                            Self { builder: self.builder.property("is-focus", is_focus), }
                        }

                            #[cfg(feature = "gtk_v3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3")))]
    pub fn margin(self, margin: i32) -> Self {
                            
                            Self { builder: self.builder.property("margin", margin), }
                        }

                            #[cfg(feature = "gtk_v3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3")))]
    pub fn margin_bottom(self, margin_bottom: i32) -> Self {
                            
                            Self { builder: self.builder.property("margin-bottom", margin_bottom), }
                        }

                            #[cfg(feature = "gtk_v3_12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3_12")))]
    pub fn margin_end(self, margin_end: i32) -> Self {
                            
                            Self { builder: self.builder.property("margin-end", margin_end), }
                        }

                            #[cfg(feature = "gtk_v3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3")))]
    #[cfg_attr(feature = "v3_12", deprecated = "Since 3.12")]
    pub fn margin_left(self, margin_left: i32) -> Self {
                            
                            Self { builder: self.builder.property("margin-left", margin_left), }
                        }

                            #[cfg(feature = "gtk_v3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3")))]
    #[cfg_attr(feature = "v3_12", deprecated = "Since 3.12")]
    pub fn margin_right(self, margin_right: i32) -> Self {
                            
                            Self { builder: self.builder.property("margin-right", margin_right), }
                        }

                            #[cfg(feature = "gtk_v3_12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3_12")))]
    pub fn margin_start(self, margin_start: i32) -> Self {
                            
                            Self { builder: self.builder.property("margin-start", margin_start), }
                        }

                            #[cfg(feature = "gtk_v3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3")))]
    pub fn margin_top(self, margin_top: i32) -> Self {
                            
                            Self { builder: self.builder.property("margin-top", margin_top), }
                        }

                            pub fn name(self, name: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("name", name.into()), }
                        }

                            pub fn no_show_all(self, no_show_all: bool) -> Self {
                            
                            Self { builder: self.builder.property("no-show-all", no_show_all), }
                        }

                            #[cfg(feature = "gtk_v3_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3_8")))]
    pub fn opacity(self, opacity: f64) -> Self {
                            
                            Self { builder: self.builder.property("opacity", opacity), }
                        }

                            pub fn parent(self, parent: &impl IsA<gtk::Container>) -> Self {
                            
                            Self { builder: self.builder.property("parent", parent.clone().upcast()), }
                        }

                            pub fn receives_default(self, receives_default: bool) -> Self {
                            
                            Self { builder: self.builder.property("receives-default", receives_default), }
                        }

                            pub fn sensitive(self, sensitive: bool) -> Self {
                            
                            Self { builder: self.builder.property("sensitive", sensitive), }
                        }

                            pub fn style(self, style: &impl IsA<gtk::Style>) -> Self {
                            
                            Self { builder: self.builder.property("style", style.clone().upcast()), }
                        }

                            #[cfg(feature = "gtk_v2_12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v2_12")))]
    pub fn tooltip_markup(self, tooltip_markup: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("tooltip-markup", tooltip_markup.into()), }
                        }

                            #[cfg(feature = "gtk_v2_12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v2_12")))]
    pub fn tooltip_text(self, tooltip_text: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("tooltip-text", tooltip_text.into()), }
                        }

                            #[cfg(feature = "gtk_v3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3")))]
    pub fn valign(self, valign: gtk::Align) -> Self {
                            
                            Self { builder: self.builder.property("valign", valign), }
                        }

                            #[cfg(feature = "gtk_v3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3")))]
    pub fn vexpand(self, vexpand: bool) -> Self {
                            
                            Self { builder: self.builder.property("vexpand", vexpand), }
                        }

                            #[cfg(feature = "gtk_v3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v3")))]
    pub fn vexpand_set(self, vexpand_set: bool) -> Self {
                            
                            Self { builder: self.builder.property("vexpand-set", vexpand_set), }
                        }

                            pub fn visible(self, visible: bool) -> Self {
                            
                            Self { builder: self.builder.property("visible", visible), }
                        }

                            pub fn width_request(self, width_request: i32) -> Self {
                            
                            Self { builder: self.builder.property("width-request", width_request), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`Label`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Label {
assert_initialized_main_thread!();
    self.builder.build() }
}

pub trait LabelExt: IsA<Label> + 'static {
    #[doc(alias = "astal_label_get_truncate")]
    #[doc(alias = "get_truncate")]
    fn must_truncate(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_label_get_truncate(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_label_set_truncate")]
    fn set_truncate(&self, value: bool) {
        unsafe {
            ffi::astal_label_set_truncate(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "astal_label_get_justify_fill")]
    #[doc(alias = "get_justify_fill")]
    fn is_justify_fill(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_label_get_justify_fill(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_label_set_justify_fill")]
    fn set_justify_fill(&self, value: bool) {
        unsafe {
            ffi::astal_label_set_justify_fill(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "truncate")]
    fn connect_truncate_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_truncate_trampoline<P: IsA<Label>, F: Fn(&P) + 'static>(this: *mut ffi::AstalLabel, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Label::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::truncate\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_truncate_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "justify-fill")]
    fn connect_justify_fill_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_justify_fill_trampoline<P: IsA<Label>, F: Fn(&P) + 'static>(this: *mut ffi::AstalLabel, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Label::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::justify-fill\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_justify_fill_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Label>> LabelExt for O {}
