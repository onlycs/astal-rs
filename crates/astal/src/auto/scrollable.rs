// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../../gobject/gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "AstalScrollable")]
    pub struct Scrollable(Object<ffi::AstalScrollable, ffi::AstalScrollableClass>) @extends gtk::ScrolledWindow, gtk::Bin, gtk::Container, gtk::Widget, gobject::InitiallyUnowned, @implements atk::ImplementorIface, gtk::Buildable;

    match fn {
        type_ => || ffi::astal_scrollable_get_type(),
    }
}

impl Scrollable {
        pub const NONE: Option<&'static Scrollable> = None;
    

    #[doc(alias = "astal_scrollable_new")]
    pub fn new() -> Scrollable {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::astal_scrollable_new())
        }
    }
}

impl Default for Scrollable {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

pub trait ScrollableExt: IsA<Scrollable> + 'static {
    #[doc(alias = "astal_scrollable_get_child")]
    #[doc(alias = "get_child")]
    fn child(&self) -> Option<gtk::Widget> {
        unsafe {
            from_glib_full(ffi::astal_scrollable_get_child(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_scrollable_get_hscroll")]
    #[doc(alias = "get_hscroll")]
    fn hscroll(&self) -> gtk::PolicyType {
        unsafe {
            from_glib(ffi::astal_scrollable_get_hscroll(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_scrollable_set_hscroll")]
    fn set_hscroll(&self, value: gtk::PolicyType) {
        unsafe {
            ffi::astal_scrollable_set_hscroll(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "astal_scrollable_get_vscroll")]
    #[doc(alias = "get_vscroll")]
    fn vscroll(&self) -> gtk::PolicyType {
        unsafe {
            from_glib(ffi::astal_scrollable_get_vscroll(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_scrollable_set_vscroll")]
    fn set_vscroll(&self, value: gtk::PolicyType) {
        unsafe {
            ffi::astal_scrollable_set_vscroll(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "hscroll")]
    fn connect_hscroll_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_hscroll_trampoline<P: IsA<Scrollable>, F: Fn(&P) + 'static>(this: *mut ffi::AstalScrollable, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Scrollable::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::hscroll\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_hscroll_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "vscroll")]
    fn connect_vscroll_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_vscroll_trampoline<P: IsA<Scrollable>, F: Fn(&P) + 'static>(this: *mut ffi::AstalScrollable, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Scrollable::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::vscroll\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_vscroll_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Scrollable>> ScrollableExt for O {}
