// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../../gir/gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{bitflags::bitflags,prelude::*,translate::*};

bitflags! {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
    #[doc(alias = "AstalWindowAnchor")]
    pub struct WindowAnchor: u32 {
        #[doc(alias = "ASTAL_WINDOW_ANCHOR_NONE")]
        const NONE = ffi::ASTAL_WINDOW_ANCHOR_NONE as _;
        #[doc(alias = "ASTAL_WINDOW_ANCHOR_TOP")]
        const TOP = ffi::ASTAL_WINDOW_ANCHOR_TOP as _;
        #[doc(alias = "ASTAL_WINDOW_ANCHOR_RIGHT")]
        const RIGHT = ffi::ASTAL_WINDOW_ANCHOR_RIGHT as _;
        #[doc(alias = "ASTAL_WINDOW_ANCHOR_LEFT")]
        const LEFT = ffi::ASTAL_WINDOW_ANCHOR_LEFT as _;
        #[doc(alias = "ASTAL_WINDOW_ANCHOR_BOTTOM")]
        const BOTTOM = ffi::ASTAL_WINDOW_ANCHOR_BOTTOM as _;
    }
}

#[doc(hidden)]
impl IntoGlib for WindowAnchor {
    type GlibType = ffi::AstalWindowAnchor;

    #[inline]
    fn into_glib(self) -> ffi::AstalWindowAnchor {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AstalWindowAnchor> for WindowAnchor {
    #[inline]
    unsafe fn from_glib(value: ffi::AstalWindowAnchor) -> Self {
        skip_assert_initialized!();
        Self::from_bits_truncate(value)
    }
}

impl StaticType for WindowAnchor {
                #[inline]
    #[doc(alias = "astal_window_anchor_get_type")]
   fn static_type() -> glib::Type {
                    unsafe { from_glib(ffi::astal_window_anchor_get_type()) }
                }
            }

impl glib::HasParamSpec for WindowAnchor {
                type ParamSpec = glib::ParamSpecFlags;
                type SetValue = Self;
                type BuilderFn = fn(&str) -> glib::ParamSpecFlagsBuilder<Self>;
    
                fn param_spec_builder() -> Self::BuilderFn {
                    Self::ParamSpec::builder
                }
}

impl glib::value::ValueType for WindowAnchor {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for WindowAnchor {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for WindowAnchor {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<WindowAnchor> for glib::Value {
    #[inline]
    fn from(v: WindowAnchor) -> Self {
        skip_assert_initialized!();
        ToValue::to_value(&v)
    }
}

