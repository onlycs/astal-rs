// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../../gir/gir-files
// DO NOT EDIT

use crate::{ffi,HistoryDataPoint,StatisticsDataPoint};
use glib::{prelude::*,translate::*};

#[cfg(feature = "gio_v2_26")]
#[cfg_attr(docsrs, doc(cfg(feature = "gio_v2_26")))]
glib::wrapper! {
    #[doc(alias = "AstalBatteryIUPowerDevice")]
    pub struct IUPowerDevice(Interface<ffi::AstalBatteryIUPowerDevice, ffi::AstalBatteryIUPowerDeviceIface>) @requires gio::DBusProxy, gio::AsyncInitable, gio::DBusInterface, gio::Initable;

    match fn {
        type_ => || ffi::astal_battery_iu_power_device_get_type(),
    }
}

#[cfg(not(any(feature = "gio_v2_26")))]
#[cfg(feature = "gio_v2_22")]
glib::wrapper! {
    #[doc(alias = "AstalBatteryIUPowerDevice")]
    pub struct IUPowerDevice(Interface<ffi::AstalBatteryIUPowerDevice, ffi::AstalBatteryIUPowerDeviceIface>) @requires gio::AsyncInitable, gio::DBusInterface, gio::Initable;

    match fn {
        type_ => || ffi::astal_battery_iu_power_device_get_type(),
    }
}

#[cfg(not(any(feature = "gio_v2_22")))]
#[cfg(feature = "gio_v2_30")]
glib::wrapper! {
    #[doc(alias = "AstalBatteryIUPowerDevice")]
    pub struct IUPowerDevice(Interface<ffi::AstalBatteryIUPowerDevice, ffi::AstalBatteryIUPowerDeviceIface>) @requires gio::DBusInterface, gio::Initable;

    match fn {
        type_ => || ffi::astal_battery_iu_power_device_get_type(),
    }
}

#[cfg(not(any(feature = "gio_v2_30")))]
#[cfg(feature = "gio_v2_22")]
glib::wrapper! {
    #[doc(alias = "AstalBatteryIUPowerDevice")]
    pub struct IUPowerDevice(Interface<ffi::AstalBatteryIUPowerDevice, ffi::AstalBatteryIUPowerDeviceIface>) @requires gio::Initable;

    match fn {
        type_ => || ffi::astal_battery_iu_power_device_get_type(),
    }
}

#[cfg(not(any(feature = "gio_v2_22")))]
glib::wrapper! {
    #[doc(alias = "AstalBatteryIUPowerDevice")]
    pub struct IUPowerDevice(Interface<ffi::AstalBatteryIUPowerDevice, ffi::AstalBatteryIUPowerDeviceIface>);

    match fn {
        type_ => || ffi::astal_battery_iu_power_device_get_type(),
    }
}

impl IUPowerDevice {
        pub const NONE: Option<&'static IUPowerDevice> = None;
    
}

pub trait IUPowerDeviceExt: IsA<IUPowerDevice> + 'static {
    #[doc(alias = "astal_battery_iu_power_device_get_history")]
    #[doc(alias = "get_history")]
    fn history(&self, type_: &str, timespan: u32, resolution: u32) -> Result<Vec<HistoryDataPoint>, glib::Error> {
        unsafe {
            let mut result_length1 = std::mem::MaybeUninit::uninit();
            let mut error = std::ptr::null_mut();
            let mut ret = ffi::astal_battery_iu_power_device_get_history(self.as_ref().to_glib_none().0, type_.to_glib_none().0, timespan, resolution, result_length1.as_mut_ptr(), &mut error);
            if error.is_null() { Ok(FromGlibContainer::from_glib_full_num(&mut ret as *mut _, result_length1.assume_init() as _)) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_get_statistics")]
    #[doc(alias = "get_statistics")]
    fn statistics(&self, type_: &str) -> Result<Vec<StatisticsDataPoint>, glib::Error> {
        unsafe {
            let mut result_length1 = std::mem::MaybeUninit::uninit();
            let mut error = std::ptr::null_mut();
            let mut ret = ffi::astal_battery_iu_power_device_get_statistics(self.as_ref().to_glib_none().0, type_.to_glib_none().0, result_length1.as_mut_ptr(), &mut error);
            if error.is_null() { Ok(FromGlibContainer::from_glib_full_num(&mut ret as *mut _, result_length1.assume_init() as _)) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_refresh")]
    fn refresh(&self) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let _ = ffi::astal_battery_iu_power_device_refresh(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_get_Type")]
    #[doc(alias = "get_Type")]
    fn Type(&self) -> u32 {
        unsafe {
            ffi::astal_battery_iu_power_device_get_Type(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_get_native_path")]
    #[doc(alias = "get_native_path")]
    fn native_path(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_battery_iu_power_device_get_native_path(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_get_vendor")]
    #[doc(alias = "get_vendor")]
    fn vendor(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_battery_iu_power_device_get_vendor(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_get_model")]
    #[doc(alias = "get_model")]
    fn model(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_battery_iu_power_device_get_model(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_get_serial")]
    #[doc(alias = "get_serial")]
    fn serial(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_battery_iu_power_device_get_serial(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_get_update_time")]
    #[doc(alias = "get_update_time")]
    fn update_time(&self) -> u64 {
        unsafe {
            ffi::astal_battery_iu_power_device_get_update_time(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_get_power_supply")]
    #[doc(alias = "get_power_supply")]
    fn is_power_supply(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_battery_iu_power_device_get_power_supply(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_get_has_history")]
    #[doc(alias = "get_has_history")]
    fn has_history(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_battery_iu_power_device_get_has_history(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_get_has_statistics")]
    #[doc(alias = "get_has_statistics")]
    fn has_statistics(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_battery_iu_power_device_get_has_statistics(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_get_online")]
    #[doc(alias = "get_online")]
    fn is_online(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_battery_iu_power_device_get_online(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_get_energy")]
    #[doc(alias = "get_energy")]
    fn energy(&self) -> f64 {
        unsafe {
            ffi::astal_battery_iu_power_device_get_energy(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_get_energy_empty")]
    #[doc(alias = "get_energy_empty")]
    fn energy_empty(&self) -> f64 {
        unsafe {
            ffi::astal_battery_iu_power_device_get_energy_empty(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_get_energy_full")]
    #[doc(alias = "get_energy_full")]
    fn energy_full(&self) -> f64 {
        unsafe {
            ffi::astal_battery_iu_power_device_get_energy_full(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_get_energy_full_design")]
    #[doc(alias = "get_energy_full_design")]
    fn energy_full_design(&self) -> f64 {
        unsafe {
            ffi::astal_battery_iu_power_device_get_energy_full_design(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_get_energy_rate")]
    #[doc(alias = "get_energy_rate")]
    fn energy_rate(&self) -> f64 {
        unsafe {
            ffi::astal_battery_iu_power_device_get_energy_rate(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_get_voltage")]
    #[doc(alias = "get_voltage")]
    fn voltage(&self) -> f64 {
        unsafe {
            ffi::astal_battery_iu_power_device_get_voltage(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_get_charge_cycles")]
    #[doc(alias = "get_charge_cycles")]
    fn charge_cycles(&self) -> i32 {
        unsafe {
            ffi::astal_battery_iu_power_device_get_charge_cycles(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_get_luminosity")]
    #[doc(alias = "get_luminosity")]
    fn luminosity(&self) -> f64 {
        unsafe {
            ffi::astal_battery_iu_power_device_get_luminosity(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_get_time_to_empty")]
    #[doc(alias = "get_time_to_empty")]
    fn time_to_empty(&self) -> i64 {
        unsafe {
            ffi::astal_battery_iu_power_device_get_time_to_empty(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_get_time_to_full")]
    #[doc(alias = "get_time_to_full")]
    fn time_to_full(&self) -> i64 {
        unsafe {
            ffi::astal_battery_iu_power_device_get_time_to_full(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_get_percentage")]
    #[doc(alias = "get_percentage")]
    fn percentage(&self) -> f64 {
        unsafe {
            ffi::astal_battery_iu_power_device_get_percentage(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_get_temperature")]
    #[doc(alias = "get_temperature")]
    fn temperature(&self) -> f64 {
        unsafe {
            ffi::astal_battery_iu_power_device_get_temperature(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_get_is_present")]
    #[doc(alias = "get_is_present")]
    fn is_present(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_battery_iu_power_device_get_is_present(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_get_state")]
    #[doc(alias = "get_state")]
    fn state(&self) -> u32 {
        unsafe {
            ffi::astal_battery_iu_power_device_get_state(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_get_is_rechargable")]
    #[doc(alias = "get_is_rechargable")]
    fn is_rechargable(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_battery_iu_power_device_get_is_rechargable(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_get_capacity")]
    #[doc(alias = "get_capacity")]
    fn capacity(&self) -> f64 {
        unsafe {
            ffi::astal_battery_iu_power_device_get_capacity(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_get_technology")]
    #[doc(alias = "get_technology")]
    fn technology(&self) -> u32 {
        unsafe {
            ffi::astal_battery_iu_power_device_get_technology(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_get_warning_level")]
    #[doc(alias = "get_warning_level")]
    fn warning_level(&self) -> u32 {
        unsafe {
            ffi::astal_battery_iu_power_device_get_warning_level(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_get_battery_level")]
    #[doc(alias = "get_battery_level")]
    fn battery_level(&self) -> u32 {
        unsafe {
            ffi::astal_battery_iu_power_device_get_battery_level(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_iu_power_device_get_icon_name")]
    #[doc(alias = "get_icon_name")]
    fn icon_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_battery_iu_power_device_get_icon_name(self.as_ref().to_glib_none().0))
        }
    }
}

impl<O: IsA<IUPowerDevice>> IUPowerDeviceExt for O {}
