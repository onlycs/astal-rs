// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../../gir/gir-files
// DO NOT EDIT

use crate::{ffi,BatteryLevel,State,Technology,Type,WarningLevel};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "AstalBatteryDevice")]
    pub struct Device(Object<ffi::AstalBatteryDevice, ffi::AstalBatteryDeviceClass>);

    match fn {
        type_ => || ffi::astal_battery_device_get_type(),
    }
}

impl Device {
        pub const NONE: Option<&'static Device> = None;
    

    #[doc(alias = "astal_battery_device_new")]
    pub fn new(path: &str) -> Result<Device, glib::Error> {
        assert_initialized_main_thread!();
        unsafe {
            let mut error = std::ptr::null_mut();
            let mut ret = ffi::astal_battery_device_new(path.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Device`] objects.
            ///
            /// This method returns an instance of [`DeviceBuilder`](crate::builders::DeviceBuilder) which can be used to create [`Device`] objects.
            pub fn builder() -> DeviceBuilder {
                DeviceBuilder::new()
            }
        

    #[doc(alias = "astal_battery_device_get_default")]
    #[doc(alias = "get_default")]
    #[allow(clippy::should_implement_trait)]    pub fn default() -> Option<Device> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::astal_battery_device_get_default())
        }
    }
}

impl Default for Device {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Device`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct DeviceBuilder {
            builder: glib::object::ObjectBuilder<'static, Device>,
        }

        impl DeviceBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn device_type(self, device_type: Type) -> Self {
                            
                            Self { builder: self.builder.property("device-type", device_type), }
                        }

                            pub fn native_path(self, native_path: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("native-path", native_path.into()), }
                        }

                            pub fn vendor(self, vendor: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("vendor", vendor.into()), }
                        }

                            pub fn model(self, model: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("model", model.into()), }
                        }

                            pub fn serial(self, serial: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("serial", serial.into()), }
                        }

                            pub fn update_time(self, update_time: u64) -> Self {
                            
                            Self { builder: self.builder.property("update-time", update_time), }
                        }

                            pub fn power_supply(self, power_supply: bool) -> Self {
                            
                            Self { builder: self.builder.property("power-supply", power_supply), }
                        }

                            pub fn online(self, online: bool) -> Self {
                            
                            Self { builder: self.builder.property("online", online), }
                        }

                            pub fn energy(self, energy: f64) -> Self {
                            
                            Self { builder: self.builder.property("energy", energy), }
                        }

                            pub fn energy_empty(self, energy_empty: f64) -> Self {
                            
                            Self { builder: self.builder.property("energy-empty", energy_empty), }
                        }

                            pub fn energy_full(self, energy_full: f64) -> Self {
                            
                            Self { builder: self.builder.property("energy-full", energy_full), }
                        }

                            pub fn energy_full_design(self, energy_full_design: f64) -> Self {
                            
                            Self { builder: self.builder.property("energy-full-design", energy_full_design), }
                        }

                            pub fn energy_rate(self, energy_rate: f64) -> Self {
                            
                            Self { builder: self.builder.property("energy-rate", energy_rate), }
                        }

                            pub fn voltage(self, voltage: f64) -> Self {
                            
                            Self { builder: self.builder.property("voltage", voltage), }
                        }

                            pub fn charge_cycles(self, charge_cycles: i32) -> Self {
                            
                            Self { builder: self.builder.property("charge-cycles", charge_cycles), }
                        }

                            pub fn luminosity(self, luminosity: f64) -> Self {
                            
                            Self { builder: self.builder.property("luminosity", luminosity), }
                        }

                            pub fn time_to_empty(self, time_to_empty: i64) -> Self {
                            
                            Self { builder: self.builder.property("time-to-empty", time_to_empty), }
                        }

                            pub fn time_to_full(self, time_to_full: i64) -> Self {
                            
                            Self { builder: self.builder.property("time-to-full", time_to_full), }
                        }

                            pub fn percentage(self, percentage: f64) -> Self {
                            
                            Self { builder: self.builder.property("percentage", percentage), }
                        }

                            pub fn temperature(self, temperature: f64) -> Self {
                            
                            Self { builder: self.builder.property("temperature", temperature), }
                        }

                            pub fn is_present(self, is_present: bool) -> Self {
                            
                            Self { builder: self.builder.property("is-present", is_present), }
                        }

                            pub fn state(self, state: State) -> Self {
                            
                            Self { builder: self.builder.property("state", state), }
                        }

                            pub fn is_rechargable(self, is_rechargable: bool) -> Self {
                            
                            Self { builder: self.builder.property("is-rechargable", is_rechargable), }
                        }

                            pub fn capacity(self, capacity: f64) -> Self {
                            
                            Self { builder: self.builder.property("capacity", capacity), }
                        }

                            pub fn technology(self, technology: Technology) -> Self {
                            
                            Self { builder: self.builder.property("technology", technology), }
                        }

                            pub fn warning_level(self, warning_level: WarningLevel) -> Self {
                            
                            Self { builder: self.builder.property("warning-level", warning_level), }
                        }

                            pub fn battery_level(self, battery_level: BatteryLevel) -> Self {
                            
                            Self { builder: self.builder.property("battery-level", battery_level), }
                        }

                            pub fn icon_name(self, icon_name: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("icon-name", icon_name.into()), }
                        }

                            pub fn charging(self, charging: bool) -> Self {
                            
                            Self { builder: self.builder.property("charging", charging), }
                        }

                            pub fn is_battery(self, is_battery: bool) -> Self {
                            
                            Self { builder: self.builder.property("is-battery", is_battery), }
                        }

                            pub fn battery_icon_name(self, battery_icon_name: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("battery-icon-name", battery_icon_name.into()), }
                        }

                            pub fn device_type_name(self, device_type_name: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("device-type-name", device_type_name.into()), }
                        }

                            pub fn device_type_icon(self, device_type_icon: impl Into<glib::GString>) -> Self {
                            
                            Self { builder: self.builder.property("device-type-icon", device_type_icon.into()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`Device`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Device {
assert_initialized_main_thread!();
    self.builder.build() }
}

pub trait DeviceExt: IsA<Device> + 'static {
    #[doc(alias = "astal_battery_device_get_device_type")]
    #[doc(alias = "get_device_type")]
    fn device_type(&self) -> Type {
        unsafe {
            from_glib(ffi::astal_battery_device_get_device_type(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_device_get_native_path")]
    #[doc(alias = "get_native_path")]
    fn native_path(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_battery_device_get_native_path(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_device_get_vendor")]
    #[doc(alias = "get_vendor")]
    fn vendor(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_battery_device_get_vendor(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_device_get_model")]
    #[doc(alias = "get_model")]
    fn model(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_battery_device_get_model(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_device_get_serial")]
    #[doc(alias = "get_serial")]
    fn serial(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_battery_device_get_serial(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_device_get_update_time")]
    #[doc(alias = "get_update_time")]
    fn update_time(&self) -> u64 {
        unsafe {
            ffi::astal_battery_device_get_update_time(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_device_get_power_supply")]
    #[doc(alias = "get_power_supply")]
    fn is_power_supply(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_battery_device_get_power_supply(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_device_get_online")]
    #[doc(alias = "get_online")]
    fn is_online(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_battery_device_get_online(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_device_get_energy")]
    #[doc(alias = "get_energy")]
    fn energy(&self) -> f64 {
        unsafe {
            ffi::astal_battery_device_get_energy(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_device_get_energy_empty")]
    #[doc(alias = "get_energy_empty")]
    fn energy_empty(&self) -> f64 {
        unsafe {
            ffi::astal_battery_device_get_energy_empty(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_device_get_energy_full")]
    #[doc(alias = "get_energy_full")]
    fn energy_full(&self) -> f64 {
        unsafe {
            ffi::astal_battery_device_get_energy_full(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_device_get_energy_full_design")]
    #[doc(alias = "get_energy_full_design")]
    fn energy_full_design(&self) -> f64 {
        unsafe {
            ffi::astal_battery_device_get_energy_full_design(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_device_get_energy_rate")]
    #[doc(alias = "get_energy_rate")]
    fn energy_rate(&self) -> f64 {
        unsafe {
            ffi::astal_battery_device_get_energy_rate(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_device_get_voltage")]
    #[doc(alias = "get_voltage")]
    fn voltage(&self) -> f64 {
        unsafe {
            ffi::astal_battery_device_get_voltage(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_device_get_charge_cycles")]
    #[doc(alias = "get_charge_cycles")]
    fn charge_cycles(&self) -> i32 {
        unsafe {
            ffi::astal_battery_device_get_charge_cycles(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_device_get_luminosity")]
    #[doc(alias = "get_luminosity")]
    fn luminosity(&self) -> f64 {
        unsafe {
            ffi::astal_battery_device_get_luminosity(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_device_get_time_to_empty")]
    #[doc(alias = "get_time_to_empty")]
    fn time_to_empty(&self) -> i64 {
        unsafe {
            ffi::astal_battery_device_get_time_to_empty(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_device_get_time_to_full")]
    #[doc(alias = "get_time_to_full")]
    fn time_to_full(&self) -> i64 {
        unsafe {
            ffi::astal_battery_device_get_time_to_full(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_device_get_percentage")]
    #[doc(alias = "get_percentage")]
    fn percentage(&self) -> f64 {
        unsafe {
            ffi::astal_battery_device_get_percentage(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_device_get_temperature")]
    #[doc(alias = "get_temperature")]
    fn temperature(&self) -> f64 {
        unsafe {
            ffi::astal_battery_device_get_temperature(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_device_get_is_present")]
    #[doc(alias = "get_is_present")]
    fn is_present(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_battery_device_get_is_present(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_device_get_state")]
    #[doc(alias = "get_state")]
    fn state(&self) -> State {
        unsafe {
            from_glib(ffi::astal_battery_device_get_state(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_device_get_is_rechargable")]
    #[doc(alias = "get_is_rechargable")]
    fn is_rechargable(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_battery_device_get_is_rechargable(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_device_get_capacity")]
    #[doc(alias = "get_capacity")]
    fn capacity(&self) -> f64 {
        unsafe {
            ffi::astal_battery_device_get_capacity(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_battery_device_get_technology")]
    #[doc(alias = "get_technology")]
    fn technology(&self) -> Technology {
        unsafe {
            from_glib(ffi::astal_battery_device_get_technology(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_device_get_warning_level")]
    #[doc(alias = "get_warning_level")]
    fn warning_level(&self) -> WarningLevel {
        unsafe {
            from_glib(ffi::astal_battery_device_get_warning_level(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_device_get_battery_level")]
    #[doc(alias = "get_battery_level")]
    fn battery_level(&self) -> BatteryLevel {
        unsafe {
            from_glib(ffi::astal_battery_device_get_battery_level(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_device_get_icon_name")]
    #[doc(alias = "get_icon_name")]
    fn icon_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_battery_device_get_icon_name(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_device_get_charging")]
    #[doc(alias = "get_charging")]
    fn is_charging(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_battery_device_get_charging(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_device_get_is_battery")]
    #[doc(alias = "get_is_battery")]
    fn is_battery(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_battery_device_get_is_battery(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_device_get_battery_icon_name")]
    #[doc(alias = "get_battery_icon_name")]
    fn battery_icon_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_battery_device_get_battery_icon_name(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_device_get_device_type_name")]
    #[doc(alias = "get_device_type_name")]
    fn device_type_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_battery_device_get_device_type_name(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_device_get_device_type_icon")]
    #[doc(alias = "get_device_type_icon")]
    fn device_type_icon(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_battery_device_get_device_type_icon(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "device-type")]
    fn set_device_type(&self, device_type: Type) {
        ObjectExt::set_property(self.as_ref(),"device-type", device_type)
    }

    #[doc(alias = "native-path")]
    fn set_native_path(&self, native_path: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"native-path", native_path)
    }

    fn set_vendor(&self, vendor: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"vendor", vendor)
    }

    fn set_model(&self, model: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"model", model)
    }

    fn set_serial(&self, serial: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"serial", serial)
    }

    #[doc(alias = "update-time")]
    fn set_update_time(&self, update_time: u64) {
        ObjectExt::set_property(self.as_ref(),"update-time", update_time)
    }

    #[doc(alias = "power-supply")]
    fn set_power_supply(&self, power_supply: bool) {
        ObjectExt::set_property(self.as_ref(),"power-supply", power_supply)
    }

    fn set_online(&self, online: bool) {
        ObjectExt::set_property(self.as_ref(),"online", online)
    }

    fn set_energy(&self, energy: f64) {
        ObjectExt::set_property(self.as_ref(),"energy", energy)
    }

    #[doc(alias = "energy-empty")]
    fn set_energy_empty(&self, energy_empty: f64) {
        ObjectExt::set_property(self.as_ref(),"energy-empty", energy_empty)
    }

    #[doc(alias = "energy-full")]
    fn set_energy_full(&self, energy_full: f64) {
        ObjectExt::set_property(self.as_ref(),"energy-full", energy_full)
    }

    #[doc(alias = "energy-full-design")]
    fn set_energy_full_design(&self, energy_full_design: f64) {
        ObjectExt::set_property(self.as_ref(),"energy-full-design", energy_full_design)
    }

    #[doc(alias = "energy-rate")]
    fn set_energy_rate(&self, energy_rate: f64) {
        ObjectExt::set_property(self.as_ref(),"energy-rate", energy_rate)
    }

    fn set_voltage(&self, voltage: f64) {
        ObjectExt::set_property(self.as_ref(),"voltage", voltage)
    }

    #[doc(alias = "charge-cycles")]
    fn set_charge_cycles(&self, charge_cycles: i32) {
        ObjectExt::set_property(self.as_ref(),"charge-cycles", charge_cycles)
    }

    fn set_luminosity(&self, luminosity: f64) {
        ObjectExt::set_property(self.as_ref(),"luminosity", luminosity)
    }

    #[doc(alias = "time-to-empty")]
    fn set_time_to_empty(&self, time_to_empty: i64) {
        ObjectExt::set_property(self.as_ref(),"time-to-empty", time_to_empty)
    }

    #[doc(alias = "time-to-full")]
    fn set_time_to_full(&self, time_to_full: i64) {
        ObjectExt::set_property(self.as_ref(),"time-to-full", time_to_full)
    }

    fn set_percentage(&self, percentage: f64) {
        ObjectExt::set_property(self.as_ref(),"percentage", percentage)
    }

    fn set_temperature(&self, temperature: f64) {
        ObjectExt::set_property(self.as_ref(),"temperature", temperature)
    }

    #[doc(alias = "is-present")]
    fn set_is_present(&self, is_present: bool) {
        ObjectExt::set_property(self.as_ref(),"is-present", is_present)
    }

    fn set_state(&self, state: State) {
        ObjectExt::set_property(self.as_ref(),"state", state)
    }

    #[doc(alias = "is-rechargable")]
    fn set_is_rechargable(&self, is_rechargable: bool) {
        ObjectExt::set_property(self.as_ref(),"is-rechargable", is_rechargable)
    }

    fn set_capacity(&self, capacity: f64) {
        ObjectExt::set_property(self.as_ref(),"capacity", capacity)
    }

    fn set_technology(&self, technology: Technology) {
        ObjectExt::set_property(self.as_ref(),"technology", technology)
    }

    #[doc(alias = "warning-level")]
    fn set_warning_level(&self, warning_level: WarningLevel) {
        ObjectExt::set_property(self.as_ref(),"warning-level", warning_level)
    }

    #[doc(alias = "battery-level")]
    fn set_battery_level(&self, battery_level: BatteryLevel) {
        ObjectExt::set_property(self.as_ref(),"battery-level", battery_level)
    }

    #[doc(alias = "icon-name")]
    fn set_icon_name(&self, icon_name: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"icon-name", icon_name)
    }

    fn set_charging(&self, charging: bool) {
        ObjectExt::set_property(self.as_ref(),"charging", charging)
    }

    #[doc(alias = "is-battery")]
    fn set_is_battery(&self, is_battery: bool) {
        ObjectExt::set_property(self.as_ref(),"is-battery", is_battery)
    }

    #[doc(alias = "battery-icon-name")]
    fn set_battery_icon_name(&self, battery_icon_name: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"battery-icon-name", battery_icon_name)
    }

    #[doc(alias = "device-type-name")]
    fn set_device_type_name(&self, device_type_name: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"device-type-name", device_type_name)
    }

    #[doc(alias = "device-type-icon")]
    fn set_device_type_icon(&self, device_type_icon: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"device-type-icon", device_type_icon)
    }

    #[doc(alias = "device-type")]
    fn connect_device_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_device_type_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::device-type\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_device_type_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "native-path")]
    fn connect_native_path_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_native_path_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::native-path\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_native_path_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "vendor")]
    fn connect_vendor_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_vendor_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::vendor\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_vendor_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "model")]
    fn connect_model_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_model_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::model\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_model_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "serial")]
    fn connect_serial_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_serial_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::serial\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_serial_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "update-time")]
    fn connect_update_time_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_update_time_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::update-time\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_update_time_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "power-supply")]
    fn connect_power_supply_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_power_supply_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::power-supply\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_power_supply_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "online")]
    fn connect_online_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_online_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::online\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_online_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "energy")]
    fn connect_energy_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_energy_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::energy\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_energy_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "energy-empty")]
    fn connect_energy_empty_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_energy_empty_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::energy-empty\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_energy_empty_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "energy-full")]
    fn connect_energy_full_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_energy_full_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::energy-full\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_energy_full_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "energy-full-design")]
    fn connect_energy_full_design_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_energy_full_design_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::energy-full-design\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_energy_full_design_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "energy-rate")]
    fn connect_energy_rate_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_energy_rate_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::energy-rate\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_energy_rate_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "voltage")]
    fn connect_voltage_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_voltage_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::voltage\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_voltage_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "charge-cycles")]
    fn connect_charge_cycles_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_charge_cycles_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::charge-cycles\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_charge_cycles_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "luminosity")]
    fn connect_luminosity_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_luminosity_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::luminosity\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_luminosity_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "time-to-empty")]
    fn connect_time_to_empty_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_time_to_empty_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::time-to-empty\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_time_to_empty_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "time-to-full")]
    fn connect_time_to_full_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_time_to_full_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::time-to-full\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_time_to_full_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "percentage")]
    fn connect_percentage_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_percentage_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::percentage\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_percentage_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "temperature")]
    fn connect_temperature_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_temperature_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::temperature\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_temperature_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "is-present")]
    fn connect_is_present_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_is_present_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::is-present\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_is_present_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "state")]
    fn connect_state_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_state_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::state\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_state_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "is-rechargable")]
    fn connect_is_rechargable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_is_rechargable_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::is-rechargable\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_is_rechargable_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "capacity")]
    fn connect_capacity_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_capacity_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::capacity\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_capacity_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "technology")]
    fn connect_technology_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_technology_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::technology\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_technology_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "warning-level")]
    fn connect_warning_level_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_warning_level_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::warning-level\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_warning_level_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "battery-level")]
    fn connect_battery_level_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_battery_level_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::battery-level\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_battery_level_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "icon-name")]
    fn connect_icon_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_icon_name_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::icon-name\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_icon_name_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "charging")]
    fn connect_charging_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_charging_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::charging\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_charging_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "is-battery")]
    fn connect_is_battery_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_is_battery_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::is-battery\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_is_battery_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "battery-icon-name")]
    fn connect_battery_icon_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_battery_icon_name_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::battery-icon-name\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_battery_icon_name_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "device-type-name")]
    fn connect_device_type_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_device_type_name_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::device-type-name\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_device_type_name_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "device-type-icon")]
    fn connect_device_type_icon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_device_type_icon_trampoline<P: IsA<Device>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryDevice, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Device::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::device-type-icon\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_device_type_icon_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Device>> DeviceExt for O {}
