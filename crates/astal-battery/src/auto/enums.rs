// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../../gir/gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{prelude::*,translate::*};

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AstalBatteryBatteryLevel")]
pub enum BatteryLevel {
    #[doc(alias = "ASTAL_BATTERY_BATTERY_LEVEL_UNKNOWN")]
    Unknown,
    #[doc(alias = "ASTAL_BATTERY_BATTERY_LEVEL_NONE")]
    None,
    #[doc(alias = "ASTAL_BATTERY_BATTERY_LEVEL_LOW")]
    Low,
    #[doc(alias = "ASTAL_BATTERY_BATTERY_LEVEL_CRITICIAL")]
    Criticial,
    #[doc(alias = "ASTAL_BATTERY_BATTERY_LEVEL_NORMAL")]
    Normal,
    #[doc(alias = "ASTAL_BATTERY_BATTERY_LEVEL_HIGH")]
    High,
    #[doc(alias = "ASTAL_BATTERY_BATTERY_LEVEL_FULL")]
    Full,
#[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for BatteryLevel {
    type GlibType = ffi::AstalBatteryBatteryLevel;

    #[inline]
fn into_glib(self) -> ffi::AstalBatteryBatteryLevel {
match self {
            Self::Unknown => ffi::ASTAL_BATTERY_BATTERY_LEVEL_UNKNOWN,
            Self::None => ffi::ASTAL_BATTERY_BATTERY_LEVEL_NONE,
            Self::Low => ffi::ASTAL_BATTERY_BATTERY_LEVEL_LOW,
            Self::Criticial => ffi::ASTAL_BATTERY_BATTERY_LEVEL_CRITICIAL,
            Self::Normal => ffi::ASTAL_BATTERY_BATTERY_LEVEL_NORMAL,
            Self::High => ffi::ASTAL_BATTERY_BATTERY_LEVEL_HIGH,
            Self::Full => ffi::ASTAL_BATTERY_BATTERY_LEVEL_FULL,
            Self::__Unknown(value) => value,
}
}
}

#[doc(hidden)]
impl FromGlib<ffi::AstalBatteryBatteryLevel> for BatteryLevel {
    #[inline]
unsafe fn from_glib(value: ffi::AstalBatteryBatteryLevel) -> Self {
        skip_assert_initialized!();
        
match value {
            ffi::ASTAL_BATTERY_BATTERY_LEVEL_UNKNOWN => Self::Unknown,
            ffi::ASTAL_BATTERY_BATTERY_LEVEL_NONE => Self::None,
            ffi::ASTAL_BATTERY_BATTERY_LEVEL_LOW => Self::Low,
            ffi::ASTAL_BATTERY_BATTERY_LEVEL_CRITICIAL => Self::Criticial,
            ffi::ASTAL_BATTERY_BATTERY_LEVEL_NORMAL => Self::Normal,
            ffi::ASTAL_BATTERY_BATTERY_LEVEL_HIGH => Self::High,
            ffi::ASTAL_BATTERY_BATTERY_LEVEL_FULL => Self::Full,
            value => Self::__Unknown(value),
}
}
}

impl StaticType for BatteryLevel {
                #[inline]
    #[doc(alias = "astal_battery_battery_level_get_type")]
   fn static_type() -> glib::Type {
                    unsafe { from_glib(ffi::astal_battery_battery_level_get_type()) }
                }
            }

impl glib::HasParamSpec for BatteryLevel {
                type ParamSpec = glib::ParamSpecEnum;
                type SetValue = Self;
                type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;
    
                fn param_spec_builder() -> Self::BuilderFn {
                    Self::ParamSpec::builder_with_default
                }
}

impl glib::value::ValueType for BatteryLevel {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for BatteryLevel {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for BatteryLevel {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<BatteryLevel> for glib::Value {
    #[inline]
    fn from(v: BatteryLevel) -> Self {
        skip_assert_initialized!();
        ToValue::to_value(&v)
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AstalBatteryState")]
pub enum State {
    #[doc(alias = "ASTAL_BATTERY_STATE_UNKNOWN")]
    Unknown,
    #[doc(alias = "ASTAL_BATTERY_STATE_CHARGING")]
    Charging,
    #[doc(alias = "ASTAL_BATTERY_STATE_DISCHARGING")]
    Discharging,
    #[doc(alias = "ASTAL_BATTERY_STATE_EMPTY")]
    Empty,
    #[doc(alias = "ASTAL_BATTERY_STATE_FULLY_CHARGED")]
    FullyCharged,
    #[doc(alias = "ASTAL_BATTERY_STATE_PENDING_CHARGE")]
    PendingCharge,
    #[doc(alias = "ASTAL_BATTERY_STATE_PENDING_DISCHARGE")]
    PendingDischarge,
#[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for State {
    type GlibType = ffi::AstalBatteryState;

    #[inline]
fn into_glib(self) -> ffi::AstalBatteryState {
match self {
            Self::Unknown => ffi::ASTAL_BATTERY_STATE_UNKNOWN,
            Self::Charging => ffi::ASTAL_BATTERY_STATE_CHARGING,
            Self::Discharging => ffi::ASTAL_BATTERY_STATE_DISCHARGING,
            Self::Empty => ffi::ASTAL_BATTERY_STATE_EMPTY,
            Self::FullyCharged => ffi::ASTAL_BATTERY_STATE_FULLY_CHARGED,
            Self::PendingCharge => ffi::ASTAL_BATTERY_STATE_PENDING_CHARGE,
            Self::PendingDischarge => ffi::ASTAL_BATTERY_STATE_PENDING_DISCHARGE,
            Self::__Unknown(value) => value,
}
}
}

#[doc(hidden)]
impl FromGlib<ffi::AstalBatteryState> for State {
    #[inline]
unsafe fn from_glib(value: ffi::AstalBatteryState) -> Self {
        skip_assert_initialized!();
        
match value {
            ffi::ASTAL_BATTERY_STATE_UNKNOWN => Self::Unknown,
            ffi::ASTAL_BATTERY_STATE_CHARGING => Self::Charging,
            ffi::ASTAL_BATTERY_STATE_DISCHARGING => Self::Discharging,
            ffi::ASTAL_BATTERY_STATE_EMPTY => Self::Empty,
            ffi::ASTAL_BATTERY_STATE_FULLY_CHARGED => Self::FullyCharged,
            ffi::ASTAL_BATTERY_STATE_PENDING_CHARGE => Self::PendingCharge,
            ffi::ASTAL_BATTERY_STATE_PENDING_DISCHARGE => Self::PendingDischarge,
            value => Self::__Unknown(value),
}
}
}

impl StaticType for State {
                #[inline]
    #[doc(alias = "astal_battery_state_get_type")]
   fn static_type() -> glib::Type {
                    unsafe { from_glib(ffi::astal_battery_state_get_type()) }
                }
            }

impl glib::HasParamSpec for State {
                type ParamSpec = glib::ParamSpecEnum;
                type SetValue = Self;
                type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;
    
                fn param_spec_builder() -> Self::BuilderFn {
                    Self::ParamSpec::builder_with_default
                }
}

impl glib::value::ValueType for State {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for State {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for State {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<State> for glib::Value {
    #[inline]
    fn from(v: State) -> Self {
        skip_assert_initialized!();
        ToValue::to_value(&v)
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AstalBatteryTechnology")]
pub enum Technology {
    #[doc(alias = "ASTAL_BATTERY_TECHNOLOGY_UNKNOWN")]
    Unknown,
    #[doc(alias = "ASTAL_BATTERY_TECHNOLOGY_LITHIUM_ION")]
    LithiumIon,
    #[doc(alias = "ASTAL_BATTERY_TECHNOLOGY_LITHIUM_POLYMER")]
    LithiumPolymer,
    #[doc(alias = "ASTAL_BATTERY_TECHNOLOGY_LITHIUM_IRON_PHOSPHATE")]
    LithiumIronPhosphate,
    #[doc(alias = "ASTAL_BATTERY_TECHNOLOGY_LEAD_ACID")]
    LeadAcid,
    #[doc(alias = "ASTAL_BATTERY_TECHNOLOGY_NICKEL_CADMIUM")]
    NickelCadmium,
    #[doc(alias = "ASTAL_BATTERY_TECHNOLOGY_NICKEL_METAL_HYDRIDE")]
    NickelMetalHydride,
#[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for Technology {
    type GlibType = ffi::AstalBatteryTechnology;

    #[inline]
fn into_glib(self) -> ffi::AstalBatteryTechnology {
match self {
            Self::Unknown => ffi::ASTAL_BATTERY_TECHNOLOGY_UNKNOWN,
            Self::LithiumIon => ffi::ASTAL_BATTERY_TECHNOLOGY_LITHIUM_ION,
            Self::LithiumPolymer => ffi::ASTAL_BATTERY_TECHNOLOGY_LITHIUM_POLYMER,
            Self::LithiumIronPhosphate => ffi::ASTAL_BATTERY_TECHNOLOGY_LITHIUM_IRON_PHOSPHATE,
            Self::LeadAcid => ffi::ASTAL_BATTERY_TECHNOLOGY_LEAD_ACID,
            Self::NickelCadmium => ffi::ASTAL_BATTERY_TECHNOLOGY_NICKEL_CADMIUM,
            Self::NickelMetalHydride => ffi::ASTAL_BATTERY_TECHNOLOGY_NICKEL_METAL_HYDRIDE,
            Self::__Unknown(value) => value,
}
}
}

#[doc(hidden)]
impl FromGlib<ffi::AstalBatteryTechnology> for Technology {
    #[inline]
unsafe fn from_glib(value: ffi::AstalBatteryTechnology) -> Self {
        skip_assert_initialized!();
        
match value {
            ffi::ASTAL_BATTERY_TECHNOLOGY_UNKNOWN => Self::Unknown,
            ffi::ASTAL_BATTERY_TECHNOLOGY_LITHIUM_ION => Self::LithiumIon,
            ffi::ASTAL_BATTERY_TECHNOLOGY_LITHIUM_POLYMER => Self::LithiumPolymer,
            ffi::ASTAL_BATTERY_TECHNOLOGY_LITHIUM_IRON_PHOSPHATE => Self::LithiumIronPhosphate,
            ffi::ASTAL_BATTERY_TECHNOLOGY_LEAD_ACID => Self::LeadAcid,
            ffi::ASTAL_BATTERY_TECHNOLOGY_NICKEL_CADMIUM => Self::NickelCadmium,
            ffi::ASTAL_BATTERY_TECHNOLOGY_NICKEL_METAL_HYDRIDE => Self::NickelMetalHydride,
            value => Self::__Unknown(value),
}
}
}

impl StaticType for Technology {
                #[inline]
    #[doc(alias = "astal_battery_technology_get_type")]
   fn static_type() -> glib::Type {
                    unsafe { from_glib(ffi::astal_battery_technology_get_type()) }
                }
            }

impl glib::HasParamSpec for Technology {
                type ParamSpec = glib::ParamSpecEnum;
                type SetValue = Self;
                type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;
    
                fn param_spec_builder() -> Self::BuilderFn {
                    Self::ParamSpec::builder_with_default
                }
}

impl glib::value::ValueType for Technology {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for Technology {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for Technology {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<Technology> for glib::Value {
    #[inline]
    fn from(v: Technology) -> Self {
        skip_assert_initialized!();
        ToValue::to_value(&v)
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AstalBatteryType")]
pub enum Type {
    #[doc(alias = "ASTAL_BATTERY_TYPE_UNKNOWN")]
    Unknown,
    #[doc(alias = "ASTAL_BATTERY_TYPE_LINE_POWER")]
    LinePower,
    #[doc(alias = "ASTAL_BATTERY_TYPE_BATTERY")]
    Battery,
    #[doc(alias = "ASTAL_BATTERY_TYPE_UPS")]
    Ups,
    #[doc(alias = "ASTAL_BATTERY_TYPE_MONITOR")]
    Monitor,
    #[doc(alias = "ASTAL_BATTERY_TYPE_MOUSE")]
    Mouse,
    #[doc(alias = "ASTAL_BATTERY_TYPE_KEYBOARD")]
    Keyboard,
    #[doc(alias = "ASTAL_BATTERY_TYPE_PDA")]
    Pda,
    #[doc(alias = "ASTAL_BATTERY_TYPE_PHONE")]
    Phone,
    #[doc(alias = "ASTAL_BATTERY_TYPE_MEDIA_PLAYER")]
    MediaPlayer,
    #[doc(alias = "ASTAL_BATTERY_TYPE_TABLET")]
    Tablet,
    #[doc(alias = "ASTAL_BATTERY_TYPE_COMPUTER")]
    Computer,
    #[doc(alias = "ASTAL_BATTERY_TYPE_GAMING_INPUT")]
    GamingInput,
    #[doc(alias = "ASTAL_BATTERY_TYPE_PEN")]
    Pen,
    #[doc(alias = "ASTAL_BATTERY_TYPE_TOUCHPAD")]
    Touchpad,
    #[doc(alias = "ASTAL_BATTERY_TYPE_MODEM")]
    Modem,
    #[doc(alias = "ASTAL_BATTERY_TYPE_NETWORK")]
    Network,
    #[doc(alias = "ASTAL_BATTERY_TYPE_HEADSET")]
    Headset,
    #[doc(alias = "ASTAL_BATTERY_TYPE_SPEAKERS")]
    Speakers,
    #[doc(alias = "ASTAL_BATTERY_TYPE_HEADPHONES")]
    Headphones,
    #[doc(alias = "ASTAL_BATTERY_TYPE_VIDEO")]
    Video,
    #[doc(alias = "ASTAL_BATTERY_TYPE_OTHER_AUDIO")]
    OtherAudio,
    #[doc(alias = "ASTAL_BATTERY_TYPE_REMOVE_CONTROL")]
    RemoveControl,
    #[doc(alias = "ASTAL_BATTERY_TYPE_PRINTER")]
    Printer,
    #[doc(alias = "ASTAL_BATTERY_TYPE_SCANNER")]
    Scanner,
    #[doc(alias = "ASTAL_BATTERY_TYPE_CAMERA")]
    Camera,
    #[doc(alias = "ASTAL_BATTERY_TYPE_WEARABLE")]
    Wearable,
    #[doc(alias = "ASTAL_BATTERY_TYPE_TOY")]
    Toy,
    #[doc(alias = "ASTAL_BATTERY_TYPE_BLUETOOTH_GENERIC")]
    BluetoothGeneric,
#[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for Type {
    type GlibType = ffi::AstalBatteryType;

    fn into_glib(self) -> ffi::AstalBatteryType {
match self {
            Self::Unknown => ffi::ASTAL_BATTERY_TYPE_UNKNOWN,
            Self::LinePower => ffi::ASTAL_BATTERY_TYPE_LINE_POWER,
            Self::Battery => ffi::ASTAL_BATTERY_TYPE_BATTERY,
            Self::Ups => ffi::ASTAL_BATTERY_TYPE_UPS,
            Self::Monitor => ffi::ASTAL_BATTERY_TYPE_MONITOR,
            Self::Mouse => ffi::ASTAL_BATTERY_TYPE_MOUSE,
            Self::Keyboard => ffi::ASTAL_BATTERY_TYPE_KEYBOARD,
            Self::Pda => ffi::ASTAL_BATTERY_TYPE_PDA,
            Self::Phone => ffi::ASTAL_BATTERY_TYPE_PHONE,
            Self::MediaPlayer => ffi::ASTAL_BATTERY_TYPE_MEDIA_PLAYER,
            Self::Tablet => ffi::ASTAL_BATTERY_TYPE_TABLET,
            Self::Computer => ffi::ASTAL_BATTERY_TYPE_COMPUTER,
            Self::GamingInput => ffi::ASTAL_BATTERY_TYPE_GAMING_INPUT,
            Self::Pen => ffi::ASTAL_BATTERY_TYPE_PEN,
            Self::Touchpad => ffi::ASTAL_BATTERY_TYPE_TOUCHPAD,
            Self::Modem => ffi::ASTAL_BATTERY_TYPE_MODEM,
            Self::Network => ffi::ASTAL_BATTERY_TYPE_NETWORK,
            Self::Headset => ffi::ASTAL_BATTERY_TYPE_HEADSET,
            Self::Speakers => ffi::ASTAL_BATTERY_TYPE_SPEAKERS,
            Self::Headphones => ffi::ASTAL_BATTERY_TYPE_HEADPHONES,
            Self::Video => ffi::ASTAL_BATTERY_TYPE_VIDEO,
            Self::OtherAudio => ffi::ASTAL_BATTERY_TYPE_OTHER_AUDIO,
            Self::RemoveControl => ffi::ASTAL_BATTERY_TYPE_REMOVE_CONTROL,
            Self::Printer => ffi::ASTAL_BATTERY_TYPE_PRINTER,
            Self::Scanner => ffi::ASTAL_BATTERY_TYPE_SCANNER,
            Self::Camera => ffi::ASTAL_BATTERY_TYPE_CAMERA,
            Self::Wearable => ffi::ASTAL_BATTERY_TYPE_WEARABLE,
            Self::Toy => ffi::ASTAL_BATTERY_TYPE_TOY,
            Self::BluetoothGeneric => ffi::ASTAL_BATTERY_TYPE_BLUETOOTH_GENERIC,
            Self::__Unknown(value) => value,
}
}
}

#[doc(hidden)]
impl FromGlib<ffi::AstalBatteryType> for Type {
    unsafe fn from_glib(value: ffi::AstalBatteryType) -> Self {
        skip_assert_initialized!();
        
match value {
            ffi::ASTAL_BATTERY_TYPE_UNKNOWN => Self::Unknown,
            ffi::ASTAL_BATTERY_TYPE_LINE_POWER => Self::LinePower,
            ffi::ASTAL_BATTERY_TYPE_BATTERY => Self::Battery,
            ffi::ASTAL_BATTERY_TYPE_UPS => Self::Ups,
            ffi::ASTAL_BATTERY_TYPE_MONITOR => Self::Monitor,
            ffi::ASTAL_BATTERY_TYPE_MOUSE => Self::Mouse,
            ffi::ASTAL_BATTERY_TYPE_KEYBOARD => Self::Keyboard,
            ffi::ASTAL_BATTERY_TYPE_PDA => Self::Pda,
            ffi::ASTAL_BATTERY_TYPE_PHONE => Self::Phone,
            ffi::ASTAL_BATTERY_TYPE_MEDIA_PLAYER => Self::MediaPlayer,
            ffi::ASTAL_BATTERY_TYPE_TABLET => Self::Tablet,
            ffi::ASTAL_BATTERY_TYPE_COMPUTER => Self::Computer,
            ffi::ASTAL_BATTERY_TYPE_GAMING_INPUT => Self::GamingInput,
            ffi::ASTAL_BATTERY_TYPE_PEN => Self::Pen,
            ffi::ASTAL_BATTERY_TYPE_TOUCHPAD => Self::Touchpad,
            ffi::ASTAL_BATTERY_TYPE_MODEM => Self::Modem,
            ffi::ASTAL_BATTERY_TYPE_NETWORK => Self::Network,
            ffi::ASTAL_BATTERY_TYPE_HEADSET => Self::Headset,
            ffi::ASTAL_BATTERY_TYPE_SPEAKERS => Self::Speakers,
            ffi::ASTAL_BATTERY_TYPE_HEADPHONES => Self::Headphones,
            ffi::ASTAL_BATTERY_TYPE_VIDEO => Self::Video,
            ffi::ASTAL_BATTERY_TYPE_OTHER_AUDIO => Self::OtherAudio,
            ffi::ASTAL_BATTERY_TYPE_REMOVE_CONTROL => Self::RemoveControl,
            ffi::ASTAL_BATTERY_TYPE_PRINTER => Self::Printer,
            ffi::ASTAL_BATTERY_TYPE_SCANNER => Self::Scanner,
            ffi::ASTAL_BATTERY_TYPE_CAMERA => Self::Camera,
            ffi::ASTAL_BATTERY_TYPE_WEARABLE => Self::Wearable,
            ffi::ASTAL_BATTERY_TYPE_TOY => Self::Toy,
            ffi::ASTAL_BATTERY_TYPE_BLUETOOTH_GENERIC => Self::BluetoothGeneric,
            value => Self::__Unknown(value),
}
}
}

impl StaticType for Type {
                #[inline]
    #[doc(alias = "astal_battery_type_get_type")]
   fn static_type() -> glib::Type {
                    unsafe { from_glib(ffi::astal_battery_type_get_type()) }
                }
            }

impl glib::HasParamSpec for Type {
                type ParamSpec = glib::ParamSpecEnum;
                type SetValue = Self;
                type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;
    
                fn param_spec_builder() -> Self::BuilderFn {
                    Self::ParamSpec::builder_with_default
                }
}

impl glib::value::ValueType for Type {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for Type {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for Type {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<Type> for glib::Value {
    #[inline]
    fn from(v: Type) -> Self {
        skip_assert_initialized!();
        ToValue::to_value(&v)
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AstalBatteryWarningLevel")]
pub enum WarningLevel {
    #[doc(alias = "ASTAL_BATTERY_WARNING_LEVEL_UNKNOWN")]
    Unknown,
    #[doc(alias = "ASTAL_BATTERY_WARNING_LEVEL_NONE")]
    None,
    #[doc(alias = "ASTAL_BATTERY_WARNING_LEVEL_DISCHARGING")]
    Discharging,
    #[doc(alias = "ASTAL_BATTERY_WARNING_LEVEL_LOW")]
    Low,
    #[doc(alias = "ASTAL_BATTERY_WARNING_LEVEL_CRITICIAL")]
    Criticial,
    #[doc(alias = "ASTAL_BATTERY_WARNING_LEVEL_ACTION")]
    Action,
#[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for WarningLevel {
    type GlibType = ffi::AstalBatteryWarningLevel;

    #[inline]
fn into_glib(self) -> ffi::AstalBatteryWarningLevel {
match self {
            Self::Unknown => ffi::ASTAL_BATTERY_WARNING_LEVEL_UNKNOWN,
            Self::None => ffi::ASTAL_BATTERY_WARNING_LEVEL_NONE,
            Self::Discharging => ffi::ASTAL_BATTERY_WARNING_LEVEL_DISCHARGING,
            Self::Low => ffi::ASTAL_BATTERY_WARNING_LEVEL_LOW,
            Self::Criticial => ffi::ASTAL_BATTERY_WARNING_LEVEL_CRITICIAL,
            Self::Action => ffi::ASTAL_BATTERY_WARNING_LEVEL_ACTION,
            Self::__Unknown(value) => value,
}
}
}

#[doc(hidden)]
impl FromGlib<ffi::AstalBatteryWarningLevel> for WarningLevel {
    #[inline]
unsafe fn from_glib(value: ffi::AstalBatteryWarningLevel) -> Self {
        skip_assert_initialized!();
        
match value {
            ffi::ASTAL_BATTERY_WARNING_LEVEL_UNKNOWN => Self::Unknown,
            ffi::ASTAL_BATTERY_WARNING_LEVEL_NONE => Self::None,
            ffi::ASTAL_BATTERY_WARNING_LEVEL_DISCHARGING => Self::Discharging,
            ffi::ASTAL_BATTERY_WARNING_LEVEL_LOW => Self::Low,
            ffi::ASTAL_BATTERY_WARNING_LEVEL_CRITICIAL => Self::Criticial,
            ffi::ASTAL_BATTERY_WARNING_LEVEL_ACTION => Self::Action,
            value => Self::__Unknown(value),
}
}
}

impl StaticType for WarningLevel {
                #[inline]
    #[doc(alias = "astal_battery_warning_level_get_type")]
   fn static_type() -> glib::Type {
                    unsafe { from_glib(ffi::astal_battery_warning_level_get_type()) }
                }
            }

impl glib::HasParamSpec for WarningLevel {
                type ParamSpec = glib::ParamSpecEnum;
                type SetValue = Self;
                type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;
    
                fn param_spec_builder() -> Self::BuilderFn {
                    Self::ParamSpec::builder_with_default
                }
}

impl glib::value::ValueType for WarningLevel {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for WarningLevel {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for WarningLevel {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<WarningLevel> for glib::Value {
    #[inline]
    fn from(v: WarningLevel) -> Self {
        skip_assert_initialized!();
        ToValue::to_value(&v)
    }
}

