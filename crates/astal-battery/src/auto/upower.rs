// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../../gir/gir-files
// DO NOT EDIT

use crate::{ffi,Device};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "AstalBatteryUPower")]
    pub struct UPower(Object<ffi::AstalBatteryUPower, ffi::AstalBatteryUPowerClass>);

    match fn {
        type_ => || ffi::astal_battery_upower_get_type(),
    }
}

impl UPower {
        pub const NONE: Option<&'static UPower> = None;
    

    #[doc(alias = "astal_battery_upower_new")]
    pub fn new() -> UPower {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::astal_battery_upower_new())
        }
    }
}

impl Default for UPower {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

pub trait UPowerExt: IsA<UPower> + 'static {
    #[doc(alias = "astal_battery_upower_get_devices")]
    #[doc(alias = "get_devices")]
    fn devices(&self) -> Vec<Device> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::astal_battery_upower_get_devices(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_upower_get_display_device")]
    #[doc(alias = "get_display_device")]
    fn display_device(&self) -> Option<Device> {
        unsafe {
            from_glib_full(ffi::astal_battery_upower_get_display_device(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_upower_get_daemon_version")]
    #[doc(alias = "get_daemon_version")]
    fn daemon_version(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_battery_upower_get_daemon_version(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_upower_get_on_battery")]
    #[doc(alias = "get_on_battery")]
    fn is_on_battery(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_battery_upower_get_on_battery(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_upower_get_lid_is_closed")]
    #[doc(alias = "get_lid_is_closed")]
    fn is_lid_is_closed(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_battery_upower_get_lid_is_closed(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_upower_get_lis_is_present")]
    #[doc(alias = "get_lis_is_present")]
    fn is_lis_is_present(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_battery_upower_get_lis_is_present(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_battery_upower_get_critical_action")]
    #[doc(alias = "get_critical_action")]
    fn critical_action(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_battery_upower_get_critical_action(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "device-added")]
    fn connect_device_added<F: Fn(&Self, &Device) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn device_added_trampoline<P: IsA<UPower>, F: Fn(&P, &Device) + 'static>(this: *mut ffi::AstalBatteryUPower, device: *mut ffi::AstalBatteryDevice, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(UPower::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(device))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"device-added\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(device_added_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "device-removed")]
    fn connect_device_removed<F: Fn(&Self, &Device) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn device_removed_trampoline<P: IsA<UPower>, F: Fn(&P, &Device) + 'static>(this: *mut ffi::AstalBatteryUPower, device: *mut ffi::AstalBatteryDevice, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(UPower::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(device))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"device-removed\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(device_removed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "devices")]
    fn connect_devices_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_devices_trampoline<P: IsA<UPower>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryUPower, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(UPower::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::devices\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_devices_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "display-device")]
    fn connect_display_device_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_display_device_trampoline<P: IsA<UPower>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryUPower, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(UPower::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::display-device\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_display_device_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "daemon-version")]
    fn connect_daemon_version_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_daemon_version_trampoline<P: IsA<UPower>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryUPower, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(UPower::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::daemon-version\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_daemon_version_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "on-battery")]
    fn connect_on_battery_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_on_battery_trampoline<P: IsA<UPower>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryUPower, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(UPower::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::on-battery\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_on_battery_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "lid-is-closed")]
    fn connect_lid_is_closed_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_lid_is_closed_trampoline<P: IsA<UPower>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryUPower, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(UPower::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::lid-is-closed\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_lid_is_closed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "lis-is-present")]
    fn connect_lis_is_present_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_lis_is_present_trampoline<P: IsA<UPower>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryUPower, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(UPower::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::lis-is-present\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_lis_is_present_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "critical-action")]
    fn connect_critical_action_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_critical_action_trampoline<P: IsA<UPower>, F: Fn(&P) + 'static>(this: *mut ffi::AstalBatteryUPower, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(UPower::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::critical-action\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_critical_action_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<UPower>> UPowerExt for O {}
