// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../../gir/gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "AstalRiverOutput")]
    pub struct Output(Object<ffi::AstalRiverOutput, ffi::AstalRiverOutputClass>);

    match fn {
        type_ => || ffi::astal_river_output_get_type(),
    }
}

impl Output {
    #[doc(alias = "astal_river_output_get_focused_tags")]
    #[doc(alias = "get_focused_tags")]
    #[doc(alias = "focused-tags")]
    pub fn focused_tags(&self) -> u32 {
        unsafe {
            ffi::astal_river_output_get_focused_tags(self.to_glib_none().0)
        }
    }

    #[doc(alias = "astal_river_output_get_focused_view")]
    #[doc(alias = "get_focused_view")]
    #[doc(alias = "focused-view")]
    pub fn focused_view(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_river_output_get_focused_view(self.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_river_output_get_id")]
    #[doc(alias = "get_id")]
    pub fn id(&self) -> u32 {
        unsafe {
            ffi::astal_river_output_get_id(self.to_glib_none().0)
        }
    }

    #[doc(alias = "astal_river_output_get_layout_name")]
    #[doc(alias = "get_layout_name")]
    #[doc(alias = "layout-name")]
    pub fn layout_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_river_output_get_layout_name(self.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_river_output_get_name")]
    #[doc(alias = "get_name")]
    pub fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_river_output_get_name(self.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_river_output_get_occupied_tags")]
    #[doc(alias = "get_occupied_tags")]
    #[doc(alias = "occupied-tags")]
    pub fn occupied_tags(&self) -> u32 {
        unsafe {
            ffi::astal_river_output_get_occupied_tags(self.to_glib_none().0)
        }
    }

    #[doc(alias = "astal_river_output_get_urgent_tags")]
    #[doc(alias = "get_urgent_tags")]
    #[doc(alias = "urgent-tags")]
    pub fn urgent_tags(&self) -> u32 {
        unsafe {
            ffi::astal_river_output_get_urgent_tags(self.to_glib_none().0)
        }
    }

    #[doc(alias = "astal_river_output_set_focused_tags")]
    #[doc(alias = "focused-tags")]
    pub fn set_focused_tags(&self, tags: u32) {
        unsafe {
            ffi::astal_river_output_set_focused_tags(self.to_glib_none().0, tags);
        }
    }

    #[doc(alias = "changed")]
    pub fn connect_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn changed_trampoline<F: Fn(&Output) + 'static>(this: *mut ffi::AstalRiverOutput, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"changed\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(changed_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "focused-tags")]
    pub fn connect_focused_tags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_focused_tags_trampoline<F: Fn(&Output) + 'static>(this: *mut ffi::AstalRiverOutput, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::focused-tags\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_focused_tags_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "focused-view")]
    pub fn connect_focused_view_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_focused_view_trampoline<F: Fn(&Output) + 'static>(this: *mut ffi::AstalRiverOutput, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::focused-view\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_focused_view_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "id")]
    pub fn connect_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_id_trampoline<F: Fn(&Output) + 'static>(this: *mut ffi::AstalRiverOutput, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::id\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_id_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "layout-name")]
    pub fn connect_layout_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_layout_name_trampoline<F: Fn(&Output) + 'static>(this: *mut ffi::AstalRiverOutput, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::layout-name\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_layout_name_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "name")]
    pub fn connect_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_trampoline<F: Fn(&Output) + 'static>(this: *mut ffi::AstalRiverOutput, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::name\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_name_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "occupied-tags")]
    pub fn connect_occupied_tags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_occupied_tags_trampoline<F: Fn(&Output) + 'static>(this: *mut ffi::AstalRiverOutput, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::occupied-tags\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_occupied_tags_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "urgent-tags")]
    pub fn connect_urgent_tags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_urgent_tags_trampoline<F: Fn(&Output) + 'static>(this: *mut ffi::AstalRiverOutput, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::urgent-tags\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_urgent_tags_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}
