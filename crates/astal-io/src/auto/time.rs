// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../../gobject/gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "AstalIOTime")]
    pub struct Time(Object<ffi::AstalIOTime, ffi::AstalIOTimeClass>);

    match fn {
        type_ => || ffi::astal_io_time_get_type(),
    }
}

impl Time {
        pub const NONE: Option<&'static Time> = None;
    

    #[doc(alias = "astal_io_time_new_interval_prio")]
    pub fn interval_prio(interval: u32, prio: i32, fn_: Option<&glib::Closure>) -> Time {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::astal_io_time_new_interval_prio(interval, prio, fn_.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_io_time_new_timeout_prio")]
    pub fn timeout_prio(timeout: u32, prio: i32, fn_: Option<&glib::Closure>) -> Time {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::astal_io_time_new_timeout_prio(timeout, prio, fn_.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_io_time_new_idle_prio")]
    pub fn idle_prio(prio: i32, fn_: Option<&glib::Closure>) -> Time {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::astal_io_time_new_idle_prio(prio, fn_.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_io_time_new")]
    pub fn new() -> Time {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::astal_io_time_new())
        }
    }

    #[doc(alias = "astal_io_time_interval")]
    pub fn interval(interval: u32, fn_: Option<&glib::Closure>) -> Option<Time> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::astal_io_time_interval(interval, fn_.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_io_time_timeout")]
    pub fn timeout(timeout: u32, fn_: Option<&glib::Closure>) -> Option<Time> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::astal_io_time_timeout(timeout, fn_.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_io_time_idle")]
    pub fn idle(fn_: Option<&glib::Closure>) -> Option<Time> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::astal_io_time_idle(fn_.to_glib_none().0))
        }
    }
}

impl Default for Time {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

pub trait TimeExt: IsA<Time> + 'static {
    #[doc(alias = "astal_io_time_cancel")]
    fn cancel(&self) {
        unsafe {
            ffi::astal_io_time_cancel(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "now")]
    fn connect_now<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn now_trampoline<P: IsA<Time>, F: Fn(&P) + 'static>(this: *mut ffi::AstalIOTime, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Time::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"now\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(now_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "cancelled")]
    fn connect_cancelled<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn cancelled_trampoline<P: IsA<Time>, F: Fn(&P) + 'static>(this: *mut ffi::AstalIOTime, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Time::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"cancelled\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(cancelled_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Time>> TimeExt for O {}
