// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../../gobject/gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "AstalIOVariableBase")]
    pub struct VariableBase(Object<ffi::AstalIOVariableBase, ffi::AstalIOVariableBaseClass>);

    match fn {
        type_ => || ffi::astal_io_variable_base_get_type(),
    }
}

impl VariableBase {
        pub const NONE: Option<&'static VariableBase> = None;
    

    #[doc(alias = "astal_io_variable_base_new")]
    pub fn new() -> VariableBase {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::astal_io_variable_base_new())
        }
    }
}

impl Default for VariableBase {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

pub trait VariableBaseExt: IsA<VariableBase> + 'static {
    #[doc(alias = "astal_io_variable_base_emit_changed")]
    fn emit_changed(&self) {
        unsafe {
            ffi::astal_io_variable_base_emit_changed(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "astal_io_variable_base_emit_dropped")]
    fn emit_dropped(&self) {
        unsafe {
            ffi::astal_io_variable_base_emit_dropped(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "astal_io_variable_base_emit_error")]
    fn emit_error(&self, err: &str) {
        unsafe {
            ffi::astal_io_variable_base_emit_error(self.as_ref().to_glib_none().0, err.to_glib_none().0);
        }
    }

    #[doc(alias = "changed")]
    fn connect_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn changed_trampoline<P: IsA<VariableBase>, F: Fn(&P) + 'static>(this: *mut ffi::AstalIOVariableBase, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(VariableBase::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"changed\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(changed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "dropped")]
    fn connect_dropped<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn dropped_trampoline<P: IsA<VariableBase>, F: Fn(&P) + 'static>(this: *mut ffi::AstalIOVariableBase, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(VariableBase::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"dropped\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(dropped_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "error")]
    fn connect_error<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn error_trampoline<P: IsA<VariableBase>, F: Fn(&P, &str) + 'static>(this: *mut ffi::AstalIOVariableBase, err: *const std::ffi::c_char, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(VariableBase::from_glib_borrow(this).unsafe_cast_ref(), &glib::GString::from_glib_borrow(err))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"error\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(error_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<VariableBase>> VariableBaseExt for O {}
