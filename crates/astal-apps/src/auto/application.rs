// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../../gir/gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "AstalAppsApplication")]
    pub struct Application(Object<ffi::AstalAppsApplication, ffi::AstalAppsApplicationClass>);

    match fn {
        type_ => || ffi::astal_apps_application_get_type(),
    }
}

impl Application {
        pub const NONE: Option<&'static Application> = None;
    

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Application`] objects.
            ///
            /// This method returns an instance of [`ApplicationBuilder`](crate::builders::ApplicationBuilder) which can be used to create [`Application`] objects.
            pub fn builder() -> ApplicationBuilder {
                ApplicationBuilder::new()
            }
        
}

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Application`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct ApplicationBuilder {
            builder: glib::object::ObjectBuilder<'static, Application>,
        }

        impl ApplicationBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn app(self, app: &gio::DesktopAppInfo) -> Self {
                            Self { builder: self.builder.property("app", app.clone()), }
                        }

                            pub fn frequency(self, frequency: i32) -> Self {
                            Self { builder: self.builder.property("frequency", frequency), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`Application`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Application {
assert_initialized_main_thread!();
    self.builder.build() }
}

pub trait ApplicationExt: IsA<Application> + 'static {
    #[doc(alias = "astal_apps_application_get_key")]
    #[doc(alias = "get_key")]
    fn key(&self, key: &str) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_apps_application_get_key(self.as_ref().to_glib_none().0, key.to_glib_none().0))
        }
    }

    #[doc(alias = "astal_apps_application_launch")]
    fn launch(&self) -> bool {
        unsafe {
            from_glib(ffi::astal_apps_application_launch(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_apps_application_get_app")]
    #[doc(alias = "get_app")]
    fn app(&self) -> Option<gio::DesktopAppInfo> {
        unsafe {
            from_glib_none(ffi::astal_apps_application_get_app(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_apps_application_set_app")]
    fn set_app(&self, value: &gio::DesktopAppInfo) {
        unsafe {
            ffi::astal_apps_application_set_app(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "astal_apps_application_get_frequency")]
    #[doc(alias = "get_frequency")]
    fn frequency(&self) -> i32 {
        unsafe {
            ffi::astal_apps_application_get_frequency(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "astal_apps_application_set_frequency")]
    fn set_frequency(&self, value: i32) {
        unsafe {
            ffi::astal_apps_application_set_frequency(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "astal_apps_application_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_apps_application_get_name(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_apps_application_get_entry")]
    #[doc(alias = "get_entry")]
    fn entry(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_apps_application_get_entry(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_apps_application_get_description")]
    #[doc(alias = "get_description")]
    fn description(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_apps_application_get_description(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_apps_application_get_wm_class")]
    #[doc(alias = "get_wm_class")]
    fn wm_class(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::astal_apps_application_get_wm_class(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_apps_application_get_executable")]
    #[doc(alias = "get_executable")]
    fn executable(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_apps_application_get_executable(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "astal_apps_application_get_icon_name")]
    #[doc(alias = "get_icon_name")]
    fn icon_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::astal_apps_application_get_icon_name(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "app")]
    fn connect_app_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_app_trampoline<P: IsA<Application>, F: Fn(&P) + 'static>(this: *mut ffi::AstalAppsApplication, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Application::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::app\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_app_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "frequency")]
    fn connect_frequency_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_frequency_trampoline<P: IsA<Application>, F: Fn(&P) + 'static>(this: *mut ffi::AstalAppsApplication, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Application::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::frequency\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_frequency_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "name")]
    fn connect_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_trampoline<P: IsA<Application>, F: Fn(&P) + 'static>(this: *mut ffi::AstalAppsApplication, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Application::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::name\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_name_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "entry")]
    fn connect_entry_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_entry_trampoline<P: IsA<Application>, F: Fn(&P) + 'static>(this: *mut ffi::AstalAppsApplication, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Application::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::entry\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_entry_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "description")]
    fn connect_description_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_description_trampoline<P: IsA<Application>, F: Fn(&P) + 'static>(this: *mut ffi::AstalAppsApplication, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Application::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::description\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_description_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "wm-class")]
    fn connect_wm_class_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_wm_class_trampoline<P: IsA<Application>, F: Fn(&P) + 'static>(this: *mut ffi::AstalAppsApplication, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Application::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::wm-class\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_wm_class_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "executable")]
    fn connect_executable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_executable_trampoline<P: IsA<Application>, F: Fn(&P) + 'static>(this: *mut ffi::AstalAppsApplication, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Application::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::executable\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_executable_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "icon-name")]
    fn connect_icon_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_icon_name_trampoline<P: IsA<Application>, F: Fn(&P) + 'static>(this: *mut ffi::AstalAppsApplication, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Application::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::icon-name\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_icon_name_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Application>> ApplicationExt for O {}
