// Generated by gir (https://github.com/gtk-rs/gir @ 88259bc5f36f+)
// from ../../gir/gir-files (@ 1783d05ebac3+)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(clippy::approx_constant, clippy::type_complexity, clippy::unreadable_literal, clippy::upper_case_acronyms)]
#![cfg_attr(docsrs, feature(doc_cfg))]

use glib_sys as glib;
use gobject_sys as gobject;
use gio_sys as gio;
use gtk_sys as gtk;
use gdk_pixbuf_sys as gdk_pixbuf;

#[allow(unused_imports)]
use std::ffi::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong, c_void};
#[allow(unused_imports)]
use libc::{size_t, ssize_t, time_t, off_t, intptr_t, uintptr_t, FILE};
#[cfg(unix)]
#[allow(unused_imports)]
use libc::{dev_t, gid_t, pid_t, socklen_t, uid_t, stat, in6_addr};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Enums
pub type AstalTrayCategory = c_int;
pub const ASTAL_TRAY_CATEGORY_APPLICATION: AstalTrayCategory = 0;
pub const ASTAL_TRAY_CATEGORY_COMMUNICATIONS: AstalTrayCategory = 1;
pub const ASTAL_TRAY_CATEGORY_SYSTEM: AstalTrayCategory = 2;
pub const ASTAL_TRAY_CATEGORY_HARDWARE: AstalTrayCategory = 3;

pub type AstalTrayStatus = c_int;
pub const ASTAL_TRAY_STATUS_PASSIVE: AstalTrayStatus = 0;
pub const ASTAL_TRAY_STATUS_ACTIVE: AstalTrayStatus = 1;
pub const ASTAL_TRAY_STATUS_NEEDS_ATTENTION: AstalTrayStatus = 2;

// Constants
pub const ASTAL_TRAY_MAJOR_VERSION: c_int = 0;
pub const ASTAL_TRAY_MINOR_VERSION: c_int = 1;
pub const ASTAL_TRAY_MICRO_VERSION: c_int = 0;
pub const ASTAL_TRAY_VERSION: &[u8] = b"0.1.0\0";

// Records
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AstalTrayPixmap {
    pub width: c_int,
    pub height: c_int,
    pub bytes: *mut u8,
    pub bytes_length1: c_int,
}

impl ::std::fmt::Debug for AstalTrayPixmap {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AstalTrayPixmap @ {self:p}"))
         .field("width", &self.width)
         .field("height", &self.height)
         .field("bytes", &self.bytes)
         .field("bytes_length1", &self.bytes_length1)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct AstalTrayTooltip {
    pub icon_name: *mut c_char,
    pub icon: *mut AstalTrayPixmap,
    pub icon_length1: c_int,
    pub title: *mut c_char,
    pub description: *mut c_char,
}

impl ::std::fmt::Debug for AstalTrayTooltip {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AstalTrayTooltip @ {self:p}"))
         .field("icon_name", &self.icon_name)
         .field("icon", &self.icon)
         .field("icon_length1", &self.icon_length1)
         .field("title", &self.title)
         .field("description", &self.description)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct AstalTrayTrayClass {
    pub parent_class: gobject::GObjectClass,
    pub item_added: Option<unsafe extern "C" fn(*mut AstalTrayTray, *const c_char)>,
    pub item_removed: Option<unsafe extern "C" fn(*mut AstalTrayTray, *const c_char)>,
}

impl ::std::fmt::Debug for AstalTrayTrayClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AstalTrayTrayClass @ {self:p}"))
         .field("item_added", &self.item_added)
         .field("item_removed", &self.item_removed)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct AstalTrayTrayItemClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for AstalTrayTrayItemClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AstalTrayTrayItemClass @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _AstalTrayTrayItemPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type AstalTrayTrayItemPrivate = _AstalTrayTrayItemPrivate;

#[repr(C)]
#[allow(dead_code)]
pub struct _AstalTrayTrayPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type AstalTrayTrayPrivate = _AstalTrayTrayPrivate;

// Classes
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AstalTrayTray {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut AstalTrayTrayPrivate,
}

impl ::std::fmt::Debug for AstalTrayTray {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AstalTrayTray @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct AstalTrayTrayItem {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut AstalTrayTrayItemPrivate,
}

impl ::std::fmt::Debug for AstalTrayTrayItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AstalTrayTrayItem @ {self:p}"))
         .finish()
    }
}

extern "C" {

    //=========================================================================
    // AstalTrayCategory
    //=========================================================================
    pub fn astal_tray_category_get_type() -> GType;

    //=========================================================================
    // AstalTrayStatus
    //=========================================================================
    pub fn astal_tray_status_get_type() -> GType;

    //=========================================================================
    // AstalTrayPixmap
    //=========================================================================
    pub fn astal_tray_pixmap_get_type() -> GType;

    //=========================================================================
    // AstalTrayTooltip
    //=========================================================================
    pub fn astal_tray_tooltip_get_type() -> GType;

    //=========================================================================
    // AstalTrayTray
    //=========================================================================
    pub fn astal_tray_tray_get_type() -> GType;
    pub fn astal_tray_tray_get_default() -> *mut AstalTrayTray;
    pub fn astal_tray_tray_get_item(self_: *mut AstalTrayTray, service: *const c_char) -> *mut AstalTrayTrayItem;
    pub fn astal_tray_tray_new() -> *mut AstalTrayTray;
    pub fn astal_tray_tray_get_items(self_: *mut AstalTrayTray) -> *mut glib::GList;

    //=========================================================================
    // AstalTrayTrayItem
    //=========================================================================
    pub fn astal_tray_tray_item_get_type() -> GType;
    pub fn astal_tray_tray_item_new(service: *const c_char, path: *const c_char) -> *mut AstalTrayTrayItem;
    pub fn astal_tray_tray_item_activate(self_: *mut AstalTrayTrayItem, x: c_int, y: c_int);
    pub fn astal_tray_tray_item_secondary_activate(self_: *mut AstalTrayTrayItem, x: c_int, y: c_int);
    pub fn astal_tray_tray_item_scroll(self_: *mut AstalTrayTrayItem, delta: c_int, orientation: *const c_char);
    pub fn astal_tray_tray_item_create_menu(self_: *mut AstalTrayTrayItem) -> *mut gtk::GtkMenu;
    pub fn _astal_tray_tray_item_get_icon_pixbuf(self_: *mut AstalTrayTrayItem) -> *mut gdk_pixbuf::GdkPixbuf;
    pub fn astal_tray_tray_item_to_json_string(self_: *mut AstalTrayTrayItem) -> *mut c_char;
    pub fn astal_tray_tray_item_get_title(self_: *mut AstalTrayTrayItem) -> *mut c_char;
    pub fn astal_tray_tray_item_get_category(self_: *mut AstalTrayTrayItem) -> AstalTrayCategory;
    pub fn astal_tray_tray_item_get_status(self_: *mut AstalTrayTrayItem) -> AstalTrayStatus;
    pub fn astal_tray_tray_item_get_tooltip(self_: *mut AstalTrayTrayItem) -> *mut AstalTrayTooltip;
    pub fn astal_tray_tray_item_get_tooltip_markup(self_: *mut AstalTrayTrayItem) -> *mut c_char;
    pub fn astal_tray_tray_item_get_id(self_: *mut AstalTrayTrayItem) -> *mut c_char;
    pub fn astal_tray_tray_item_get_icon_theme_path(self_: *mut AstalTrayTrayItem) -> *mut c_char;
    pub fn astal_tray_tray_item_get_is_menu(self_: *mut AstalTrayTrayItem) -> gboolean;
    pub fn astal_tray_tray_item_get_icon_name(self_: *mut AstalTrayTrayItem) -> *mut c_char;
    pub fn astal_tray_tray_item_get_icon_pixbuf(self_: *mut AstalTrayTrayItem) -> *mut gdk_pixbuf::GdkPixbuf;
    pub fn astal_tray_tray_item_get_gicon(self_: *mut AstalTrayTrayItem) -> *mut gio::GIcon;
    pub fn astal_tray_tray_item_get_item_id(self_: *mut AstalTrayTrayItem) -> *const c_char;

    //=========================================================================
    // Other functions
    //=========================================================================
    pub fn astal_tray_category_to_nick(self_: AstalTrayCategory) -> *mut c_char;
    pub fn astal_tray_status_to_nick(self_: AstalTrayStatus) -> *mut c_char;
    pub fn astal_tray_get_default() -> *mut AstalTrayTray;

}
