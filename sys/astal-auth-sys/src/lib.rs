// Generated by gir (https://github.com/gtk-rs/gir @ 0cdde9fbfd9d)
// from ../../gir/gir-files (@ 611247c05351+)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(clippy::approx_constant, clippy::type_complexity, clippy::unreadable_literal, clippy::upper_case_acronyms)]
#![cfg_attr(docsrs, feature(doc_cfg))]

use glib_sys as glib;
use gobject_sys as gobject;
use gio_sys as gio;

#[allow(unused_imports)]
use std::ffi::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong, c_void};
#[allow(unused_imports)]
use libc::{size_t, ssize_t, time_t, off_t, intptr_t, uintptr_t, FILE};
#[cfg(unix)]
#[allow(unused_imports)]
use libc::{dev_t, gid_t, pid_t, socklen_t, uid_t, stat, in6_addr};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Constants
pub const ASTAL_AUTH_MAJOR_VERSION: c_int = 0;
pub const ASTAL_AUTH_MICRO_VERSION: c_int = 0;
pub const ASTAL_AUTH_MINOR_VERSION: c_int = 1;
pub const ASTAL_AUTH_VERSION: &[u8] = b"0.1.0\0";

// Records
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AstalAuthPamClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for AstalAuthPamClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AstalAuthPamClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

// Classes
#[repr(C)]
#[allow(dead_code)]
pub struct AstalAuthPam {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for AstalAuthPam {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AstalAuthPam @ {self:p}"))
         .finish()
    }
}

extern "C" {

    //=========================================================================
    // AstalAuthPam
    //=========================================================================
    pub fn astal_auth_pam_get_type() -> GType;
    pub fn astal_auth_pam_authenticate(password: *const c_char, result_callback: gio::GAsyncReadyCallback, user_data: gpointer) -> gboolean;
    pub fn astal_auth_pam_authenticate_finish(res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> ssize_t;
    pub fn astal_auth_pam_get_service(self_: *mut AstalAuthPam) -> *const c_char;
    pub fn astal_auth_pam_get_username(self_: *mut AstalAuthPam) -> *const c_char;
    pub fn astal_auth_pam_set_service(self_: *mut AstalAuthPam, service: *const c_char);
    pub fn astal_auth_pam_set_username(self_: *mut AstalAuthPam, username: *const c_char);
    pub fn astal_auth_pam_start_authenticate(self_: *mut AstalAuthPam) -> gboolean;
    pub fn astal_auth_pam_supply_secret(self_: *mut AstalAuthPam, secret: *const c_char);

}
