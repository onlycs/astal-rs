// Generated by gir (https://github.com/gtk-rs/gir @ 0cdde9fbfd9d)
// from ../../gir/gir-files (@ 611247c05351+)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(clippy::approx_constant, clippy::type_complexity, clippy::unreadable_literal, clippy::upper_case_acronyms)]
#![cfg_attr(docsrs, feature(doc_cfg))]

use glib_sys as glib;
use gio_sys as gio;
use gobject_sys as gobject;

#[allow(unused_imports)]
use std::ffi::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong, c_void};
#[allow(unused_imports)]
use libc::{size_t, ssize_t, time_t, off_t, intptr_t, uintptr_t, FILE};
#[cfg(unix)]
#[allow(unused_imports)]
use libc::{dev_t, gid_t, pid_t, socklen_t, uid_t, stat, in6_addr};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Constants
pub const ASTAL_HYPRLAND_MAJOR_VERSION: c_int = 0;
pub const ASTAL_HYPRLAND_MINOR_VERSION: c_int = 1;
pub const ASTAL_HYPRLAND_MICRO_VERSION: c_int = 0;
pub const ASTAL_HYPRLAND_VERSION: &[u8] = b"0.1.0\0";

// Flags
pub type AstalHyprlandFullscreen = c_uint;
pub const ASTAL_HYPRLAND_FULLSCREEN_CURRENT: AstalHyprlandFullscreen = 4294967295;
pub const ASTAL_HYPRLAND_FULLSCREEN_NONE: AstalHyprlandFullscreen = 0;
pub const ASTAL_HYPRLAND_FULLSCREEN_MAXIMIZED: AstalHyprlandFullscreen = 1;
pub const ASTAL_HYPRLAND_FULLSCREEN_FULLSCREEN: AstalHyprlandFullscreen = 2;

// Records
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AstalHyprlandBindClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for AstalHyprlandBindClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AstalHyprlandBindClass @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _AstalHyprlandBindPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type AstalHyprlandBindPrivate = _AstalHyprlandBindPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct AstalHyprlandClientClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for AstalHyprlandClientClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AstalHyprlandClientClass @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _AstalHyprlandClientPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type AstalHyprlandClientPrivate = _AstalHyprlandClientPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct AstalHyprlandHyprlandClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for AstalHyprlandHyprlandClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AstalHyprlandHyprlandClass @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _AstalHyprlandHyprlandPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type AstalHyprlandHyprlandPrivate = _AstalHyprlandHyprlandPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct AstalHyprlandMonitorClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for AstalHyprlandMonitorClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AstalHyprlandMonitorClass @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _AstalHyprlandMonitorPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type AstalHyprlandMonitorPrivate = _AstalHyprlandMonitorPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct AstalHyprlandPositionClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for AstalHyprlandPositionClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AstalHyprlandPositionClass @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _AstalHyprlandPositionPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type AstalHyprlandPositionPrivate = _AstalHyprlandPositionPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct AstalHyprlandWorkspaceClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for AstalHyprlandWorkspaceClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AstalHyprlandWorkspaceClass @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _AstalHyprlandWorkspacePrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type AstalHyprlandWorkspacePrivate = _AstalHyprlandWorkspacePrivate;

// Classes
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AstalHyprlandBind {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut AstalHyprlandBindPrivate,
}

impl ::std::fmt::Debug for AstalHyprlandBind {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AstalHyprlandBind @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct AstalHyprlandClient {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut AstalHyprlandClientPrivate,
}

impl ::std::fmt::Debug for AstalHyprlandClient {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AstalHyprlandClient @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct AstalHyprlandHyprland {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut AstalHyprlandHyprlandPrivate,
}

impl ::std::fmt::Debug for AstalHyprlandHyprland {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AstalHyprlandHyprland @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct AstalHyprlandMonitor {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut AstalHyprlandMonitorPrivate,
}

impl ::std::fmt::Debug for AstalHyprlandMonitor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AstalHyprlandMonitor @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct AstalHyprlandPosition {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut AstalHyprlandPositionPrivate,
}

impl ::std::fmt::Debug for AstalHyprlandPosition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AstalHyprlandPosition @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct AstalHyprlandWorkspace {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut AstalHyprlandWorkspacePrivate,
    pub _clients: *mut glib::GList,
}

impl ::std::fmt::Debug for AstalHyprlandWorkspace {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AstalHyprlandWorkspace @ {self:p}"))
         .field("_clients", &self._clients)
         .finish()
    }
}

extern "C" {

    //=========================================================================
    // AstalHyprlandFullscreen
    //=========================================================================
    pub fn astal_hyprland_fullscreen_get_type() -> GType;

    //=========================================================================
    // AstalHyprlandBind
    //=========================================================================
    pub fn astal_hyprland_bind_get_type() -> GType;
    pub fn astal_hyprland_bind_new() -> *mut AstalHyprlandBind;
    pub fn astal_hyprland_bind_get_locked(self_: *mut AstalHyprlandBind) -> gboolean;
    pub fn astal_hyprland_bind_set_locked(self_: *mut AstalHyprlandBind, value: gboolean);
    pub fn astal_hyprland_bind_get_mouse(self_: *mut AstalHyprlandBind) -> gboolean;
    pub fn astal_hyprland_bind_set_mouse(self_: *mut AstalHyprlandBind, value: gboolean);
    pub fn astal_hyprland_bind_get_release(self_: *mut AstalHyprlandBind) -> gboolean;
    pub fn astal_hyprland_bind_set_release(self_: *mut AstalHyprlandBind, value: gboolean);
    pub fn astal_hyprland_bind_get_repeat(self_: *mut AstalHyprlandBind) -> gboolean;
    pub fn astal_hyprland_bind_set_repeat(self_: *mut AstalHyprlandBind, value: gboolean);
    pub fn astal_hyprland_bind_get_non_consuming(self_: *mut AstalHyprlandBind) -> gboolean;
    pub fn astal_hyprland_bind_set_non_consuming(self_: *mut AstalHyprlandBind, value: gboolean);
    pub fn astal_hyprland_bind_get_modmask(self_: *mut AstalHyprlandBind) -> i64;
    pub fn astal_hyprland_bind_set_modmask(self_: *mut AstalHyprlandBind, value: i64);
    pub fn astal_hyprland_bind_get_submap(self_: *mut AstalHyprlandBind) -> *const c_char;
    pub fn astal_hyprland_bind_set_submap(self_: *mut AstalHyprlandBind, value: *const c_char);
    pub fn astal_hyprland_bind_get_key(self_: *mut AstalHyprlandBind) -> *const c_char;
    pub fn astal_hyprland_bind_set_key(self_: *mut AstalHyprlandBind, value: *const c_char);
    pub fn astal_hyprland_bind_get_keycode(self_: *mut AstalHyprlandBind) -> i64;
    pub fn astal_hyprland_bind_set_keycode(self_: *mut AstalHyprlandBind, value: i64);
    pub fn astal_hyprland_bind_get_catch_all(self_: *mut AstalHyprlandBind) -> gboolean;
    pub fn astal_hyprland_bind_set_catch_all(self_: *mut AstalHyprlandBind, value: gboolean);
    pub fn astal_hyprland_bind_get_dispatcher(self_: *mut AstalHyprlandBind) -> *const c_char;
    pub fn astal_hyprland_bind_set_dispatcher(self_: *mut AstalHyprlandBind, value: *const c_char);
    pub fn astal_hyprland_bind_get_arg(self_: *mut AstalHyprlandBind) -> *const c_char;
    pub fn astal_hyprland_bind_set_arg(self_: *mut AstalHyprlandBind, value: *const c_char);

    //=========================================================================
    // AstalHyprlandClient
    //=========================================================================
    pub fn astal_hyprland_client_get_type() -> GType;
    pub fn astal_hyprland_client_kill(self_: *mut AstalHyprlandClient);
    pub fn astal_hyprland_client_focus(self_: *mut AstalHyprlandClient);
    pub fn astal_hyprland_client_move_to(self_: *mut AstalHyprlandClient, ws: *mut AstalHyprlandWorkspace);
    pub fn astal_hyprland_client_toggle_floating(self_: *mut AstalHyprlandClient);
    pub fn astal_hyprland_client_new() -> *mut AstalHyprlandClient;
    pub fn astal_hyprland_client_get_address(self_: *mut AstalHyprlandClient) -> *const c_char;
    pub fn astal_hyprland_client_get_mapped(self_: *mut AstalHyprlandClient) -> gboolean;
    pub fn astal_hyprland_client_get_hidden(self_: *mut AstalHyprlandClient) -> gboolean;
    pub fn astal_hyprland_client_get_x(self_: *mut AstalHyprlandClient) -> c_int;
    pub fn astal_hyprland_client_get_y(self_: *mut AstalHyprlandClient) -> c_int;
    pub fn astal_hyprland_client_get_width(self_: *mut AstalHyprlandClient) -> c_int;
    pub fn astal_hyprland_client_get_height(self_: *mut AstalHyprlandClient) -> c_int;
    pub fn astal_hyprland_client_get_workspace(self_: *mut AstalHyprlandClient) -> *mut AstalHyprlandWorkspace;
    pub fn astal_hyprland_client_get_floating(self_: *mut AstalHyprlandClient) -> gboolean;
    pub fn astal_hyprland_client_get_monitor(self_: *mut AstalHyprlandClient) -> *mut AstalHyprlandMonitor;
    pub fn astal_hyprland_client_get_class(self_: *mut AstalHyprlandClient) -> *const c_char;
    pub fn astal_hyprland_client_get_title(self_: *mut AstalHyprlandClient) -> *const c_char;
    pub fn astal_hyprland_client_get_initial_class(self_: *mut AstalHyprlandClient) -> *const c_char;
    pub fn astal_hyprland_client_get_initial_title(self_: *mut AstalHyprlandClient) -> *const c_char;
    pub fn astal_hyprland_client_get_pid(self_: *mut AstalHyprlandClient) -> c_uint;
    pub fn astal_hyprland_client_get_xwayland(self_: *mut AstalHyprlandClient) -> gboolean;
    pub fn astal_hyprland_client_get_pinned(self_: *mut AstalHyprlandClient) -> gboolean;
    pub fn astal_hyprland_client_get_fullscreen(self_: *mut AstalHyprlandClient) -> AstalHyprlandFullscreen;
    pub fn astal_hyprland_client_get_fullscreen_client(self_: *mut AstalHyprlandClient) -> AstalHyprlandFullscreen;
    pub fn astal_hyprland_client_get_swallowing(self_: *mut AstalHyprlandClient) -> *const c_char;
    pub fn astal_hyprland_client_get_focus_history_id(self_: *mut AstalHyprlandClient) -> c_int;

    //=========================================================================
    // AstalHyprlandHyprland
    //=========================================================================
    pub fn astal_hyprland_hyprland_get_type() -> GType;
    pub fn astal_hyprland_hyprland_get_default() -> *mut AstalHyprlandHyprland;
    pub fn astal_hyprland_hyprland_get_monitor(self_: *mut AstalHyprlandHyprland, id: c_int) -> *mut AstalHyprlandMonitor;
    pub fn astal_hyprland_hyprland_get_workspace(self_: *mut AstalHyprlandHyprland, id: c_int) -> *mut AstalHyprlandWorkspace;
    pub fn astal_hyprland_hyprland_get_client(self_: *mut AstalHyprlandHyprland, address: *const c_char) -> *mut AstalHyprlandClient;
    pub fn astal_hyprland_hyprland_get_monitor_by_name(self_: *mut AstalHyprlandHyprland, name: *const c_char) -> *mut AstalHyprlandMonitor;
    pub fn astal_hyprland_hyprland_get_workspace_by_name(self_: *mut AstalHyprlandHyprland, name: *const c_char) -> *mut AstalHyprlandWorkspace;
    pub fn astal_hyprland_hyprland_message(self_: *mut AstalHyprlandHyprland, message: *const c_char) -> *mut c_char;
    pub fn astal_hyprland_hyprland_message_async(self_: *mut AstalHyprlandHyprland, message: *const c_char, _callback_: gio::GAsyncReadyCallback, _callback__target: *mut c_void);
    pub fn astal_hyprland_hyprland_message_finish(self_: *mut AstalHyprlandHyprland, _res_: *mut gio::GAsyncResult) -> *mut c_char;
    pub fn astal_hyprland_hyprland_dispatch(self_: *mut AstalHyprlandHyprland, dispatcher: *const c_char, args: *const c_char);
    pub fn astal_hyprland_hyprland_move_cursor(self_: *mut AstalHyprlandHyprland, x: c_int, y: c_int);
    pub fn astal_hyprland_hyprland_sync_monitors(self_: *mut AstalHyprlandHyprland, _callback_: gio::GAsyncReadyCallback, _callback__target: *mut c_void);
    pub fn astal_hyprland_hyprland_sync_monitors_finish(self_: *mut AstalHyprlandHyprland, _res_: *mut gio::GAsyncResult, error: *mut *mut glib::GError);
    pub fn astal_hyprland_hyprland_sync_workspaces(self_: *mut AstalHyprlandHyprland, _callback_: gio::GAsyncReadyCallback, _callback__target: *mut c_void);
    pub fn astal_hyprland_hyprland_sync_workspaces_finish(self_: *mut AstalHyprlandHyprland, _res_: *mut gio::GAsyncResult, error: *mut *mut glib::GError);
    pub fn astal_hyprland_hyprland_sync_clients(self_: *mut AstalHyprlandHyprland, _callback_: gio::GAsyncReadyCallback, _callback__target: *mut c_void);
    pub fn astal_hyprland_hyprland_sync_clients_finish(self_: *mut AstalHyprlandHyprland, _res_: *mut gio::GAsyncResult, error: *mut *mut glib::GError);
    pub fn astal_hyprland_hyprland_new() -> *mut AstalHyprlandHyprland;
    pub fn astal_hyprland_hyprland_get_monitors(self_: *mut AstalHyprlandHyprland) -> *mut glib::GList;
    pub fn astal_hyprland_hyprland_get_workspaces(self_: *mut AstalHyprlandHyprland) -> *mut glib::GList;
    pub fn astal_hyprland_hyprland_get_clients(self_: *mut AstalHyprlandHyprland) -> *mut glib::GList;
    pub fn astal_hyprland_hyprland_get_focused_workspace(self_: *mut AstalHyprlandHyprland) -> *mut AstalHyprlandWorkspace;
    pub fn astal_hyprland_hyprland_get_focused_monitor(self_: *mut AstalHyprlandHyprland) -> *mut AstalHyprlandMonitor;
    pub fn astal_hyprland_hyprland_get_focused_client(self_: *mut AstalHyprlandHyprland) -> *mut AstalHyprlandClient;
    pub fn astal_hyprland_hyprland_get_binds(self_: *mut AstalHyprlandHyprland) -> *mut glib::GList;
    pub fn astal_hyprland_hyprland_get_cursor_position(self_: *mut AstalHyprlandHyprland) -> *mut AstalHyprlandPosition;

    //=========================================================================
    // AstalHyprlandMonitor
    //=========================================================================
    pub fn astal_hyprland_monitor_get_type() -> GType;
    pub fn astal_hyprland_monitor_focus(self_: *mut AstalHyprlandMonitor);
    pub fn astal_hyprland_monitor_new() -> *mut AstalHyprlandMonitor;
    pub fn astal_hyprland_monitor_get_id(self_: *mut AstalHyprlandMonitor) -> c_int;
    pub fn astal_hyprland_monitor_get_name(self_: *mut AstalHyprlandMonitor) -> *const c_char;
    pub fn astal_hyprland_monitor_get_description(self_: *mut AstalHyprlandMonitor) -> *const c_char;
    pub fn astal_hyprland_monitor_get_make(self_: *mut AstalHyprlandMonitor) -> *const c_char;
    pub fn astal_hyprland_monitor_get_model(self_: *mut AstalHyprlandMonitor) -> *const c_char;
    pub fn astal_hyprland_monitor_get_serial(self_: *mut AstalHyprlandMonitor) -> *const c_char;
    pub fn astal_hyprland_monitor_get_width(self_: *mut AstalHyprlandMonitor) -> c_int;
    pub fn astal_hyprland_monitor_get_height(self_: *mut AstalHyprlandMonitor) -> c_int;
    pub fn astal_hyprland_monitor_get_refresh_rate(self_: *mut AstalHyprlandMonitor) -> c_double;
    pub fn astal_hyprland_monitor_get_x(self_: *mut AstalHyprlandMonitor) -> c_int;
    pub fn astal_hyprland_monitor_get_y(self_: *mut AstalHyprlandMonitor) -> c_int;
    pub fn astal_hyprland_monitor_get_active_workspace(self_: *mut AstalHyprlandMonitor) -> *mut AstalHyprlandWorkspace;
    pub fn astal_hyprland_monitor_get_special_workspace(self_: *mut AstalHyprlandMonitor) -> *mut AstalHyprlandWorkspace;
    pub fn astal_hyprland_monitor_get_reserved_top(self_: *mut AstalHyprlandMonitor) -> c_int;
    pub fn astal_hyprland_monitor_get_reserved_bottom(self_: *mut AstalHyprlandMonitor) -> c_int;
    pub fn astal_hyprland_monitor_get_reserved_left(self_: *mut AstalHyprlandMonitor) -> c_int;
    pub fn astal_hyprland_monitor_get_reserved_right(self_: *mut AstalHyprlandMonitor) -> c_int;
    pub fn astal_hyprland_monitor_get_scale(self_: *mut AstalHyprlandMonitor) -> c_double;
    pub fn astal_hyprland_monitor_get_focused(self_: *mut AstalHyprlandMonitor) -> gboolean;
    pub fn astal_hyprland_monitor_get_dpms_status(self_: *mut AstalHyprlandMonitor) -> gboolean;
    pub fn astal_hyprland_monitor_get_vrr(self_: *mut AstalHyprlandMonitor) -> gboolean;
    pub fn astal_hyprland_monitor_get_actively_tearing(self_: *mut AstalHyprlandMonitor) -> gboolean;
    pub fn astal_hyprland_monitor_get_disabled(self_: *mut AstalHyprlandMonitor) -> gboolean;
    pub fn astal_hyprland_monitor_get_current_format(self_: *mut AstalHyprlandMonitor) -> *const c_char;
    pub fn astal_hyprland_monitor_get_available_modes(self_: *mut AstalHyprlandMonitor) -> *mut glib::GArray;

    //=========================================================================
    // AstalHyprlandPosition
    //=========================================================================
    pub fn astal_hyprland_position_get_type() -> GType;
    pub fn astal_hyprland_position_new() -> *mut AstalHyprlandPosition;
    pub fn astal_hyprland_position_get_x(self_: *mut AstalHyprlandPosition) -> c_int;
    pub fn astal_hyprland_position_set_x(self_: *mut AstalHyprlandPosition, value: c_int);
    pub fn astal_hyprland_position_get_y(self_: *mut AstalHyprlandPosition) -> c_int;
    pub fn astal_hyprland_position_set_y(self_: *mut AstalHyprlandPosition, value: c_int);

    //=========================================================================
    // AstalHyprlandWorkspace
    //=========================================================================
    pub fn astal_hyprland_workspace_get_type() -> GType;
    pub fn astal_hyprland_workspace_new_dummy(id: c_int, monitor: *mut AstalHyprlandMonitor) -> *mut AstalHyprlandWorkspace;
    pub fn astal_hyprland_workspace_focus(self_: *mut AstalHyprlandWorkspace);
    pub fn astal_hyprland_workspace_move_to(self_: *mut AstalHyprlandWorkspace, m: *mut AstalHyprlandMonitor);
    pub fn astal_hyprland_workspace_new() -> *mut AstalHyprlandWorkspace;
    pub fn astal_hyprland_workspace_get_id(self_: *mut AstalHyprlandWorkspace) -> c_int;
    pub fn astal_hyprland_workspace_get_name(self_: *mut AstalHyprlandWorkspace) -> *const c_char;
    pub fn astal_hyprland_workspace_get_monitor(self_: *mut AstalHyprlandWorkspace) -> *mut AstalHyprlandMonitor;
    pub fn astal_hyprland_workspace_get_clients(self_: *mut AstalHyprlandWorkspace) -> *mut glib::GList;
    pub fn astal_hyprland_workspace_get_has_fullscreen(self_: *mut AstalHyprlandWorkspace) -> gboolean;
    pub fn astal_hyprland_workspace_get_last_client(self_: *mut AstalHyprlandWorkspace) -> *mut AstalHyprlandClient;

    //=========================================================================
    // Other functions
    //=========================================================================
    pub fn astal_hyprland_get_default() -> *mut AstalHyprlandHyprland;

}
