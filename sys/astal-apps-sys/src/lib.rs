// Generated by gir (https://github.com/gtk-rs/gir @ 26e721588f2f)
// from ../../gir/gir-files (@ e02639f55a90)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(clippy::approx_constant, clippy::type_complexity, clippy::unreadable_literal, clippy::upper_case_acronyms)]
#![cfg_attr(docsrs, feature(doc_cfg))]

use gio_sys as gio;
use glib_sys as glib;
use gobject_sys as gobject;

#[allow(unused_imports)]
use std::ffi::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong, c_void};
#[allow(unused_imports)]
use libc::{size_t, ssize_t, time_t, off_t, intptr_t, uintptr_t, FILE};
#[cfg(unix)]
#[allow(unused_imports)]
use libc::{dev_t, gid_t, pid_t, socklen_t, uid_t, stat, in6_addr};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Constants
pub const ASTAL_APPS_MAJOR_VERSION: c_int = 0;
pub const ASTAL_APPS_MINOR_VERSION: c_int = 1;
pub const ASTAL_APPS_MICRO_VERSION: c_int = 0;
pub const ASTAL_APPS_VERSION: &[u8] = b"0.1.0\0";

// Records
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AstalAppsApplicationClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for AstalAppsApplicationClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AstalAppsApplicationClass @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _AstalAppsApplicationPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type AstalAppsApplicationPrivate = _AstalAppsApplicationPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct AstalAppsAppsClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for AstalAppsAppsClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AstalAppsAppsClass @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _AstalAppsAppsPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type AstalAppsAppsPrivate = _AstalAppsAppsPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct AstalAppsScore {
    pub name: c_int,
    pub entry: c_int,
    pub executable: c_int,
    pub description: c_int,
    pub keywords: c_int,
    pub categories: c_int,
}

impl ::std::fmt::Debug for AstalAppsScore {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AstalAppsScore @ {self:p}"))
         .field("name", &self.name)
         .field("entry", &self.entry)
         .field("executable", &self.executable)
         .field("description", &self.description)
         .field("keywords", &self.keywords)
         .field("categories", &self.categories)
         .finish()
    }
}

// Classes
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AstalAppsApplication {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut AstalAppsApplicationPrivate,
}

impl ::std::fmt::Debug for AstalAppsApplication {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AstalAppsApplication @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct AstalAppsApps {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut AstalAppsAppsPrivate,
}

impl ::std::fmt::Debug for AstalAppsApps {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AstalAppsApps @ {self:p}"))
         .finish()
    }
}

extern "C" {

    //=========================================================================
    // AstalAppsScore
    //=========================================================================
    pub fn astal_apps_score_get_type() -> GType;

    //=========================================================================
    // AstalAppsApplication
    //=========================================================================
    pub fn astal_apps_application_get_type() -> GType;
    pub fn astal_apps_application_get_key(self_: *mut AstalAppsApplication, key: *const c_char) -> *mut c_char;
    pub fn astal_apps_application_launch(self_: *mut AstalAppsApplication) -> gboolean;
    pub fn astal_apps_application_fuzzy_match(self_: *mut AstalAppsApplication, term: *const c_char, result: *mut AstalAppsScore);
    pub fn astal_apps_application_exact_match(self_: *mut AstalAppsApplication, term: *const c_char, result: *mut AstalAppsScore);
    pub fn astal_apps_application_get_app(self_: *mut AstalAppsApplication) -> *mut gio::GDesktopAppInfo;
    pub fn astal_apps_application_set_app(self_: *mut AstalAppsApplication, value: *mut gio::GDesktopAppInfo);
    pub fn astal_apps_application_get_frequency(self_: *mut AstalAppsApplication) -> c_int;
    pub fn astal_apps_application_set_frequency(self_: *mut AstalAppsApplication, value: c_int);
    pub fn astal_apps_application_get_name(self_: *mut AstalAppsApplication) -> *const c_char;
    pub fn astal_apps_application_get_entry(self_: *mut AstalAppsApplication) -> *const c_char;
    pub fn astal_apps_application_get_description(self_: *mut AstalAppsApplication) -> *const c_char;
    pub fn astal_apps_application_get_wm_class(self_: *mut AstalAppsApplication) -> *const c_char;
    pub fn astal_apps_application_get_executable(self_: *mut AstalAppsApplication) -> *mut c_char;
    pub fn astal_apps_application_get_icon_name(self_: *mut AstalAppsApplication) -> *mut c_char;
    pub fn astal_apps_application_get_keywords(self_: *mut AstalAppsApplication, result_length1: *mut c_int) -> *mut *mut c_char;
    pub fn astal_apps_application_get_categories(self_: *mut AstalAppsApplication, result_length1: *mut c_int) -> *mut *mut c_char;

    //=========================================================================
    // AstalAppsApps
    //=========================================================================
    pub fn astal_apps_apps_get_type() -> GType;
    pub fn astal_apps_apps_fuzzy_score(self_: *mut AstalAppsApps, search: *const c_char, a: *mut AstalAppsApplication) -> c_double;
    pub fn astal_apps_apps_exact_score(self_: *mut AstalAppsApps, search: *const c_char, a: *mut AstalAppsApplication) -> c_double;
    pub fn astal_apps_apps_fuzzy_query(self_: *mut AstalAppsApps, search: *const c_char) -> *mut glib::GList;
    pub fn astal_apps_apps_exact_query(self_: *mut AstalAppsApps, search: *const c_char) -> *mut glib::GList;
    pub fn astal_apps_apps_reload(self_: *mut AstalAppsApps);
    pub fn astal_apps_apps_new() -> *mut AstalAppsApps;
    pub fn astal_apps_apps_get_show_hidden(self_: *mut AstalAppsApps) -> gboolean;
    pub fn astal_apps_apps_set_show_hidden(self_: *mut AstalAppsApps, value: gboolean);
    pub fn astal_apps_apps_get_list(self_: *mut AstalAppsApps) -> *mut glib::GList;
    pub fn astal_apps_apps_get_min_score(self_: *mut AstalAppsApps) -> c_double;
    pub fn astal_apps_apps_set_min_score(self_: *mut AstalAppsApps, value: c_double);
    pub fn astal_apps_apps_get_name_multiplier(self_: *mut AstalAppsApps) -> c_double;
    pub fn astal_apps_apps_set_name_multiplier(self_: *mut AstalAppsApps, value: c_double);
    pub fn astal_apps_apps_get_entry_multiplier(self_: *mut AstalAppsApps) -> c_double;
    pub fn astal_apps_apps_set_entry_multiplier(self_: *mut AstalAppsApps, value: c_double);
    pub fn astal_apps_apps_get_executable_multiplier(self_: *mut AstalAppsApps) -> c_double;
    pub fn astal_apps_apps_set_executable_multiplier(self_: *mut AstalAppsApps, value: c_double);
    pub fn astal_apps_apps_get_description_multiplier(self_: *mut AstalAppsApps) -> c_double;
    pub fn astal_apps_apps_set_description_multiplier(self_: *mut AstalAppsApps, value: c_double);
    pub fn astal_apps_apps_get_keywords_multiplier(self_: *mut AstalAppsApps) -> c_double;
    pub fn astal_apps_apps_set_keywords_multiplier(self_: *mut AstalAppsApps, value: c_double);
    pub fn astal_apps_apps_get_categories_multiplier(self_: *mut AstalAppsApps) -> c_double;
    pub fn astal_apps_apps_set_categories_multiplier(self_: *mut AstalAppsApps, value: c_double);

}
