// Generated by gir (https://github.com/gtk-rs/gir @ 88259bc5f36f+)
// from ../../gir/gir-files (@ 1783d05ebac3+)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(clippy::approx_constant, clippy::type_complexity, clippy::unreadable_literal, clippy::upper_case_acronyms)]
#![cfg_attr(docsrs, feature(doc_cfg))]

use glib_sys as glib;
use gobject_sys as gobject;

#[allow(unused_imports)]
use std::ffi::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong, c_void};
#[allow(unused_imports)]
use libc::{size_t, ssize_t, time_t, off_t, intptr_t, uintptr_t, FILE};
#[cfg(unix)]
#[allow(unused_imports)]
use libc::{dev_t, gid_t, pid_t, socklen_t, uid_t, stat, in6_addr};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Enums
pub type AstalNotifdClosedReason = c_int;
pub const ASTAL_NOTIFD_CLOSED_REASON_EXPIRED: AstalNotifdClosedReason = 1;
pub const ASTAL_NOTIFD_CLOSED_REASON_DISMISSED_BY_USER: AstalNotifdClosedReason = 2;
pub const ASTAL_NOTIFD_CLOSED_REASON_CLOSED: AstalNotifdClosedReason = 3;
pub const ASTAL_NOTIFD_CLOSED_REASON_UNDEFINED: AstalNotifdClosedReason = 4;

pub type AstalNotifdUrgency = c_int;
pub const ASTAL_NOTIFD_URGENCY_LOW: AstalNotifdUrgency = 0;
pub const ASTAL_NOTIFD_URGENCY_NORMAL: AstalNotifdUrgency = 1;
pub const ASTAL_NOTIFD_URGENCY_CRITICAL: AstalNotifdUrgency = 2;

// Constants
pub const ASTAL_NOTIFD_MAJOR_VERSION: c_int = 0;
pub const ASTAL_NOTIFD_MINOR_VERSION: c_int = 1;
pub const ASTAL_NOTIFD_MICRO_VERSION: c_int = 0;
pub const ASTAL_NOTIFD_VERSION: &[u8] = b"0.1.0\0";

// Records
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AstalNotifdAction {
    pub id: *mut c_char,
    pub label: *mut c_char,
}

impl ::std::fmt::Debug for AstalNotifdAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AstalNotifdAction @ {self:p}"))
         .field("id", &self.id)
         .field("label", &self.label)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct AstalNotifdNotifdClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for AstalNotifdNotifdClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AstalNotifdNotifdClass @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _AstalNotifdNotifdPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type AstalNotifdNotifdPrivate = _AstalNotifdNotifdPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct AstalNotifdNotificationClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for AstalNotifdNotificationClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AstalNotifdNotificationClass @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _AstalNotifdNotificationPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type AstalNotifdNotificationPrivate = _AstalNotifdNotificationPrivate;

// Classes
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AstalNotifdNotifd {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut AstalNotifdNotifdPrivate,
}

impl ::std::fmt::Debug for AstalNotifdNotifd {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AstalNotifdNotifd @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct AstalNotifdNotification {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut AstalNotifdNotificationPrivate,
}

impl ::std::fmt::Debug for AstalNotifdNotification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AstalNotifdNotification @ {self:p}"))
         .finish()
    }
}

extern "C" {

    //=========================================================================
    // AstalNotifdClosedReason
    //=========================================================================
    pub fn astal_notifd_closed_reason_get_type() -> GType;

    //=========================================================================
    // AstalNotifdUrgency
    //=========================================================================
    pub fn astal_notifd_urgency_get_type() -> GType;

    //=========================================================================
    // AstalNotifdAction
    //=========================================================================
    pub fn astal_notifd_action_get_type() -> GType;

    //=========================================================================
    // AstalNotifdNotifd
    //=========================================================================
    pub fn astal_notifd_notifd_get_type() -> GType;
    pub fn astal_notifd_notifd_get_default() -> *mut AstalNotifdNotifd;
    pub fn astal_notifd_notifd_get_notification(self_: *mut AstalNotifdNotifd, id: c_uint) -> *mut AstalNotifdNotification;
    pub fn astal_notifd_notifd_new() -> *mut AstalNotifdNotifd;
    pub fn astal_notifd_notifd_get_ignore_timeout(self_: *mut AstalNotifdNotifd) -> gboolean;
    pub fn astal_notifd_notifd_set_ignore_timeout(self_: *mut AstalNotifdNotifd, value: gboolean);
    pub fn astal_notifd_notifd_get_dont_disturb(self_: *mut AstalNotifdNotifd) -> gboolean;
    pub fn astal_notifd_notifd_set_dont_disturb(self_: *mut AstalNotifdNotifd, value: gboolean);
    pub fn astal_notifd_notifd_get_notifications(self_: *mut AstalNotifdNotifd) -> *mut glib::GList;

    //=========================================================================
    // AstalNotifdNotification
    //=========================================================================
    pub fn astal_notifd_notification_get_type() -> GType;
    pub fn astal_notifd_notification_get_hint(self_: *mut AstalNotifdNotification, hint: *const c_char) -> *mut glib::GVariant;
    pub fn astal_notifd_notification_get_str_hint(self_: *mut AstalNotifdNotification, hint: *const c_char) -> *const c_char;
    pub fn astal_notifd_notification_get_bool_hint(self_: *mut AstalNotifdNotification, hint: *const c_char) -> gboolean;
    pub fn astal_notifd_notification_get_int_hint(self_: *mut AstalNotifdNotification, hint: *const c_char) -> c_int;
    pub fn astal_notifd_notification_get_byte_hint(self_: *mut AstalNotifdNotification, hint: *const c_char) -> u8;
    pub fn astal_notifd_notification_dismiss(self_: *mut AstalNotifdNotification);
    pub fn astal_notifd_notification_invoke(self_: *mut AstalNotifdNotification, action_id: *const c_char);
    pub fn astal_notifd_notification_get_time(self_: *mut AstalNotifdNotification) -> i64;
    pub fn astal_notifd_notification_get_app_name(self_: *mut AstalNotifdNotification) -> *const c_char;
    pub fn astal_notifd_notification_get_app_icon(self_: *mut AstalNotifdNotification) -> *const c_char;
    pub fn astal_notifd_notification_get_summary(self_: *mut AstalNotifdNotification) -> *const c_char;
    pub fn astal_notifd_notification_get_body(self_: *mut AstalNotifdNotification) -> *const c_char;
    pub fn astal_notifd_notification_get_id(self_: *mut AstalNotifdNotification) -> c_uint;
    pub fn astal_notifd_notification_get_expire_timeout(self_: *mut AstalNotifdNotification) -> c_int;
    pub fn astal_notifd_notification_get_actions(self_: *mut AstalNotifdNotification) -> *mut glib::GList;
    pub fn astal_notifd_notification_get_image(self_: *mut AstalNotifdNotification) -> *const c_char;
    pub fn astal_notifd_notification_get_action_icons(self_: *mut AstalNotifdNotification) -> gboolean;
    pub fn astal_notifd_notification_get_category(self_: *mut AstalNotifdNotification) -> *const c_char;
    pub fn astal_notifd_notification_get_desktop_entry(self_: *mut AstalNotifdNotification) -> *const c_char;
    pub fn astal_notifd_notification_get_resident(self_: *mut AstalNotifdNotification) -> gboolean;
    pub fn astal_notifd_notification_get_sound_file(self_: *mut AstalNotifdNotification) -> *const c_char;
    pub fn astal_notifd_notification_get_sound_name(self_: *mut AstalNotifdNotification) -> *const c_char;
    pub fn astal_notifd_notification_get_suppress_sound(self_: *mut AstalNotifdNotification) -> gboolean;
    pub fn astal_notifd_notification_get_transient(self_: *mut AstalNotifdNotification) -> gboolean;
    pub fn astal_notifd_notification_get_x(self_: *mut AstalNotifdNotification) -> c_int;
    pub fn astal_notifd_notification_get_y(self_: *mut AstalNotifdNotification) -> c_int;
    pub fn astal_notifd_notification_get_urgency(self_: *mut AstalNotifdNotification) -> AstalNotifdUrgency;

    //=========================================================================
    // Other functions
    //=========================================================================
    pub fn astal_notifd_get_default() -> *mut AstalNotifdNotifd;

}
